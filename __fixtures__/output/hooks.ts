import { useKubernetes } from "./context";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { GetServiceAccountIssuerOpenIDConfigurationRequest, APIVersions, GetCoreAPIVersionsRequest, APIResourceList, GetCoreV1APIResourcesRequest, ComponentStatusList, ListCoreV1ComponentStatusRequest, ComponentStatus, ReadCoreV1ComponentStatusRequest, ConfigMapList, ListCoreV1ConfigMapForAllNamespacesRequest, EndpointsList, ListCoreV1EndpointsForAllNamespacesRequest, EventList, ListCoreV1EventForAllNamespacesRequest, LimitRangeList, ListCoreV1LimitRangeForAllNamespacesRequest, NamespaceList, ListCoreV1NamespaceRequest, Namespace, CreateCoreV1NamespaceRequest, Binding, CreateCoreV1NamespacedBindingRequest, ListCoreV1NamespacedConfigMapRequest, ConfigMap, CreateCoreV1NamespacedConfigMapRequest, Status, DeleteCoreV1CollectionNamespacedConfigMapRequest, ReadCoreV1NamespacedConfigMapRequest, ReplaceCoreV1NamespacedConfigMapRequest, DeleteCoreV1NamespacedConfigMapRequest, PatchCoreV1NamespacedConfigMapRequest, ListCoreV1NamespacedEndpointsRequest, Endpoints, CreateCoreV1NamespacedEndpointsRequest, DeleteCoreV1CollectionNamespacedEndpointsRequest, ReadCoreV1NamespacedEndpointsRequest, ReplaceCoreV1NamespacedEndpointsRequest, DeleteCoreV1NamespacedEndpointsRequest, PatchCoreV1NamespacedEndpointsRequest, ListCoreV1NamespacedEventRequest, Event, CreateCoreV1NamespacedEventRequest, DeleteCoreV1CollectionNamespacedEventRequest, ReadCoreV1NamespacedEventRequest, ReplaceCoreV1NamespacedEventRequest, DeleteCoreV1NamespacedEventRequest, PatchCoreV1NamespacedEventRequest, ListCoreV1NamespacedLimitRangeRequest, LimitRange, CreateCoreV1NamespacedLimitRangeRequest, DeleteCoreV1CollectionNamespacedLimitRangeRequest, ReadCoreV1NamespacedLimitRangeRequest, ReplaceCoreV1NamespacedLimitRangeRequest, DeleteCoreV1NamespacedLimitRangeRequest, PatchCoreV1NamespacedLimitRangeRequest, PersistentVolumeClaimList, ListCoreV1NamespacedPersistentVolumeClaimRequest, PersistentVolumeClaim, CreateCoreV1NamespacedPersistentVolumeClaimRequest, DeleteCoreV1CollectionNamespacedPersistentVolumeClaimRequest, ReadCoreV1NamespacedPersistentVolumeClaimRequest, ReplaceCoreV1NamespacedPersistentVolumeClaimRequest, DeleteCoreV1NamespacedPersistentVolumeClaimRequest, PatchCoreV1NamespacedPersistentVolumeClaimRequest, ReadCoreV1NamespacedPersistentVolumeClaimStatusRequest, ReplaceCoreV1NamespacedPersistentVolumeClaimStatusRequest, PatchCoreV1NamespacedPersistentVolumeClaimStatusRequest, PodList, ListCoreV1NamespacedPodRequest, Pod, CreateCoreV1NamespacedPodRequest, DeleteCoreV1CollectionNamespacedPodRequest, ReadCoreV1NamespacedPodRequest, ReplaceCoreV1NamespacedPodRequest, DeleteCoreV1NamespacedPodRequest, PatchCoreV1NamespacedPodRequest, ConnectCoreV1GetNamespacedPodAttachRequest, ConnectCoreV1PostNamespacedPodAttachRequest, CreateCoreV1NamespacedPodBindingRequest, Eviction, CreateCoreV1NamespacedPodEvictionRequest, ConnectCoreV1GetNamespacedPodExecRequest, ConnectCoreV1PostNamespacedPodExecRequest, ReadCoreV1NamespacedPodLogRequest, ConnectCoreV1GetNamespacedPodPortforwardRequest, ConnectCoreV1PostNamespacedPodPortforwardRequest, ConnectCoreV1GetNamespacedPodProxyRequest, ConnectCoreV1PostNamespacedPodProxyRequest, ConnectCoreV1PutNamespacedPodProxyRequest, ConnectCoreV1DeleteNamespacedPodProxyRequest, ConnectCoreV1PatchNamespacedPodProxyRequest, ConnectCoreV1GetNamespacedPodProxyWithPathRequest, ConnectCoreV1PostNamespacedPodProxyWithPathRequest, ConnectCoreV1PutNamespacedPodProxyWithPathRequest, ConnectCoreV1DeleteNamespacedPodProxyWithPathRequest, ConnectCoreV1PatchNamespacedPodProxyWithPathRequest, ReadCoreV1NamespacedPodStatusRequest, ReplaceCoreV1NamespacedPodStatusRequest, PatchCoreV1NamespacedPodStatusRequest, PodTemplateList, ListCoreV1NamespacedPodTemplateRequest, PodTemplate, CreateCoreV1NamespacedPodTemplateRequest, DeleteCoreV1CollectionNamespacedPodTemplateRequest, ReadCoreV1NamespacedPodTemplateRequest, ReplaceCoreV1NamespacedPodTemplateRequest, DeleteCoreV1NamespacedPodTemplateRequest, PatchCoreV1NamespacedPodTemplateRequest, ReplicationControllerList, ListCoreV1NamespacedReplicationControllerRequest, ReplicationController, CreateCoreV1NamespacedReplicationControllerRequest, DeleteCoreV1CollectionNamespacedReplicationControllerRequest, ReadCoreV1NamespacedReplicationControllerRequest, ReplaceCoreV1NamespacedReplicationControllerRequest, DeleteCoreV1NamespacedReplicationControllerRequest, PatchCoreV1NamespacedReplicationControllerRequest, Scale, ReadCoreV1NamespacedReplicationControllerScaleRequest, ReplaceCoreV1NamespacedReplicationControllerScaleRequest, PatchCoreV1NamespacedReplicationControllerScaleRequest, ReadCoreV1NamespacedReplicationControllerStatusRequest, ReplaceCoreV1NamespacedReplicationControllerStatusRequest, PatchCoreV1NamespacedReplicationControllerStatusRequest, ResourceQuotaList, ListCoreV1NamespacedResourceQuotaRequest, ResourceQuota, CreateCoreV1NamespacedResourceQuotaRequest, DeleteCoreV1CollectionNamespacedResourceQuotaRequest, ReadCoreV1NamespacedResourceQuotaRequest, ReplaceCoreV1NamespacedResourceQuotaRequest, DeleteCoreV1NamespacedResourceQuotaRequest, PatchCoreV1NamespacedResourceQuotaRequest, ReadCoreV1NamespacedResourceQuotaStatusRequest, ReplaceCoreV1NamespacedResourceQuotaStatusRequest, PatchCoreV1NamespacedResourceQuotaStatusRequest, SecretList, ListCoreV1NamespacedSecretRequest, Secret, CreateCoreV1NamespacedSecretRequest, DeleteCoreV1CollectionNamespacedSecretRequest, ReadCoreV1NamespacedSecretRequest, ReplaceCoreV1NamespacedSecretRequest, DeleteCoreV1NamespacedSecretRequest, PatchCoreV1NamespacedSecretRequest, ServiceAccountList, ListCoreV1NamespacedServiceAccountRequest, ServiceAccount, CreateCoreV1NamespacedServiceAccountRequest, DeleteCoreV1CollectionNamespacedServiceAccountRequest, ReadCoreV1NamespacedServiceAccountRequest, ReplaceCoreV1NamespacedServiceAccountRequest, DeleteCoreV1NamespacedServiceAccountRequest, PatchCoreV1NamespacedServiceAccountRequest, TokenRequest, CreateCoreV1NamespacedServiceAccountTokenRequest, ServiceList, ListCoreV1NamespacedServiceRequest, Service, CreateCoreV1NamespacedServiceRequest, ReadCoreV1NamespacedServiceRequest, ReplaceCoreV1NamespacedServiceRequest, DeleteCoreV1NamespacedServiceRequest, PatchCoreV1NamespacedServiceRequest, ConnectCoreV1GetNamespacedServiceProxyRequest, ConnectCoreV1PostNamespacedServiceProxyRequest, ConnectCoreV1PutNamespacedServiceProxyRequest, ConnectCoreV1DeleteNamespacedServiceProxyRequest, ConnectCoreV1PatchNamespacedServiceProxyRequest, ConnectCoreV1GetNamespacedServiceProxyWithPathRequest, ConnectCoreV1PostNamespacedServiceProxyWithPathRequest, ConnectCoreV1PutNamespacedServiceProxyWithPathRequest, ConnectCoreV1DeleteNamespacedServiceProxyWithPathRequest, ConnectCoreV1PatchNamespacedServiceProxyWithPathRequest, ReadCoreV1NamespacedServiceStatusRequest, ReplaceCoreV1NamespacedServiceStatusRequest, PatchCoreV1NamespacedServiceStatusRequest, ReadCoreV1NamespaceRequest, ReplaceCoreV1NamespaceRequest, DeleteCoreV1NamespaceRequest, PatchCoreV1NamespaceRequest, ReplaceCoreV1NamespaceFinalizeRequest, ReadCoreV1NamespaceStatusRequest, ReplaceCoreV1NamespaceStatusRequest, PatchCoreV1NamespaceStatusRequest, NodeList, ListCoreV1NodeRequest, Node, CreateCoreV1NodeRequest, DeleteCoreV1CollectionNodeRequest, ReadCoreV1NodeRequest, ReplaceCoreV1NodeRequest, DeleteCoreV1NodeRequest, PatchCoreV1NodeRequest, ConnectCoreV1GetNodeProxyRequest, ConnectCoreV1PostNodeProxyRequest, ConnectCoreV1PutNodeProxyRequest, ConnectCoreV1DeleteNodeProxyRequest, ConnectCoreV1PatchNodeProxyRequest, ConnectCoreV1GetNodeProxyWithPathRequest, ConnectCoreV1PostNodeProxyWithPathRequest, ConnectCoreV1PutNodeProxyWithPathRequest, ConnectCoreV1DeleteNodeProxyWithPathRequest, ConnectCoreV1PatchNodeProxyWithPathRequest, ReadCoreV1NodeStatusRequest, ReplaceCoreV1NodeStatusRequest, PatchCoreV1NodeStatusRequest, ListCoreV1PersistentVolumeClaimForAllNamespacesRequest, PersistentVolumeList, ListCoreV1PersistentVolumeRequest, PersistentVolume, CreateCoreV1PersistentVolumeRequest, DeleteCoreV1CollectionPersistentVolumeRequest, ReadCoreV1PersistentVolumeRequest, ReplaceCoreV1PersistentVolumeRequest, DeleteCoreV1PersistentVolumeRequest, PatchCoreV1PersistentVolumeRequest, ReadCoreV1PersistentVolumeStatusRequest, ReplaceCoreV1PersistentVolumeStatusRequest, PatchCoreV1PersistentVolumeStatusRequest, ListCoreV1PodForAllNamespacesRequest, ListCoreV1PodTemplateForAllNamespacesRequest, ListCoreV1ReplicationControllerForAllNamespacesRequest, ListCoreV1ResourceQuotaForAllNamespacesRequest, ListCoreV1SecretForAllNamespacesRequest, ListCoreV1ServiceAccountForAllNamespacesRequest, ListCoreV1ServiceForAllNamespacesRequest, WatchEvent, WatchCoreV1ConfigMapListForAllNamespacesRequest, WatchCoreV1EndpointsListForAllNamespacesRequest, WatchCoreV1EventListForAllNamespacesRequest, WatchCoreV1LimitRangeListForAllNamespacesRequest, WatchCoreV1NamespaceListRequest, WatchCoreV1NamespacedConfigMapListRequest, WatchCoreV1NamespacedConfigMapRequest, WatchCoreV1NamespacedEndpointsListRequest, WatchCoreV1NamespacedEndpointsRequest, WatchCoreV1NamespacedEventListRequest, WatchCoreV1NamespacedEventRequest, WatchCoreV1NamespacedLimitRangeListRequest, WatchCoreV1NamespacedLimitRangeRequest, WatchCoreV1NamespacedPersistentVolumeClaimListRequest, WatchCoreV1NamespacedPersistentVolumeClaimRequest, WatchCoreV1NamespacedPodListRequest, WatchCoreV1NamespacedPodRequest, WatchCoreV1NamespacedPodTemplateListRequest, WatchCoreV1NamespacedPodTemplateRequest, WatchCoreV1NamespacedReplicationControllerListRequest, WatchCoreV1NamespacedReplicationControllerRequest, WatchCoreV1NamespacedResourceQuotaListRequest, WatchCoreV1NamespacedResourceQuotaRequest, WatchCoreV1NamespacedSecretListRequest, WatchCoreV1NamespacedSecretRequest, WatchCoreV1NamespacedServiceAccountListRequest, WatchCoreV1NamespacedServiceAccountRequest, WatchCoreV1NamespacedServiceListRequest, WatchCoreV1NamespacedServiceRequest, WatchCoreV1NamespaceRequest, WatchCoreV1NodeListRequest, WatchCoreV1NodeRequest, WatchCoreV1PersistentVolumeClaimListForAllNamespacesRequest, WatchCoreV1PersistentVolumeListRequest, WatchCoreV1PersistentVolumeRequest, WatchCoreV1PodListForAllNamespacesRequest, WatchCoreV1PodTemplateListForAllNamespacesRequest, WatchCoreV1ReplicationControllerListForAllNamespacesRequest, WatchCoreV1ResourceQuotaListForAllNamespacesRequest, WatchCoreV1SecretListForAllNamespacesRequest, WatchCoreV1ServiceAccountListForAllNamespacesRequest, WatchCoreV1ServiceListForAllNamespacesRequest, APIGroupList, GetAPIVersionsRequest, APIGroup, GetAdmissionregistrationAPIGroupRequest, GetAdmissionregistrationV1APIResourcesRequest, MutatingWebhookConfigurationList, ListAdmissionregistrationV1MutatingWebhookConfigurationRequest, MutatingWebhookConfiguration, CreateAdmissionregistrationV1MutatingWebhookConfigurationRequest, DeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationRequest, ReadAdmissionregistrationV1MutatingWebhookConfigurationRequest, ReplaceAdmissionregistrationV1MutatingWebhookConfigurationRequest, DeleteAdmissionregistrationV1MutatingWebhookConfigurationRequest, PatchAdmissionregistrationV1MutatingWebhookConfigurationRequest, ValidatingWebhookConfigurationList, ListAdmissionregistrationV1ValidatingWebhookConfigurationRequest, ValidatingWebhookConfiguration, CreateAdmissionregistrationV1ValidatingWebhookConfigurationRequest, DeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationRequest, ReadAdmissionregistrationV1ValidatingWebhookConfigurationRequest, ReplaceAdmissionregistrationV1ValidatingWebhookConfigurationRequest, DeleteAdmissionregistrationV1ValidatingWebhookConfigurationRequest, PatchAdmissionregistrationV1ValidatingWebhookConfigurationRequest, WatchAdmissionregistrationV1MutatingWebhookConfigurationListRequest, WatchAdmissionregistrationV1MutatingWebhookConfigurationRequest, WatchAdmissionregistrationV1ValidatingWebhookConfigurationListRequest, WatchAdmissionregistrationV1ValidatingWebhookConfigurationRequest, GetApiextensionsAPIGroupRequest, GetApiextensionsV1APIResourcesRequest, CustomResourceDefinitionList, ListApiextensionsV1CustomResourceDefinitionRequest, CustomResourceDefinition, CreateApiextensionsV1CustomResourceDefinitionRequest, DeleteApiextensionsV1CollectionCustomResourceDefinitionRequest, ReadApiextensionsV1CustomResourceDefinitionRequest, ReplaceApiextensionsV1CustomResourceDefinitionRequest, DeleteApiextensionsV1CustomResourceDefinitionRequest, PatchApiextensionsV1CustomResourceDefinitionRequest, ReadApiextensionsV1CustomResourceDefinitionStatusRequest, ReplaceApiextensionsV1CustomResourceDefinitionStatusRequest, PatchApiextensionsV1CustomResourceDefinitionStatusRequest, WatchApiextensionsV1CustomResourceDefinitionListRequest, WatchApiextensionsV1CustomResourceDefinitionRequest, GetApiregistrationAPIGroupRequest, GetApiregistrationV1APIResourcesRequest, APIServiceList, ListApiregistrationV1APIServiceRequest, APIService, CreateApiregistrationV1APIServiceRequest, DeleteApiregistrationV1CollectionAPIServiceRequest, ReadApiregistrationV1APIServiceRequest, ReplaceApiregistrationV1APIServiceRequest, DeleteApiregistrationV1APIServiceRequest, PatchApiregistrationV1APIServiceRequest, ReadApiregistrationV1APIServiceStatusRequest, ReplaceApiregistrationV1APIServiceStatusRequest, PatchApiregistrationV1APIServiceStatusRequest, WatchApiregistrationV1APIServiceListRequest, WatchApiregistrationV1APIServiceRequest, GetAppsAPIGroupRequest, GetAppsV1APIResourcesRequest, ControllerRevisionList, ListAppsV1ControllerRevisionForAllNamespacesRequest, DaemonSetList, ListAppsV1DaemonSetForAllNamespacesRequest, DeploymentList, ListAppsV1DeploymentForAllNamespacesRequest, ListAppsV1NamespacedControllerRevisionRequest, ControllerRevision, CreateAppsV1NamespacedControllerRevisionRequest, DeleteAppsV1CollectionNamespacedControllerRevisionRequest, ReadAppsV1NamespacedControllerRevisionRequest, ReplaceAppsV1NamespacedControllerRevisionRequest, DeleteAppsV1NamespacedControllerRevisionRequest, PatchAppsV1NamespacedControllerRevisionRequest, ListAppsV1NamespacedDaemonSetRequest, DaemonSet, CreateAppsV1NamespacedDaemonSetRequest, DeleteAppsV1CollectionNamespacedDaemonSetRequest, ReadAppsV1NamespacedDaemonSetRequest, ReplaceAppsV1NamespacedDaemonSetRequest, DeleteAppsV1NamespacedDaemonSetRequest, PatchAppsV1NamespacedDaemonSetRequest, ReadAppsV1NamespacedDaemonSetStatusRequest, ReplaceAppsV1NamespacedDaemonSetStatusRequest, PatchAppsV1NamespacedDaemonSetStatusRequest, ListAppsV1NamespacedDeploymentRequest, Deployment, CreateAppsV1NamespacedDeploymentRequest, DeleteAppsV1CollectionNamespacedDeploymentRequest, ReadAppsV1NamespacedDeploymentRequest, ReplaceAppsV1NamespacedDeploymentRequest, DeleteAppsV1NamespacedDeploymentRequest, PatchAppsV1NamespacedDeploymentRequest, ReadAppsV1NamespacedDeploymentScaleRequest, ReplaceAppsV1NamespacedDeploymentScaleRequest, PatchAppsV1NamespacedDeploymentScaleRequest, ReadAppsV1NamespacedDeploymentStatusRequest, ReplaceAppsV1NamespacedDeploymentStatusRequest, PatchAppsV1NamespacedDeploymentStatusRequest, ReplicaSetList, ListAppsV1NamespacedReplicaSetRequest, ReplicaSet, CreateAppsV1NamespacedReplicaSetRequest, DeleteAppsV1CollectionNamespacedReplicaSetRequest, ReadAppsV1NamespacedReplicaSetRequest, ReplaceAppsV1NamespacedReplicaSetRequest, DeleteAppsV1NamespacedReplicaSetRequest, PatchAppsV1NamespacedReplicaSetRequest, ReadAppsV1NamespacedReplicaSetScaleRequest, ReplaceAppsV1NamespacedReplicaSetScaleRequest, PatchAppsV1NamespacedReplicaSetScaleRequest, ReadAppsV1NamespacedReplicaSetStatusRequest, ReplaceAppsV1NamespacedReplicaSetStatusRequest, PatchAppsV1NamespacedReplicaSetStatusRequest, StatefulSetList, ListAppsV1NamespacedStatefulSetRequest, StatefulSet, CreateAppsV1NamespacedStatefulSetRequest, DeleteAppsV1CollectionNamespacedStatefulSetRequest, ReadAppsV1NamespacedStatefulSetRequest, ReplaceAppsV1NamespacedStatefulSetRequest, DeleteAppsV1NamespacedStatefulSetRequest, PatchAppsV1NamespacedStatefulSetRequest, ReadAppsV1NamespacedStatefulSetScaleRequest, ReplaceAppsV1NamespacedStatefulSetScaleRequest, PatchAppsV1NamespacedStatefulSetScaleRequest, ReadAppsV1NamespacedStatefulSetStatusRequest, ReplaceAppsV1NamespacedStatefulSetStatusRequest, PatchAppsV1NamespacedStatefulSetStatusRequest, ListAppsV1ReplicaSetForAllNamespacesRequest, ListAppsV1StatefulSetForAllNamespacesRequest, WatchAppsV1ControllerRevisionListForAllNamespacesRequest, WatchAppsV1DaemonSetListForAllNamespacesRequest, WatchAppsV1DeploymentListForAllNamespacesRequest, WatchAppsV1NamespacedControllerRevisionListRequest, WatchAppsV1NamespacedControllerRevisionRequest, WatchAppsV1NamespacedDaemonSetListRequest, WatchAppsV1NamespacedDaemonSetRequest, WatchAppsV1NamespacedDeploymentListRequest, WatchAppsV1NamespacedDeploymentRequest, WatchAppsV1NamespacedReplicaSetListRequest, WatchAppsV1NamespacedReplicaSetRequest, WatchAppsV1NamespacedStatefulSetListRequest, WatchAppsV1NamespacedStatefulSetRequest, WatchAppsV1ReplicaSetListForAllNamespacesRequest, WatchAppsV1StatefulSetListForAllNamespacesRequest, GetAuthenticationAPIGroupRequest, GetAuthenticationV1APIResourcesRequest, TokenReview, CreateAuthenticationV1TokenReviewRequest, GetAuthorizationAPIGroupRequest, GetAuthorizationV1APIResourcesRequest, LocalSubjectAccessReview, CreateAuthorizationV1NamespacedLocalSubjectAccessReviewRequest, SelfSubjectAccessReview, CreateAuthorizationV1SelfSubjectAccessReviewRequest, SelfSubjectRulesReview, CreateAuthorizationV1SelfSubjectRulesReviewRequest, SubjectAccessReview, CreateAuthorizationV1SubjectAccessReviewRequest, GetAutoscalingAPIGroupRequest, GetAutoscalingV1APIResourcesRequest, HorizontalPodAutoscalerList, ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesRequest, ListAutoscalingV1NamespacedHorizontalPodAutoscalerRequest, HorizontalPodAutoscaler, CreateAutoscalingV1NamespacedHorizontalPodAutoscalerRequest, DeleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscalerRequest, ReadAutoscalingV1NamespacedHorizontalPodAutoscalerRequest, ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerRequest, DeleteAutoscalingV1NamespacedHorizontalPodAutoscalerRequest, PatchAutoscalingV1NamespacedHorizontalPodAutoscalerRequest, ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatusRequest, ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatusRequest, PatchAutoscalingV1NamespacedHorizontalPodAutoscalerStatusRequest, WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesRequest, WatchAutoscalingV1NamespacedHorizontalPodAutoscalerListRequest, WatchAutoscalingV1NamespacedHorizontalPodAutoscalerRequest, GetAutoscalingV2beta1APIResourcesRequest, ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesRequest, ListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest, CreateAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest, DeleteAutoscalingV2beta1CollectionNamespacedHorizontalPodAutoscalerRequest, ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest, ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest, DeleteAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest, PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest, ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusRequest, ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusRequest, PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusRequest, WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesRequest, WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListRequest, WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest, GetAutoscalingV2beta2APIResourcesRequest, ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesRequest, ListAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRequest, CreateAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRequest, DeleteAutoscalingV2beta2CollectionNamespacedHorizontalPodAutoscalerRequest, ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRequest, ReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRequest, DeleteAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRequest, PatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRequest, ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusRequest, ReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusRequest, PatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusRequest, WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesRequest, WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerListRequest, WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRequest, GetBatchAPIGroupRequest, GetBatchV1APIResourcesRequest, CronJobList, ListBatchV1CronJobForAllNamespacesRequest, JobList, ListBatchV1JobForAllNamespacesRequest, ListBatchV1NamespacedCronJobRequest, CronJob, CreateBatchV1NamespacedCronJobRequest, DeleteBatchV1CollectionNamespacedCronJobRequest, ReadBatchV1NamespacedCronJobRequest, ReplaceBatchV1NamespacedCronJobRequest, DeleteBatchV1NamespacedCronJobRequest, PatchBatchV1NamespacedCronJobRequest, ReadBatchV1NamespacedCronJobStatusRequest, ReplaceBatchV1NamespacedCronJobStatusRequest, PatchBatchV1NamespacedCronJobStatusRequest, ListBatchV1NamespacedJobRequest, Job, CreateBatchV1NamespacedJobRequest, DeleteBatchV1CollectionNamespacedJobRequest, ReadBatchV1NamespacedJobRequest, ReplaceBatchV1NamespacedJobRequest, DeleteBatchV1NamespacedJobRequest, PatchBatchV1NamespacedJobRequest, ReadBatchV1NamespacedJobStatusRequest, ReplaceBatchV1NamespacedJobStatusRequest, PatchBatchV1NamespacedJobStatusRequest, WatchBatchV1CronJobListForAllNamespacesRequest, WatchBatchV1JobListForAllNamespacesRequest, WatchBatchV1NamespacedCronJobListRequest, WatchBatchV1NamespacedCronJobRequest, WatchBatchV1NamespacedJobListRequest, WatchBatchV1NamespacedJobRequest, GetBatchV1beta1APIResourcesRequest, ListBatchV1beta1CronJobForAllNamespacesRequest, ListBatchV1beta1NamespacedCronJobRequest, CreateBatchV1beta1NamespacedCronJobRequest, DeleteBatchV1beta1CollectionNamespacedCronJobRequest, ReadBatchV1beta1NamespacedCronJobRequest, ReplaceBatchV1beta1NamespacedCronJobRequest, DeleteBatchV1beta1NamespacedCronJobRequest, PatchBatchV1beta1NamespacedCronJobRequest, ReadBatchV1beta1NamespacedCronJobStatusRequest, ReplaceBatchV1beta1NamespacedCronJobStatusRequest, PatchBatchV1beta1NamespacedCronJobStatusRequest, WatchBatchV1beta1CronJobListForAllNamespacesRequest, WatchBatchV1beta1NamespacedCronJobListRequest, WatchBatchV1beta1NamespacedCronJobRequest, GetCertificatesAPIGroupRequest, GetCertificatesV1APIResourcesRequest, CertificateSigningRequestList, ListCertificatesV1CertificateSigningRequestRequest, CertificateSigningRequest, CreateCertificatesV1CertificateSigningRequestRequest, DeleteCertificatesV1CollectionCertificateSigningRequestRequest, ReadCertificatesV1CertificateSigningRequestRequest, ReplaceCertificatesV1CertificateSigningRequestRequest, DeleteCertificatesV1CertificateSigningRequestRequest, PatchCertificatesV1CertificateSigningRequestRequest, ReadCertificatesV1CertificateSigningRequestApprovalRequest, ReplaceCertificatesV1CertificateSigningRequestApprovalRequest, PatchCertificatesV1CertificateSigningRequestApprovalRequest, ReadCertificatesV1CertificateSigningRequestStatusRequest, ReplaceCertificatesV1CertificateSigningRequestStatusRequest, PatchCertificatesV1CertificateSigningRequestStatusRequest, WatchCertificatesV1CertificateSigningRequestListRequest, WatchCertificatesV1CertificateSigningRequestRequest, GetCoordinationAPIGroupRequest, GetCoordinationV1APIResourcesRequest, LeaseList, ListCoordinationV1LeaseForAllNamespacesRequest, ListCoordinationV1NamespacedLeaseRequest, Lease, CreateCoordinationV1NamespacedLeaseRequest, DeleteCoordinationV1CollectionNamespacedLeaseRequest, ReadCoordinationV1NamespacedLeaseRequest, ReplaceCoordinationV1NamespacedLeaseRequest, DeleteCoordinationV1NamespacedLeaseRequest, PatchCoordinationV1NamespacedLeaseRequest, WatchCoordinationV1LeaseListForAllNamespacesRequest, WatchCoordinationV1NamespacedLeaseListRequest, WatchCoordinationV1NamespacedLeaseRequest, GetDiscoveryAPIGroupRequest, GetDiscoveryV1APIResourcesRequest, EndpointSliceList, ListDiscoveryV1EndpointSliceForAllNamespacesRequest, ListDiscoveryV1NamespacedEndpointSliceRequest, EndpointSlice, CreateDiscoveryV1NamespacedEndpointSliceRequest, DeleteDiscoveryV1CollectionNamespacedEndpointSliceRequest, ReadDiscoveryV1NamespacedEndpointSliceRequest, ReplaceDiscoveryV1NamespacedEndpointSliceRequest, DeleteDiscoveryV1NamespacedEndpointSliceRequest, PatchDiscoveryV1NamespacedEndpointSliceRequest, WatchDiscoveryV1EndpointSliceListForAllNamespacesRequest, WatchDiscoveryV1NamespacedEndpointSliceListRequest, WatchDiscoveryV1NamespacedEndpointSliceRequest, GetDiscoveryV1beta1APIResourcesRequest, ListDiscoveryV1beta1EndpointSliceForAllNamespacesRequest, ListDiscoveryV1beta1NamespacedEndpointSliceRequest, CreateDiscoveryV1beta1NamespacedEndpointSliceRequest, DeleteDiscoveryV1beta1CollectionNamespacedEndpointSliceRequest, ReadDiscoveryV1beta1NamespacedEndpointSliceRequest, ReplaceDiscoveryV1beta1NamespacedEndpointSliceRequest, DeleteDiscoveryV1beta1NamespacedEndpointSliceRequest, PatchDiscoveryV1beta1NamespacedEndpointSliceRequest, WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesRequest, WatchDiscoveryV1beta1NamespacedEndpointSliceListRequest, WatchDiscoveryV1beta1NamespacedEndpointSliceRequest, GetEventsAPIGroupRequest, GetEventsV1APIResourcesRequest, ListEventsV1EventForAllNamespacesRequest, ListEventsV1NamespacedEventRequest, CreateEventsV1NamespacedEventRequest, DeleteEventsV1CollectionNamespacedEventRequest, ReadEventsV1NamespacedEventRequest, ReplaceEventsV1NamespacedEventRequest, DeleteEventsV1NamespacedEventRequest, PatchEventsV1NamespacedEventRequest, WatchEventsV1EventListForAllNamespacesRequest, WatchEventsV1NamespacedEventListRequest, WatchEventsV1NamespacedEventRequest, GetEventsV1beta1APIResourcesRequest, ListEventsV1beta1EventForAllNamespacesRequest, ListEventsV1beta1NamespacedEventRequest, CreateEventsV1beta1NamespacedEventRequest, DeleteEventsV1beta1CollectionNamespacedEventRequest, ReadEventsV1beta1NamespacedEventRequest, ReplaceEventsV1beta1NamespacedEventRequest, DeleteEventsV1beta1NamespacedEventRequest, PatchEventsV1beta1NamespacedEventRequest, WatchEventsV1beta1EventListForAllNamespacesRequest, WatchEventsV1beta1NamespacedEventListRequest, WatchEventsV1beta1NamespacedEventRequest, GetFlowcontrolApiserverAPIGroupRequest, GetFlowcontrolApiserverV1beta1APIResourcesRequest, FlowSchemaList, ListFlowcontrolApiserverV1beta1FlowSchemaRequest, FlowSchema, CreateFlowcontrolApiserverV1beta1FlowSchemaRequest, DeleteFlowcontrolApiserverV1beta1CollectionFlowSchemaRequest, ReadFlowcontrolApiserverV1beta1FlowSchemaRequest, ReplaceFlowcontrolApiserverV1beta1FlowSchemaRequest, DeleteFlowcontrolApiserverV1beta1FlowSchemaRequest, PatchFlowcontrolApiserverV1beta1FlowSchemaRequest, ReadFlowcontrolApiserverV1beta1FlowSchemaStatusRequest, ReplaceFlowcontrolApiserverV1beta1FlowSchemaStatusRequest, PatchFlowcontrolApiserverV1beta1FlowSchemaStatusRequest, PriorityLevelConfigurationList, ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationRequest, PriorityLevelConfiguration, CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationRequest, DeleteFlowcontrolApiserverV1beta1CollectionPriorityLevelConfigurationRequest, ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationRequest, ReplaceFlowcontrolApiserverV1beta1PriorityLevelConfigurationRequest, DeleteFlowcontrolApiserverV1beta1PriorityLevelConfigurationRequest, PatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationRequest, ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusRequest, ReplaceFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusRequest, PatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusRequest, WatchFlowcontrolApiserverV1beta1FlowSchemaListRequest, WatchFlowcontrolApiserverV1beta1FlowSchemaRequest, WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListRequest, WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationRequest, GetNetworkingAPIGroupRequest, GetNetworkingV1APIResourcesRequest, IngressClassList, ListNetworkingV1IngressClassRequest, IngressClass, CreateNetworkingV1IngressClassRequest, DeleteNetworkingV1CollectionIngressClassRequest, ReadNetworkingV1IngressClassRequest, ReplaceNetworkingV1IngressClassRequest, DeleteNetworkingV1IngressClassRequest, PatchNetworkingV1IngressClassRequest, IngressList, ListNetworkingV1IngressForAllNamespacesRequest, ListNetworkingV1NamespacedIngressRequest, Ingress, CreateNetworkingV1NamespacedIngressRequest, DeleteNetworkingV1CollectionNamespacedIngressRequest, ReadNetworkingV1NamespacedIngressRequest, ReplaceNetworkingV1NamespacedIngressRequest, DeleteNetworkingV1NamespacedIngressRequest, PatchNetworkingV1NamespacedIngressRequest, ReadNetworkingV1NamespacedIngressStatusRequest, ReplaceNetworkingV1NamespacedIngressStatusRequest, PatchNetworkingV1NamespacedIngressStatusRequest, NetworkPolicyList, ListNetworkingV1NamespacedNetworkPolicyRequest, NetworkPolicy, CreateNetworkingV1NamespacedNetworkPolicyRequest, DeleteNetworkingV1CollectionNamespacedNetworkPolicyRequest, ReadNetworkingV1NamespacedNetworkPolicyRequest, ReplaceNetworkingV1NamespacedNetworkPolicyRequest, DeleteNetworkingV1NamespacedNetworkPolicyRequest, PatchNetworkingV1NamespacedNetworkPolicyRequest, ListNetworkingV1NetworkPolicyForAllNamespacesRequest, WatchNetworkingV1IngressClassListRequest, WatchNetworkingV1IngressClassRequest, WatchNetworkingV1IngressListForAllNamespacesRequest, WatchNetworkingV1NamespacedIngressListRequest, WatchNetworkingV1NamespacedIngressRequest, WatchNetworkingV1NamespacedNetworkPolicyListRequest, WatchNetworkingV1NamespacedNetworkPolicyRequest, WatchNetworkingV1NetworkPolicyListForAllNamespacesRequest, GetNodeAPIGroupRequest, GetNodeV1APIResourcesRequest, RuntimeClassList, ListNodeV1RuntimeClassRequest, RuntimeClass, CreateNodeV1RuntimeClassRequest, DeleteNodeV1CollectionRuntimeClassRequest, ReadNodeV1RuntimeClassRequest, ReplaceNodeV1RuntimeClassRequest, DeleteNodeV1RuntimeClassRequest, PatchNodeV1RuntimeClassRequest, WatchNodeV1RuntimeClassListRequest, WatchNodeV1RuntimeClassRequest, GetNodeV1beta1APIResourcesRequest, ListNodeV1beta1RuntimeClassRequest, CreateNodeV1beta1RuntimeClassRequest, DeleteNodeV1beta1CollectionRuntimeClassRequest, ReadNodeV1beta1RuntimeClassRequest, ReplaceNodeV1beta1RuntimeClassRequest, DeleteNodeV1beta1RuntimeClassRequest, PatchNodeV1beta1RuntimeClassRequest, WatchNodeV1beta1RuntimeClassListRequest, WatchNodeV1beta1RuntimeClassRequest, GetPolicyAPIGroupRequest, GetPolicyV1APIResourcesRequest, PodDisruptionBudgetList, ListPolicyV1NamespacedPodDisruptionBudgetRequest, PodDisruptionBudget, CreatePolicyV1NamespacedPodDisruptionBudgetRequest, DeletePolicyV1CollectionNamespacedPodDisruptionBudgetRequest, ReadPolicyV1NamespacedPodDisruptionBudgetRequest, ReplacePolicyV1NamespacedPodDisruptionBudgetRequest, DeletePolicyV1NamespacedPodDisruptionBudgetRequest, PatchPolicyV1NamespacedPodDisruptionBudgetRequest, ReadPolicyV1NamespacedPodDisruptionBudgetStatusRequest, ReplacePolicyV1NamespacedPodDisruptionBudgetStatusRequest, PatchPolicyV1NamespacedPodDisruptionBudgetStatusRequest, ListPolicyV1PodDisruptionBudgetForAllNamespacesRequest, WatchPolicyV1NamespacedPodDisruptionBudgetListRequest, WatchPolicyV1NamespacedPodDisruptionBudgetRequest, WatchPolicyV1PodDisruptionBudgetListForAllNamespacesRequest, GetPolicyV1beta1APIResourcesRequest, ListPolicyV1beta1NamespacedPodDisruptionBudgetRequest, CreatePolicyV1beta1NamespacedPodDisruptionBudgetRequest, DeletePolicyV1beta1CollectionNamespacedPodDisruptionBudgetRequest, ReadPolicyV1beta1NamespacedPodDisruptionBudgetRequest, ReplacePolicyV1beta1NamespacedPodDisruptionBudgetRequest, DeletePolicyV1beta1NamespacedPodDisruptionBudgetRequest, PatchPolicyV1beta1NamespacedPodDisruptionBudgetRequest, ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusRequest, ReplacePolicyV1beta1NamespacedPodDisruptionBudgetStatusRequest, PatchPolicyV1beta1NamespacedPodDisruptionBudgetStatusRequest, ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesRequest, PodSecurityPolicyList, ListPolicyV1beta1PodSecurityPolicyRequest, PodSecurityPolicy, CreatePolicyV1beta1PodSecurityPolicyRequest, DeletePolicyV1beta1CollectionPodSecurityPolicyRequest, ReadPolicyV1beta1PodSecurityPolicyRequest, ReplacePolicyV1beta1PodSecurityPolicyRequest, DeletePolicyV1beta1PodSecurityPolicyRequest, PatchPolicyV1beta1PodSecurityPolicyRequest, WatchPolicyV1beta1NamespacedPodDisruptionBudgetListRequest, WatchPolicyV1beta1NamespacedPodDisruptionBudgetRequest, WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesRequest, WatchPolicyV1beta1PodSecurityPolicyListRequest, WatchPolicyV1beta1PodSecurityPolicyRequest, GetRbacAuthorizationAPIGroupRequest, GetRbacAuthorizationV1APIResourcesRequest, ClusterRoleBindingList, ListRbacAuthorizationV1ClusterRoleBindingRequest, ClusterRoleBinding, CreateRbacAuthorizationV1ClusterRoleBindingRequest, DeleteRbacAuthorizationV1CollectionClusterRoleBindingRequest, ReadRbacAuthorizationV1ClusterRoleBindingRequest, ReplaceRbacAuthorizationV1ClusterRoleBindingRequest, DeleteRbacAuthorizationV1ClusterRoleBindingRequest, PatchRbacAuthorizationV1ClusterRoleBindingRequest, ClusterRoleList, ListRbacAuthorizationV1ClusterRoleRequest, ClusterRole, CreateRbacAuthorizationV1ClusterRoleRequest, DeleteRbacAuthorizationV1CollectionClusterRoleRequest, ReadRbacAuthorizationV1ClusterRoleRequest, ReplaceRbacAuthorizationV1ClusterRoleRequest, DeleteRbacAuthorizationV1ClusterRoleRequest, PatchRbacAuthorizationV1ClusterRoleRequest, RoleBindingList, ListRbacAuthorizationV1NamespacedRoleBindingRequest, RoleBinding, CreateRbacAuthorizationV1NamespacedRoleBindingRequest, DeleteRbacAuthorizationV1CollectionNamespacedRoleBindingRequest, ReadRbacAuthorizationV1NamespacedRoleBindingRequest, ReplaceRbacAuthorizationV1NamespacedRoleBindingRequest, DeleteRbacAuthorizationV1NamespacedRoleBindingRequest, PatchRbacAuthorizationV1NamespacedRoleBindingRequest, RoleList, ListRbacAuthorizationV1NamespacedRoleRequest, Role, CreateRbacAuthorizationV1NamespacedRoleRequest, DeleteRbacAuthorizationV1CollectionNamespacedRoleRequest, ReadRbacAuthorizationV1NamespacedRoleRequest, ReplaceRbacAuthorizationV1NamespacedRoleRequest, DeleteRbacAuthorizationV1NamespacedRoleRequest, PatchRbacAuthorizationV1NamespacedRoleRequest, ListRbacAuthorizationV1RoleBindingForAllNamespacesRequest, ListRbacAuthorizationV1RoleForAllNamespacesRequest, WatchRbacAuthorizationV1ClusterRoleBindingListRequest, WatchRbacAuthorizationV1ClusterRoleBindingRequest, WatchRbacAuthorizationV1ClusterRoleListRequest, WatchRbacAuthorizationV1ClusterRoleRequest, WatchRbacAuthorizationV1NamespacedRoleBindingListRequest, WatchRbacAuthorizationV1NamespacedRoleBindingRequest, WatchRbacAuthorizationV1NamespacedRoleListRequest, WatchRbacAuthorizationV1NamespacedRoleRequest, WatchRbacAuthorizationV1RoleBindingListForAllNamespacesRequest, WatchRbacAuthorizationV1RoleListForAllNamespacesRequest, GetSchedulingAPIGroupRequest, GetSchedulingV1APIResourcesRequest, PriorityClassList, ListSchedulingV1PriorityClassRequest, PriorityClass, CreateSchedulingV1PriorityClassRequest, DeleteSchedulingV1CollectionPriorityClassRequest, ReadSchedulingV1PriorityClassRequest, ReplaceSchedulingV1PriorityClassRequest, DeleteSchedulingV1PriorityClassRequest, PatchSchedulingV1PriorityClassRequest, WatchSchedulingV1PriorityClassListRequest, WatchSchedulingV1PriorityClassRequest, GetStorageAPIGroupRequest, GetStorageV1APIResourcesRequest, CSIDriverList, ListStorageV1CSIDriverRequest, CSIDriver, CreateStorageV1CSIDriverRequest, DeleteStorageV1CollectionCSIDriverRequest, ReadStorageV1CSIDriverRequest, ReplaceStorageV1CSIDriverRequest, DeleteStorageV1CSIDriverRequest, PatchStorageV1CSIDriverRequest, CSINodeList, ListStorageV1CSINodeRequest, CSINode, CreateStorageV1CSINodeRequest, DeleteStorageV1CollectionCSINodeRequest, ReadStorageV1CSINodeRequest, ReplaceStorageV1CSINodeRequest, DeleteStorageV1CSINodeRequest, PatchStorageV1CSINodeRequest, StorageClassList, ListStorageV1StorageClassRequest, StorageClass, CreateStorageV1StorageClassRequest, DeleteStorageV1CollectionStorageClassRequest, ReadStorageV1StorageClassRequest, ReplaceStorageV1StorageClassRequest, DeleteStorageV1StorageClassRequest, PatchStorageV1StorageClassRequest, VolumeAttachmentList, ListStorageV1VolumeAttachmentRequest, VolumeAttachment, CreateStorageV1VolumeAttachmentRequest, DeleteStorageV1CollectionVolumeAttachmentRequest, ReadStorageV1VolumeAttachmentRequest, ReplaceStorageV1VolumeAttachmentRequest, DeleteStorageV1VolumeAttachmentRequest, PatchStorageV1VolumeAttachmentRequest, ReadStorageV1VolumeAttachmentStatusRequest, ReplaceStorageV1VolumeAttachmentStatusRequest, PatchStorageV1VolumeAttachmentStatusRequest, WatchStorageV1CSIDriverListRequest, WatchStorageV1CSIDriverRequest, WatchStorageV1CSINodeListRequest, WatchStorageV1CSINodeRequest, WatchStorageV1StorageClassListRequest, WatchStorageV1StorageClassRequest, WatchStorageV1VolumeAttachmentListRequest, WatchStorageV1VolumeAttachmentRequest, GetStorageV1beta1APIResourcesRequest, CSIStorageCapacityList, ListStorageV1beta1CSIStorageCapacityForAllNamespacesRequest, ListStorageV1beta1NamespacedCSIStorageCapacityRequest, CSIStorageCapacity, CreateStorageV1beta1NamespacedCSIStorageCapacityRequest, DeleteStorageV1beta1CollectionNamespacedCSIStorageCapacityRequest, ReadStorageV1beta1NamespacedCSIStorageCapacityRequest, ReplaceStorageV1beta1NamespacedCSIStorageCapacityRequest, DeleteStorageV1beta1NamespacedCSIStorageCapacityRequest, PatchStorageV1beta1NamespacedCSIStorageCapacityRequest, WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesRequest, WatchStorageV1beta1NamespacedCSIStorageCapacityListRequest, WatchStorageV1beta1NamespacedCSIStorageCapacityRequest, LogFileListHandlerRequest, LogFileHandlerRequest, GetServiceAccountIssuerOpenIDKeysetRequest, Info, GetCodeVersionRequest } from "./swagger-client";
const WELL_KNOWN_OPENID_CONFIGURATION_KEY = ["well_known_openid_configuration"];
const API_KEY = ["api"];
const API_V1_KEY = ["api_v1"];
const API_V1_COMPONENTSTATUSES_KEY = ["api_v1_componentstatuses"];
const API_V1_COMPONENTSTATUSES_NAME_KEY = ["api_v1_componentstatuses_name"];
const API_V1_CONFIGMAPS_KEY = ["api_v1_configmaps"];
const API_V1_ENDPOINTS_KEY = ["api_v1_endpoints"];
const API_V1_EVENTS_KEY = ["api_v1_events"];
const API_V1_LIMITRANGES_KEY = ["api_v1_limitranges"];
const API_V1_NAMESPACES_KEY = ["api_v1_namespaces"];
const API_V1_NAMESPACES_NAMESPACE_BINDINGS_KEY = ["api_v1_namespaces_namespace_bindings"];
const API_V1_NAMESPACES_NAMESPACE_CONFIGMAPS_KEY = ["api_v1_namespaces_namespace_configmaps"];
const API_V1_NAMESPACES_NAMESPACE_CONFIGMAPS_NAME_KEY = ["api_v1_namespaces_namespace_configmaps_name"];
const API_V1_NAMESPACES_NAMESPACE_ENDPOINTS_KEY = ["api_v1_namespaces_namespace_endpoints"];
const API_V1_NAMESPACES_NAMESPACE_ENDPOINTS_NAME_KEY = ["api_v1_namespaces_namespace_endpoints_name"];
const API_V1_NAMESPACES_NAMESPACE_EVENTS_KEY = ["api_v1_namespaces_namespace_events"];
const API_V1_NAMESPACES_NAMESPACE_EVENTS_NAME_KEY = ["api_v1_namespaces_namespace_events_name"];
const API_V1_NAMESPACES_NAMESPACE_LIMITRANGES_KEY = ["api_v1_namespaces_namespace_limitranges"];
const API_V1_NAMESPACES_NAMESPACE_LIMITRANGES_NAME_KEY = ["api_v1_namespaces_namespace_limitranges_name"];
const API_V1_NAMESPACES_NAMESPACE_PERSISTENTVOLUMECLAIMS_KEY = ["api_v1_namespaces_namespace_persistentvolumeclaims"];
const API_V1_NAMESPACES_NAMESPACE_PERSISTENTVOLUMECLAIMS_NAME_KEY = ["api_v1_namespaces_namespace_persistentvolumeclaims_name"];
const API_V1_NAMESPACES_NAMESPACE_PERSISTENTVOLUMECLAIMS_NAME_STATUS_KEY = ["api_v1_namespaces_namespace_persistentvolumeclaims_name_status"];
const API_V1_NAMESPACES_NAMESPACE_PODS_KEY = ["api_v1_namespaces_namespace_pods"];
const API_V1_NAMESPACES_NAMESPACE_PODS_NAME_KEY = ["api_v1_namespaces_namespace_pods_name"];
const API_V1_NAMESPACES_NAMESPACE_PODS_NAME_ATTACH_KEY = ["api_v1_namespaces_namespace_pods_name_attach"];
const API_V1_NAMESPACES_NAMESPACE_PODS_NAME_BINDING_KEY = ["api_v1_namespaces_namespace_pods_name_binding"];
const API_V1_NAMESPACES_NAMESPACE_PODS_NAME_EVICTION_KEY = ["api_v1_namespaces_namespace_pods_name_eviction"];
const API_V1_NAMESPACES_NAMESPACE_PODS_NAME_EXEC_KEY = ["api_v1_namespaces_namespace_pods_name_exec"];
const API_V1_NAMESPACES_NAMESPACE_PODS_NAME_LOG_KEY = ["api_v1_namespaces_namespace_pods_name_log"];
const API_V1_NAMESPACES_NAMESPACE_PODS_NAME_PORTFORWARD_KEY = ["api_v1_namespaces_namespace_pods_name_portforward"];
const API_V1_NAMESPACES_NAMESPACE_PODS_NAME_PROXY_KEY = ["api_v1_namespaces_namespace_pods_name_proxy"];
const API_V1_NAMESPACES_NAMESPACE_PODS_NAME_PROXY_PATH_KEY = ["api_v1_namespaces_namespace_pods_name_proxy_path"];
const API_V1_NAMESPACES_NAMESPACE_PODS_NAME_STATUS_KEY = ["api_v1_namespaces_namespace_pods_name_status"];
const API_V1_NAMESPACES_NAMESPACE_PODTEMPLATES_KEY = ["api_v1_namespaces_namespace_podtemplates"];
const API_V1_NAMESPACES_NAMESPACE_PODTEMPLATES_NAME_KEY = ["api_v1_namespaces_namespace_podtemplates_name"];
const API_V1_NAMESPACES_NAMESPACE_REPLICATIONCONTROLLERS_KEY = ["api_v1_namespaces_namespace_replicationcontrollers"];
const API_V1_NAMESPACES_NAMESPACE_REPLICATIONCONTROLLERS_NAME_KEY = ["api_v1_namespaces_namespace_replicationcontrollers_name"];
const API_V1_NAMESPACES_NAMESPACE_REPLICATIONCONTROLLERS_NAME_SCALE_KEY = ["api_v1_namespaces_namespace_replicationcontrollers_name_scale"];
const API_V1_NAMESPACES_NAMESPACE_REPLICATIONCONTROLLERS_NAME_STATUS_KEY = ["api_v1_namespaces_namespace_replicationcontrollers_name_status"];
const API_V1_NAMESPACES_NAMESPACE_RESOURCEQUOTAS_KEY = ["api_v1_namespaces_namespace_resourcequotas"];
const API_V1_NAMESPACES_NAMESPACE_RESOURCEQUOTAS_NAME_KEY = ["api_v1_namespaces_namespace_resourcequotas_name"];
const API_V1_NAMESPACES_NAMESPACE_RESOURCEQUOTAS_NAME_STATUS_KEY = ["api_v1_namespaces_namespace_resourcequotas_name_status"];
const API_V1_NAMESPACES_NAMESPACE_SECRETS_KEY = ["api_v1_namespaces_namespace_secrets"];
const API_V1_NAMESPACES_NAMESPACE_SECRETS_NAME_KEY = ["api_v1_namespaces_namespace_secrets_name"];
const API_V1_NAMESPACES_NAMESPACE_SERVICEACCOUNTS_KEY = ["api_v1_namespaces_namespace_serviceaccounts"];
const API_V1_NAMESPACES_NAMESPACE_SERVICEACCOUNTS_NAME_KEY = ["api_v1_namespaces_namespace_serviceaccounts_name"];
const API_V1_NAMESPACES_NAMESPACE_SERVICEACCOUNTS_NAME_TOKEN_KEY = ["api_v1_namespaces_namespace_serviceaccounts_name_token"];
const API_V1_NAMESPACES_NAMESPACE_SERVICES_KEY = ["api_v1_namespaces_namespace_services"];
const API_V1_NAMESPACES_NAMESPACE_SERVICES_NAME_KEY = ["api_v1_namespaces_namespace_services_name"];
const API_V1_NAMESPACES_NAMESPACE_SERVICES_NAME_PROXY_KEY = ["api_v1_namespaces_namespace_services_name_proxy"];
const API_V1_NAMESPACES_NAMESPACE_SERVICES_NAME_PROXY_PATH_KEY = ["api_v1_namespaces_namespace_services_name_proxy_path"];
const API_V1_NAMESPACES_NAMESPACE_SERVICES_NAME_STATUS_KEY = ["api_v1_namespaces_namespace_services_name_status"];
const API_V1_NAMESPACES_NAME_KEY = ["api_v1_namespaces_name"];
const API_V1_NAMESPACES_NAME_FINALIZE_KEY = ["api_v1_namespaces_name_finalize"];
const API_V1_NAMESPACES_NAME_STATUS_KEY = ["api_v1_namespaces_name_status"];
const API_V1_NODES_KEY = ["api_v1_nodes"];
const API_V1_NODES_NAME_KEY = ["api_v1_nodes_name"];
const API_V1_NODES_NAME_PROXY_KEY = ["api_v1_nodes_name_proxy"];
const API_V1_NODES_NAME_PROXY_PATH_KEY = ["api_v1_nodes_name_proxy_path"];
const API_V1_NODES_NAME_STATUS_KEY = ["api_v1_nodes_name_status"];
const API_V1_PERSISTENTVOLUMECLAIMS_KEY = ["api_v1_persistentvolumeclaims"];
const API_V1_PERSISTENTVOLUMES_KEY = ["api_v1_persistentvolumes"];
const API_V1_PERSISTENTVOLUMES_NAME_KEY = ["api_v1_persistentvolumes_name"];
const API_V1_PERSISTENTVOLUMES_NAME_STATUS_KEY = ["api_v1_persistentvolumes_name_status"];
const API_V1_PODS_KEY = ["api_v1_pods"];
const API_V1_PODTEMPLATES_KEY = ["api_v1_podtemplates"];
const API_V1_REPLICATIONCONTROLLERS_KEY = ["api_v1_replicationcontrollers"];
const API_V1_RESOURCEQUOTAS_KEY = ["api_v1_resourcequotas"];
const API_V1_SECRETS_KEY = ["api_v1_secrets"];
const API_V1_SERVICEACCOUNTS_KEY = ["api_v1_serviceaccounts"];
const API_V1_SERVICES_KEY = ["api_v1_services"];
const API_V1_WATCH_CONFIGMAPS_KEY = ["api_v1_watch_configmaps"];
const API_V1_WATCH_ENDPOINTS_KEY = ["api_v1_watch_endpoints"];
const API_V1_WATCH_EVENTS_KEY = ["api_v1_watch_events"];
const API_V1_WATCH_LIMITRANGES_KEY = ["api_v1_watch_limitranges"];
const API_V1_WATCH_NAMESPACES_KEY = ["api_v1_watch_namespaces"];
const API_V1_WATCH_NAMESPACES_NAMESPACE_CONFIGMAPS_KEY = ["api_v1_watch_namespaces_namespace_configmaps"];
const API_V1_WATCH_NAMESPACES_NAMESPACE_CONFIGMAPS_NAME_KEY = ["api_v1_watch_namespaces_namespace_configmaps_name"];
const API_V1_WATCH_NAMESPACES_NAMESPACE_ENDPOINTS_KEY = ["api_v1_watch_namespaces_namespace_endpoints"];
const API_V1_WATCH_NAMESPACES_NAMESPACE_ENDPOINTS_NAME_KEY = ["api_v1_watch_namespaces_namespace_endpoints_name"];
const API_V1_WATCH_NAMESPACES_NAMESPACE_EVENTS_KEY = ["api_v1_watch_namespaces_namespace_events"];
const API_V1_WATCH_NAMESPACES_NAMESPACE_EVENTS_NAME_KEY = ["api_v1_watch_namespaces_namespace_events_name"];
const API_V1_WATCH_NAMESPACES_NAMESPACE_LIMITRANGES_KEY = ["api_v1_watch_namespaces_namespace_limitranges"];
const API_V1_WATCH_NAMESPACES_NAMESPACE_LIMITRANGES_NAME_KEY = ["api_v1_watch_namespaces_namespace_limitranges_name"];
const API_V1_WATCH_NAMESPACES_NAMESPACE_PERSISTENTVOLUMECLAIMS_KEY = ["api_v1_watch_namespaces_namespace_persistentvolumeclaims"];
const API_V1_WATCH_NAMESPACES_NAMESPACE_PERSISTENTVOLUMECLAIMS_NAME_KEY = ["api_v1_watch_namespaces_namespace_persistentvolumeclaims_name"];
const API_V1_WATCH_NAMESPACES_NAMESPACE_PODS_KEY = ["api_v1_watch_namespaces_namespace_pods"];
const API_V1_WATCH_NAMESPACES_NAMESPACE_PODS_NAME_KEY = ["api_v1_watch_namespaces_namespace_pods_name"];
const API_V1_WATCH_NAMESPACES_NAMESPACE_PODTEMPLATES_KEY = ["api_v1_watch_namespaces_namespace_podtemplates"];
const API_V1_WATCH_NAMESPACES_NAMESPACE_PODTEMPLATES_NAME_KEY = ["api_v1_watch_namespaces_namespace_podtemplates_name"];
const API_V1_WATCH_NAMESPACES_NAMESPACE_REPLICATIONCONTROLLERS_KEY = ["api_v1_watch_namespaces_namespace_replicationcontrollers"];
const API_V1_WATCH_NAMESPACES_NAMESPACE_REPLICATIONCONTROLLERS_NAME_KEY = ["api_v1_watch_namespaces_namespace_replicationcontrollers_name"];
const API_V1_WATCH_NAMESPACES_NAMESPACE_RESOURCEQUOTAS_KEY = ["api_v1_watch_namespaces_namespace_resourcequotas"];
const API_V1_WATCH_NAMESPACES_NAMESPACE_RESOURCEQUOTAS_NAME_KEY = ["api_v1_watch_namespaces_namespace_resourcequotas_name"];
const API_V1_WATCH_NAMESPACES_NAMESPACE_SECRETS_KEY = ["api_v1_watch_namespaces_namespace_secrets"];
const API_V1_WATCH_NAMESPACES_NAMESPACE_SECRETS_NAME_KEY = ["api_v1_watch_namespaces_namespace_secrets_name"];
const API_V1_WATCH_NAMESPACES_NAMESPACE_SERVICEACCOUNTS_KEY = ["api_v1_watch_namespaces_namespace_serviceaccounts"];
const API_V1_WATCH_NAMESPACES_NAMESPACE_SERVICEACCOUNTS_NAME_KEY = ["api_v1_watch_namespaces_namespace_serviceaccounts_name"];
const API_V1_WATCH_NAMESPACES_NAMESPACE_SERVICES_KEY = ["api_v1_watch_namespaces_namespace_services"];
const API_V1_WATCH_NAMESPACES_NAMESPACE_SERVICES_NAME_KEY = ["api_v1_watch_namespaces_namespace_services_name"];
const API_V1_WATCH_NAMESPACES_NAME_KEY = ["api_v1_watch_namespaces_name"];
const API_V1_WATCH_NODES_KEY = ["api_v1_watch_nodes"];
const API_V1_WATCH_NODES_NAME_KEY = ["api_v1_watch_nodes_name"];
const API_V1_WATCH_PERSISTENTVOLUMECLAIMS_KEY = ["api_v1_watch_persistentvolumeclaims"];
const API_V1_WATCH_PERSISTENTVOLUMES_KEY = ["api_v1_watch_persistentvolumes"];
const API_V1_WATCH_PERSISTENTVOLUMES_NAME_KEY = ["api_v1_watch_persistentvolumes_name"];
const API_V1_WATCH_PODS_KEY = ["api_v1_watch_pods"];
const API_V1_WATCH_PODTEMPLATES_KEY = ["api_v1_watch_podtemplates"];
const API_V1_WATCH_REPLICATIONCONTROLLERS_KEY = ["api_v1_watch_replicationcontrollers"];
const API_V1_WATCH_RESOURCEQUOTAS_KEY = ["api_v1_watch_resourcequotas"];
const API_V1_WATCH_SECRETS_KEY = ["api_v1_watch_secrets"];
const API_V1_WATCH_SERVICEACCOUNTS_KEY = ["api_v1_watch_serviceaccounts"];
const API_V1_WATCH_SERVICES_KEY = ["api_v1_watch_services"];
const APIS_KEY = ["apis"];
const APIS_ADMISSIONREGISTRATION_K8S_IO_KEY = ["apis_admissionregistration_k8s_io"];
const APIS_ADMISSIONREGISTRATION_K8S_IO_V1_KEY = ["apis_admissionregistration_k8s_io_v1"];
const APIS_ADMISSIONREGISTRATION_K8S_IO_V1_MUTATINGWEBHOOKCONFIGURATIONS_KEY = ["apis_admissionregistration_k8s_io_v1_mutatingwebhookconfigurations"];
const APIS_ADMISSIONREGISTRATION_K8S_IO_V1_MUTATINGWEBHOOKCONFIGURATIONS_NAME_KEY = ["apis_admissionregistration_k8s_io_v1_mutatingwebhookconfigurations_name"];
const APIS_ADMISSIONREGISTRATION_K8S_IO_V1_VALIDATINGWEBHOOKCONFIGURATIONS_KEY = ["apis_admissionregistration_k8s_io_v1_validatingwebhookconfigurations"];
const APIS_ADMISSIONREGISTRATION_K8S_IO_V1_VALIDATINGWEBHOOKCONFIGURATIONS_NAME_KEY = ["apis_admissionregistration_k8s_io_v1_validatingwebhookconfigurations_name"];
const APIS_ADMISSIONREGISTRATION_K8S_IO_V1_WATCH_MUTATINGWEBHOOKCONFIGURATIONS_KEY = ["apis_admissionregistration_k8s_io_v1_watch_mutatingwebhookconfigurations"];
const APIS_ADMISSIONREGISTRATION_K8S_IO_V1_WATCH_MUTATINGWEBHOOKCONFIGURATIONS_NAME_KEY = ["apis_admissionregistration_k8s_io_v1_watch_mutatingwebhookconfigurations_name"];
const APIS_ADMISSIONREGISTRATION_K8S_IO_V1_WATCH_VALIDATINGWEBHOOKCONFIGURATIONS_KEY = ["apis_admissionregistration_k8s_io_v1_watch_validatingwebhookconfigurations"];
const APIS_ADMISSIONREGISTRATION_K8S_IO_V1_WATCH_VALIDATINGWEBHOOKCONFIGURATIONS_NAME_KEY = ["apis_admissionregistration_k8s_io_v1_watch_validatingwebhookconfigurations_name"];
const APIS_APIEXTENSIONS_K8S_IO_KEY = ["apis_apiextensions_k8s_io"];
const APIS_APIEXTENSIONS_K8S_IO_V1_KEY = ["apis_apiextensions_k8s_io_v1"];
const APIS_APIEXTENSIONS_K8S_IO_V1_CUSTOMRESOURCEDEFINITIONS_KEY = ["apis_apiextensions_k8s_io_v1_customresourcedefinitions"];
const APIS_APIEXTENSIONS_K8S_IO_V1_CUSTOMRESOURCEDEFINITIONS_NAME_KEY = ["apis_apiextensions_k8s_io_v1_customresourcedefinitions_name"];
const APIS_APIEXTENSIONS_K8S_IO_V1_CUSTOMRESOURCEDEFINITIONS_NAME_STATUS_KEY = ["apis_apiextensions_k8s_io_v1_customresourcedefinitions_name_status"];
const APIS_APIEXTENSIONS_K8S_IO_V1_WATCH_CUSTOMRESOURCEDEFINITIONS_KEY = ["apis_apiextensions_k8s_io_v1_watch_customresourcedefinitions"];
const APIS_APIEXTENSIONS_K8S_IO_V1_WATCH_CUSTOMRESOURCEDEFINITIONS_NAME_KEY = ["apis_apiextensions_k8s_io_v1_watch_customresourcedefinitions_name"];
const APIS_APIREGISTRATION_K8S_IO_KEY = ["apis_apiregistration_k8s_io"];
const APIS_APIREGISTRATION_K8S_IO_V1_KEY = ["apis_apiregistration_k8s_io_v1"];
const APIS_APIREGISTRATION_K8S_IO_V1_APISERVICES_KEY = ["apis_apiregistration_k8s_io_v1_apiservices"];
const APIS_APIREGISTRATION_K8S_IO_V1_APISERVICES_NAME_KEY = ["apis_apiregistration_k8s_io_v1_apiservices_name"];
const APIS_APIREGISTRATION_K8S_IO_V1_APISERVICES_NAME_STATUS_KEY = ["apis_apiregistration_k8s_io_v1_apiservices_name_status"];
const APIS_APIREGISTRATION_K8S_IO_V1_WATCH_APISERVICES_KEY = ["apis_apiregistration_k8s_io_v1_watch_apiservices"];
const APIS_APIREGISTRATION_K8S_IO_V1_WATCH_APISERVICES_NAME_KEY = ["apis_apiregistration_k8s_io_v1_watch_apiservices_name"];
const APIS_APPS_KEY = ["apis_apps"];
const APIS_APPS_V1_KEY = ["apis_apps_v1"];
const APIS_APPS_V1_CONTROLLERREVISIONS_KEY = ["apis_apps_v1_controllerrevisions"];
const APIS_APPS_V1_DAEMONSETS_KEY = ["apis_apps_v1_daemonsets"];
const APIS_APPS_V1_DEPLOYMENTS_KEY = ["apis_apps_v1_deployments"];
const APIS_APPS_V1_NAMESPACES_NAMESPACE_CONTROLLERREVISIONS_KEY = ["apis_apps_v1_namespaces_namespace_controllerrevisions"];
const APIS_APPS_V1_NAMESPACES_NAMESPACE_CONTROLLERREVISIONS_NAME_KEY = ["apis_apps_v1_namespaces_namespace_controllerrevisions_name"];
const APIS_APPS_V1_NAMESPACES_NAMESPACE_DAEMONSETS_KEY = ["apis_apps_v1_namespaces_namespace_daemonsets"];
const APIS_APPS_V1_NAMESPACES_NAMESPACE_DAEMONSETS_NAME_KEY = ["apis_apps_v1_namespaces_namespace_daemonsets_name"];
const APIS_APPS_V1_NAMESPACES_NAMESPACE_DAEMONSETS_NAME_STATUS_KEY = ["apis_apps_v1_namespaces_namespace_daemonsets_name_status"];
const APIS_APPS_V1_NAMESPACES_NAMESPACE_DEPLOYMENTS_KEY = ["apis_apps_v1_namespaces_namespace_deployments"];
const APIS_APPS_V1_NAMESPACES_NAMESPACE_DEPLOYMENTS_NAME_KEY = ["apis_apps_v1_namespaces_namespace_deployments_name"];
const APIS_APPS_V1_NAMESPACES_NAMESPACE_DEPLOYMENTS_NAME_SCALE_KEY = ["apis_apps_v1_namespaces_namespace_deployments_name_scale"];
const APIS_APPS_V1_NAMESPACES_NAMESPACE_DEPLOYMENTS_NAME_STATUS_KEY = ["apis_apps_v1_namespaces_namespace_deployments_name_status"];
const APIS_APPS_V1_NAMESPACES_NAMESPACE_REPLICASETS_KEY = ["apis_apps_v1_namespaces_namespace_replicasets"];
const APIS_APPS_V1_NAMESPACES_NAMESPACE_REPLICASETS_NAME_KEY = ["apis_apps_v1_namespaces_namespace_replicasets_name"];
const APIS_APPS_V1_NAMESPACES_NAMESPACE_REPLICASETS_NAME_SCALE_KEY = ["apis_apps_v1_namespaces_namespace_replicasets_name_scale"];
const APIS_APPS_V1_NAMESPACES_NAMESPACE_REPLICASETS_NAME_STATUS_KEY = ["apis_apps_v1_namespaces_namespace_replicasets_name_status"];
const APIS_APPS_V1_NAMESPACES_NAMESPACE_STATEFULSETS_KEY = ["apis_apps_v1_namespaces_namespace_statefulsets"];
const APIS_APPS_V1_NAMESPACES_NAMESPACE_STATEFULSETS_NAME_KEY = ["apis_apps_v1_namespaces_namespace_statefulsets_name"];
const APIS_APPS_V1_NAMESPACES_NAMESPACE_STATEFULSETS_NAME_SCALE_KEY = ["apis_apps_v1_namespaces_namespace_statefulsets_name_scale"];
const APIS_APPS_V1_NAMESPACES_NAMESPACE_STATEFULSETS_NAME_STATUS_KEY = ["apis_apps_v1_namespaces_namespace_statefulsets_name_status"];
const APIS_APPS_V1_REPLICASETS_KEY = ["apis_apps_v1_replicasets"];
const APIS_APPS_V1_STATEFULSETS_KEY = ["apis_apps_v1_statefulsets"];
const APIS_APPS_V1_WATCH_CONTROLLERREVISIONS_KEY = ["apis_apps_v1_watch_controllerrevisions"];
const APIS_APPS_V1_WATCH_DAEMONSETS_KEY = ["apis_apps_v1_watch_daemonsets"];
const APIS_APPS_V1_WATCH_DEPLOYMENTS_KEY = ["apis_apps_v1_watch_deployments"];
const APIS_APPS_V1_WATCH_NAMESPACES_NAMESPACE_CONTROLLERREVISIONS_KEY = ["apis_apps_v1_watch_namespaces_namespace_controllerrevisions"];
const APIS_APPS_V1_WATCH_NAMESPACES_NAMESPACE_CONTROLLERREVISIONS_NAME_KEY = ["apis_apps_v1_watch_namespaces_namespace_controllerrevisions_name"];
const APIS_APPS_V1_WATCH_NAMESPACES_NAMESPACE_DAEMONSETS_KEY = ["apis_apps_v1_watch_namespaces_namespace_daemonsets"];
const APIS_APPS_V1_WATCH_NAMESPACES_NAMESPACE_DAEMONSETS_NAME_KEY = ["apis_apps_v1_watch_namespaces_namespace_daemonsets_name"];
const APIS_APPS_V1_WATCH_NAMESPACES_NAMESPACE_DEPLOYMENTS_KEY = ["apis_apps_v1_watch_namespaces_namespace_deployments"];
const APIS_APPS_V1_WATCH_NAMESPACES_NAMESPACE_DEPLOYMENTS_NAME_KEY = ["apis_apps_v1_watch_namespaces_namespace_deployments_name"];
const APIS_APPS_V1_WATCH_NAMESPACES_NAMESPACE_REPLICASETS_KEY = ["apis_apps_v1_watch_namespaces_namespace_replicasets"];
const APIS_APPS_V1_WATCH_NAMESPACES_NAMESPACE_REPLICASETS_NAME_KEY = ["apis_apps_v1_watch_namespaces_namespace_replicasets_name"];
const APIS_APPS_V1_WATCH_NAMESPACES_NAMESPACE_STATEFULSETS_KEY = ["apis_apps_v1_watch_namespaces_namespace_statefulsets"];
const APIS_APPS_V1_WATCH_NAMESPACES_NAMESPACE_STATEFULSETS_NAME_KEY = ["apis_apps_v1_watch_namespaces_namespace_statefulsets_name"];
const APIS_APPS_V1_WATCH_REPLICASETS_KEY = ["apis_apps_v1_watch_replicasets"];
const APIS_APPS_V1_WATCH_STATEFULSETS_KEY = ["apis_apps_v1_watch_statefulsets"];
const APIS_AUTHENTICATION_K8S_IO_KEY = ["apis_authentication_k8s_io"];
const APIS_AUTHENTICATION_K8S_IO_V1_KEY = ["apis_authentication_k8s_io_v1"];
const APIS_AUTHENTICATION_K8S_IO_V1_TOKENREVIEWS_KEY = ["apis_authentication_k8s_io_v1_tokenreviews"];
const APIS_AUTHORIZATION_K8S_IO_KEY = ["apis_authorization_k8s_io"];
const APIS_AUTHORIZATION_K8S_IO_V1_KEY = ["apis_authorization_k8s_io_v1"];
const APIS_AUTHORIZATION_K8S_IO_V1_NAMESPACES_NAMESPACE_LOCALSUBJECTACCESSREVIEWS_KEY = ["apis_authorization_k8s_io_v1_namespaces_namespace_localsubjectaccessreviews"];
const APIS_AUTHORIZATION_K8S_IO_V1_SELFSUBJECTACCESSREVIEWS_KEY = ["apis_authorization_k8s_io_v1_selfsubjectaccessreviews"];
const APIS_AUTHORIZATION_K8S_IO_V1_SELFSUBJECTRULESREVIEWS_KEY = ["apis_authorization_k8s_io_v1_selfsubjectrulesreviews"];
const APIS_AUTHORIZATION_K8S_IO_V1_SUBJECTACCESSREVIEWS_KEY = ["apis_authorization_k8s_io_v1_subjectaccessreviews"];
const APIS_AUTOSCALING_KEY = ["apis_autoscaling"];
const APIS_AUTOSCALING_V1_KEY = ["apis_autoscaling_v1"];
const APIS_AUTOSCALING_V1_HORIZONTALPODAUTOSCALERS_KEY = ["apis_autoscaling_v1_horizontalpodautoscalers"];
const APIS_AUTOSCALING_V1_NAMESPACES_NAMESPACE_HORIZONTALPODAUTOSCALERS_KEY = ["apis_autoscaling_v1_namespaces_namespace_horizontalpodautoscalers"];
const APIS_AUTOSCALING_V1_NAMESPACES_NAMESPACE_HORIZONTALPODAUTOSCALERS_NAME_KEY = ["apis_autoscaling_v1_namespaces_namespace_horizontalpodautoscalers_name"];
const APIS_AUTOSCALING_V1_NAMESPACES_NAMESPACE_HORIZONTALPODAUTOSCALERS_NAME_STATUS_KEY = ["apis_autoscaling_v1_namespaces_namespace_horizontalpodautoscalers_name_status"];
const APIS_AUTOSCALING_V1_WATCH_HORIZONTALPODAUTOSCALERS_KEY = ["apis_autoscaling_v1_watch_horizontalpodautoscalers"];
const APIS_AUTOSCALING_V1_WATCH_NAMESPACES_NAMESPACE_HORIZONTALPODAUTOSCALERS_KEY = ["apis_autoscaling_v1_watch_namespaces_namespace_horizontalpodautoscalers"];
const APIS_AUTOSCALING_V1_WATCH_NAMESPACES_NAMESPACE_HORIZONTALPODAUTOSCALERS_NAME_KEY = ["apis_autoscaling_v1_watch_namespaces_namespace_horizontalpodautoscalers_name"];
const APIS_AUTOSCALING_V2BETA1_KEY = ["apis_autoscaling_v2beta1"];
const APIS_AUTOSCALING_V2BETA1_HORIZONTALPODAUTOSCALERS_KEY = ["apis_autoscaling_v2beta1_horizontalpodautoscalers"];
const APIS_AUTOSCALING_V2BETA1_NAMESPACES_NAMESPACE_HORIZONTALPODAUTOSCALERS_KEY = ["apis_autoscaling_v2beta1_namespaces_namespace_horizontalpodautoscalers"];
const APIS_AUTOSCALING_V2BETA1_NAMESPACES_NAMESPACE_HORIZONTALPODAUTOSCALERS_NAME_KEY = ["apis_autoscaling_v2beta1_namespaces_namespace_horizontalpodautoscalers_name"];
const APIS_AUTOSCALING_V2BETA1_NAMESPACES_NAMESPACE_HORIZONTALPODAUTOSCALERS_NAME_STATUS_KEY = ["apis_autoscaling_v2beta1_namespaces_namespace_horizontalpodautoscalers_name_status"];
const APIS_AUTOSCALING_V2BETA1_WATCH_HORIZONTALPODAUTOSCALERS_KEY = ["apis_autoscaling_v2beta1_watch_horizontalpodautoscalers"];
const APIS_AUTOSCALING_V2BETA1_WATCH_NAMESPACES_NAMESPACE_HORIZONTALPODAUTOSCALERS_KEY = ["apis_autoscaling_v2beta1_watch_namespaces_namespace_horizontalpodautoscalers"];
const APIS_AUTOSCALING_V2BETA1_WATCH_NAMESPACES_NAMESPACE_HORIZONTALPODAUTOSCALERS_NAME_KEY = ["apis_autoscaling_v2beta1_watch_namespaces_namespace_horizontalpodautoscalers_name"];
const APIS_AUTOSCALING_V2BETA2_KEY = ["apis_autoscaling_v2beta2"];
const APIS_AUTOSCALING_V2BETA2_HORIZONTALPODAUTOSCALERS_KEY = ["apis_autoscaling_v2beta2_horizontalpodautoscalers"];
const APIS_AUTOSCALING_V2BETA2_NAMESPACES_NAMESPACE_HORIZONTALPODAUTOSCALERS_KEY = ["apis_autoscaling_v2beta2_namespaces_namespace_horizontalpodautoscalers"];
const APIS_AUTOSCALING_V2BETA2_NAMESPACES_NAMESPACE_HORIZONTALPODAUTOSCALERS_NAME_KEY = ["apis_autoscaling_v2beta2_namespaces_namespace_horizontalpodautoscalers_name"];
const APIS_AUTOSCALING_V2BETA2_NAMESPACES_NAMESPACE_HORIZONTALPODAUTOSCALERS_NAME_STATUS_KEY = ["apis_autoscaling_v2beta2_namespaces_namespace_horizontalpodautoscalers_name_status"];
const APIS_AUTOSCALING_V2BETA2_WATCH_HORIZONTALPODAUTOSCALERS_KEY = ["apis_autoscaling_v2beta2_watch_horizontalpodautoscalers"];
const APIS_AUTOSCALING_V2BETA2_WATCH_NAMESPACES_NAMESPACE_HORIZONTALPODAUTOSCALERS_KEY = ["apis_autoscaling_v2beta2_watch_namespaces_namespace_horizontalpodautoscalers"];
const APIS_AUTOSCALING_V2BETA2_WATCH_NAMESPACES_NAMESPACE_HORIZONTALPODAUTOSCALERS_NAME_KEY = ["apis_autoscaling_v2beta2_watch_namespaces_namespace_horizontalpodautoscalers_name"];
const APIS_BATCH_KEY = ["apis_batch"];
const APIS_BATCH_V1_KEY = ["apis_batch_v1"];
const APIS_BATCH_V1_CRONJOBS_KEY = ["apis_batch_v1_cronjobs"];
const APIS_BATCH_V1_JOBS_KEY = ["apis_batch_v1_jobs"];
const APIS_BATCH_V1_NAMESPACES_NAMESPACE_CRONJOBS_KEY = ["apis_batch_v1_namespaces_namespace_cronjobs"];
const APIS_BATCH_V1_NAMESPACES_NAMESPACE_CRONJOBS_NAME_KEY = ["apis_batch_v1_namespaces_namespace_cronjobs_name"];
const APIS_BATCH_V1_NAMESPACES_NAMESPACE_CRONJOBS_NAME_STATUS_KEY = ["apis_batch_v1_namespaces_namespace_cronjobs_name_status"];
const APIS_BATCH_V1_NAMESPACES_NAMESPACE_JOBS_KEY = ["apis_batch_v1_namespaces_namespace_jobs"];
const APIS_BATCH_V1_NAMESPACES_NAMESPACE_JOBS_NAME_KEY = ["apis_batch_v1_namespaces_namespace_jobs_name"];
const APIS_BATCH_V1_NAMESPACES_NAMESPACE_JOBS_NAME_STATUS_KEY = ["apis_batch_v1_namespaces_namespace_jobs_name_status"];
const APIS_BATCH_V1_WATCH_CRONJOBS_KEY = ["apis_batch_v1_watch_cronjobs"];
const APIS_BATCH_V1_WATCH_JOBS_KEY = ["apis_batch_v1_watch_jobs"];
const APIS_BATCH_V1_WATCH_NAMESPACES_NAMESPACE_CRONJOBS_KEY = ["apis_batch_v1_watch_namespaces_namespace_cronjobs"];
const APIS_BATCH_V1_WATCH_NAMESPACES_NAMESPACE_CRONJOBS_NAME_KEY = ["apis_batch_v1_watch_namespaces_namespace_cronjobs_name"];
const APIS_BATCH_V1_WATCH_NAMESPACES_NAMESPACE_JOBS_KEY = ["apis_batch_v1_watch_namespaces_namespace_jobs"];
const APIS_BATCH_V1_WATCH_NAMESPACES_NAMESPACE_JOBS_NAME_KEY = ["apis_batch_v1_watch_namespaces_namespace_jobs_name"];
const APIS_BATCH_V1BETA1_KEY = ["apis_batch_v1beta1"];
const APIS_BATCH_V1BETA1_CRONJOBS_KEY = ["apis_batch_v1beta1_cronjobs"];
const APIS_BATCH_V1BETA1_NAMESPACES_NAMESPACE_CRONJOBS_KEY = ["apis_batch_v1beta1_namespaces_namespace_cronjobs"];
const APIS_BATCH_V1BETA1_NAMESPACES_NAMESPACE_CRONJOBS_NAME_KEY = ["apis_batch_v1beta1_namespaces_namespace_cronjobs_name"];
const APIS_BATCH_V1BETA1_NAMESPACES_NAMESPACE_CRONJOBS_NAME_STATUS_KEY = ["apis_batch_v1beta1_namespaces_namespace_cronjobs_name_status"];
const APIS_BATCH_V1BETA1_WATCH_CRONJOBS_KEY = ["apis_batch_v1beta1_watch_cronjobs"];
const APIS_BATCH_V1BETA1_WATCH_NAMESPACES_NAMESPACE_CRONJOBS_KEY = ["apis_batch_v1beta1_watch_namespaces_namespace_cronjobs"];
const APIS_BATCH_V1BETA1_WATCH_NAMESPACES_NAMESPACE_CRONJOBS_NAME_KEY = ["apis_batch_v1beta1_watch_namespaces_namespace_cronjobs_name"];
const APIS_CERTIFICATES_K8S_IO_KEY = ["apis_certificates_k8s_io"];
const APIS_CERTIFICATES_K8S_IO_V1_KEY = ["apis_certificates_k8s_io_v1"];
const APIS_CERTIFICATES_K8S_IO_V1_CERTIFICATESIGNINGREQUESTS_KEY = ["apis_certificates_k8s_io_v1_certificatesigningrequests"];
const APIS_CERTIFICATES_K8S_IO_V1_CERTIFICATESIGNINGREQUESTS_NAME_KEY = ["apis_certificates_k8s_io_v1_certificatesigningrequests_name"];
const APIS_CERTIFICATES_K8S_IO_V1_CERTIFICATESIGNINGREQUESTS_NAME_APPROVAL_KEY = ["apis_certificates_k8s_io_v1_certificatesigningrequests_name_approval"];
const APIS_CERTIFICATES_K8S_IO_V1_CERTIFICATESIGNINGREQUESTS_NAME_STATUS_KEY = ["apis_certificates_k8s_io_v1_certificatesigningrequests_name_status"];
const APIS_CERTIFICATES_K8S_IO_V1_WATCH_CERTIFICATESIGNINGREQUESTS_KEY = ["apis_certificates_k8s_io_v1_watch_certificatesigningrequests"];
const APIS_CERTIFICATES_K8S_IO_V1_WATCH_CERTIFICATESIGNINGREQUESTS_NAME_KEY = ["apis_certificates_k8s_io_v1_watch_certificatesigningrequests_name"];
const APIS_COORDINATION_K8S_IO_KEY = ["apis_coordination_k8s_io"];
const APIS_COORDINATION_K8S_IO_V1_KEY = ["apis_coordination_k8s_io_v1"];
const APIS_COORDINATION_K8S_IO_V1_LEASES_KEY = ["apis_coordination_k8s_io_v1_leases"];
const APIS_COORDINATION_K8S_IO_V1_NAMESPACES_NAMESPACE_LEASES_KEY = ["apis_coordination_k8s_io_v1_namespaces_namespace_leases"];
const APIS_COORDINATION_K8S_IO_V1_NAMESPACES_NAMESPACE_LEASES_NAME_KEY = ["apis_coordination_k8s_io_v1_namespaces_namespace_leases_name"];
const APIS_COORDINATION_K8S_IO_V1_WATCH_LEASES_KEY = ["apis_coordination_k8s_io_v1_watch_leases"];
const APIS_COORDINATION_K8S_IO_V1_WATCH_NAMESPACES_NAMESPACE_LEASES_KEY = ["apis_coordination_k8s_io_v1_watch_namespaces_namespace_leases"];
const APIS_COORDINATION_K8S_IO_V1_WATCH_NAMESPACES_NAMESPACE_LEASES_NAME_KEY = ["apis_coordination_k8s_io_v1_watch_namespaces_namespace_leases_name"];
const APIS_DISCOVERY_K8S_IO_KEY = ["apis_discovery_k8s_io"];
const APIS_DISCOVERY_K8S_IO_V1_KEY = ["apis_discovery_k8s_io_v1"];
const APIS_DISCOVERY_K8S_IO_V1_ENDPOINTSLICES_KEY = ["apis_discovery_k8s_io_v1_endpointslices"];
const APIS_DISCOVERY_K8S_IO_V1_NAMESPACES_NAMESPACE_ENDPOINTSLICES_KEY = ["apis_discovery_k8s_io_v1_namespaces_namespace_endpointslices"];
const APIS_DISCOVERY_K8S_IO_V1_NAMESPACES_NAMESPACE_ENDPOINTSLICES_NAME_KEY = ["apis_discovery_k8s_io_v1_namespaces_namespace_endpointslices_name"];
const APIS_DISCOVERY_K8S_IO_V1_WATCH_ENDPOINTSLICES_KEY = ["apis_discovery_k8s_io_v1_watch_endpointslices"];
const APIS_DISCOVERY_K8S_IO_V1_WATCH_NAMESPACES_NAMESPACE_ENDPOINTSLICES_KEY = ["apis_discovery_k8s_io_v1_watch_namespaces_namespace_endpointslices"];
const APIS_DISCOVERY_K8S_IO_V1_WATCH_NAMESPACES_NAMESPACE_ENDPOINTSLICES_NAME_KEY = ["apis_discovery_k8s_io_v1_watch_namespaces_namespace_endpointslices_name"];
const APIS_DISCOVERY_K8S_IO_V1BETA1_KEY = ["apis_discovery_k8s_io_v1beta1"];
const APIS_DISCOVERY_K8S_IO_V1BETA1_ENDPOINTSLICES_KEY = ["apis_discovery_k8s_io_v1beta1_endpointslices"];
const APIS_DISCOVERY_K8S_IO_V1BETA1_NAMESPACES_NAMESPACE_ENDPOINTSLICES_KEY = ["apis_discovery_k8s_io_v1beta1_namespaces_namespace_endpointslices"];
const APIS_DISCOVERY_K8S_IO_V1BETA1_NAMESPACES_NAMESPACE_ENDPOINTSLICES_NAME_KEY = ["apis_discovery_k8s_io_v1beta1_namespaces_namespace_endpointslices_name"];
const APIS_DISCOVERY_K8S_IO_V1BETA1_WATCH_ENDPOINTSLICES_KEY = ["apis_discovery_k8s_io_v1beta1_watch_endpointslices"];
const APIS_DISCOVERY_K8S_IO_V1BETA1_WATCH_NAMESPACES_NAMESPACE_ENDPOINTSLICES_KEY = ["apis_discovery_k8s_io_v1beta1_watch_namespaces_namespace_endpointslices"];
const APIS_DISCOVERY_K8S_IO_V1BETA1_WATCH_NAMESPACES_NAMESPACE_ENDPOINTSLICES_NAME_KEY = ["apis_discovery_k8s_io_v1beta1_watch_namespaces_namespace_endpointslices_name"];
const APIS_EVENTS_K8S_IO_KEY = ["apis_events_k8s_io"];
const APIS_EVENTS_K8S_IO_V1_KEY = ["apis_events_k8s_io_v1"];
const APIS_EVENTS_K8S_IO_V1_EVENTS_KEY = ["apis_events_k8s_io_v1_events"];
const APIS_EVENTS_K8S_IO_V1_NAMESPACES_NAMESPACE_EVENTS_KEY = ["apis_events_k8s_io_v1_namespaces_namespace_events"];
const APIS_EVENTS_K8S_IO_V1_NAMESPACES_NAMESPACE_EVENTS_NAME_KEY = ["apis_events_k8s_io_v1_namespaces_namespace_events_name"];
const APIS_EVENTS_K8S_IO_V1_WATCH_EVENTS_KEY = ["apis_events_k8s_io_v1_watch_events"];
const APIS_EVENTS_K8S_IO_V1_WATCH_NAMESPACES_NAMESPACE_EVENTS_KEY = ["apis_events_k8s_io_v1_watch_namespaces_namespace_events"];
const APIS_EVENTS_K8S_IO_V1_WATCH_NAMESPACES_NAMESPACE_EVENTS_NAME_KEY = ["apis_events_k8s_io_v1_watch_namespaces_namespace_events_name"];
const APIS_EVENTS_K8S_IO_V1BETA1_KEY = ["apis_events_k8s_io_v1beta1"];
const APIS_EVENTS_K8S_IO_V1BETA1_EVENTS_KEY = ["apis_events_k8s_io_v1beta1_events"];
const APIS_EVENTS_K8S_IO_V1BETA1_NAMESPACES_NAMESPACE_EVENTS_KEY = ["apis_events_k8s_io_v1beta1_namespaces_namespace_events"];
const APIS_EVENTS_K8S_IO_V1BETA1_NAMESPACES_NAMESPACE_EVENTS_NAME_KEY = ["apis_events_k8s_io_v1beta1_namespaces_namespace_events_name"];
const APIS_EVENTS_K8S_IO_V1BETA1_WATCH_EVENTS_KEY = ["apis_events_k8s_io_v1beta1_watch_events"];
const APIS_EVENTS_K8S_IO_V1BETA1_WATCH_NAMESPACES_NAMESPACE_EVENTS_KEY = ["apis_events_k8s_io_v1beta1_watch_namespaces_namespace_events"];
const APIS_EVENTS_K8S_IO_V1BETA1_WATCH_NAMESPACES_NAMESPACE_EVENTS_NAME_KEY = ["apis_events_k8s_io_v1beta1_watch_namespaces_namespace_events_name"];
const APIS_FLOWCONTROL_APISERVER_K8S_IO_KEY = ["apis_flowcontrol_apiserver_k8s_io"];
const APIS_FLOWCONTROL_APISERVER_K8S_IO_V1BETA1_KEY = ["apis_flowcontrol_apiserver_k8s_io_v1beta1"];
const APIS_FLOWCONTROL_APISERVER_K8S_IO_V1BETA1_FLOWSCHEMAS_KEY = ["apis_flowcontrol_apiserver_k8s_io_v1beta1_flowschemas"];
const APIS_FLOWCONTROL_APISERVER_K8S_IO_V1BETA1_FLOWSCHEMAS_NAME_KEY = ["apis_flowcontrol_apiserver_k8s_io_v1beta1_flowschemas_name"];
const APIS_FLOWCONTROL_APISERVER_K8S_IO_V1BETA1_FLOWSCHEMAS_NAME_STATUS_KEY = ["apis_flowcontrol_apiserver_k8s_io_v1beta1_flowschemas_name_status"];
const APIS_FLOWCONTROL_APISERVER_K8S_IO_V1BETA1_PRIORITYLEVELCONFIGURATIONS_KEY = ["apis_flowcontrol_apiserver_k8s_io_v1beta1_prioritylevelconfigurations"];
const APIS_FLOWCONTROL_APISERVER_K8S_IO_V1BETA1_PRIORITYLEVELCONFIGURATIONS_NAME_KEY = ["apis_flowcontrol_apiserver_k8s_io_v1beta1_prioritylevelconfigurations_name"];
const APIS_FLOWCONTROL_APISERVER_K8S_IO_V1BETA1_PRIORITYLEVELCONFIGURATIONS_NAME_STATUS_KEY = ["apis_flowcontrol_apiserver_k8s_io_v1beta1_prioritylevelconfigurations_name_status"];
const APIS_FLOWCONTROL_APISERVER_K8S_IO_V1BETA1_WATCH_FLOWSCHEMAS_KEY = ["apis_flowcontrol_apiserver_k8s_io_v1beta1_watch_flowschemas"];
const APIS_FLOWCONTROL_APISERVER_K8S_IO_V1BETA1_WATCH_FLOWSCHEMAS_NAME_KEY = ["apis_flowcontrol_apiserver_k8s_io_v1beta1_watch_flowschemas_name"];
const APIS_FLOWCONTROL_APISERVER_K8S_IO_V1BETA1_WATCH_PRIORITYLEVELCONFIGURATIONS_KEY = ["apis_flowcontrol_apiserver_k8s_io_v1beta1_watch_prioritylevelconfigurations"];
const APIS_FLOWCONTROL_APISERVER_K8S_IO_V1BETA1_WATCH_PRIORITYLEVELCONFIGURATIONS_NAME_KEY = ["apis_flowcontrol_apiserver_k8s_io_v1beta1_watch_prioritylevelconfigurations_name"];
const APIS_NETWORKING_K8S_IO_KEY = ["apis_networking_k8s_io"];
const APIS_NETWORKING_K8S_IO_V1_KEY = ["apis_networking_k8s_io_v1"];
const APIS_NETWORKING_K8S_IO_V1_INGRESSCLASSES_KEY = ["apis_networking_k8s_io_v1_ingressclasses"];
const APIS_NETWORKING_K8S_IO_V1_INGRESSCLASSES_NAME_KEY = ["apis_networking_k8s_io_v1_ingressclasses_name"];
const APIS_NETWORKING_K8S_IO_V1_INGRESSES_KEY = ["apis_networking_k8s_io_v1_ingresses"];
const APIS_NETWORKING_K8S_IO_V1_NAMESPACES_NAMESPACE_INGRESSES_KEY = ["apis_networking_k8s_io_v1_namespaces_namespace_ingresses"];
const APIS_NETWORKING_K8S_IO_V1_NAMESPACES_NAMESPACE_INGRESSES_NAME_KEY = ["apis_networking_k8s_io_v1_namespaces_namespace_ingresses_name"];
const APIS_NETWORKING_K8S_IO_V1_NAMESPACES_NAMESPACE_INGRESSES_NAME_STATUS_KEY = ["apis_networking_k8s_io_v1_namespaces_namespace_ingresses_name_status"];
const APIS_NETWORKING_K8S_IO_V1_NAMESPACES_NAMESPACE_NETWORKPOLICIES_KEY = ["apis_networking_k8s_io_v1_namespaces_namespace_networkpolicies"];
const APIS_NETWORKING_K8S_IO_V1_NAMESPACES_NAMESPACE_NETWORKPOLICIES_NAME_KEY = ["apis_networking_k8s_io_v1_namespaces_namespace_networkpolicies_name"];
const APIS_NETWORKING_K8S_IO_V1_NETWORKPOLICIES_KEY = ["apis_networking_k8s_io_v1_networkpolicies"];
const APIS_NETWORKING_K8S_IO_V1_WATCH_INGRESSCLASSES_KEY = ["apis_networking_k8s_io_v1_watch_ingressclasses"];
const APIS_NETWORKING_K8S_IO_V1_WATCH_INGRESSCLASSES_NAME_KEY = ["apis_networking_k8s_io_v1_watch_ingressclasses_name"];
const APIS_NETWORKING_K8S_IO_V1_WATCH_INGRESSES_KEY = ["apis_networking_k8s_io_v1_watch_ingresses"];
const APIS_NETWORKING_K8S_IO_V1_WATCH_NAMESPACES_NAMESPACE_INGRESSES_KEY = ["apis_networking_k8s_io_v1_watch_namespaces_namespace_ingresses"];
const APIS_NETWORKING_K8S_IO_V1_WATCH_NAMESPACES_NAMESPACE_INGRESSES_NAME_KEY = ["apis_networking_k8s_io_v1_watch_namespaces_namespace_ingresses_name"];
const APIS_NETWORKING_K8S_IO_V1_WATCH_NAMESPACES_NAMESPACE_NETWORKPOLICIES_KEY = ["apis_networking_k8s_io_v1_watch_namespaces_namespace_networkpolicies"];
const APIS_NETWORKING_K8S_IO_V1_WATCH_NAMESPACES_NAMESPACE_NETWORKPOLICIES_NAME_KEY = ["apis_networking_k8s_io_v1_watch_namespaces_namespace_networkpolicies_name"];
const APIS_NETWORKING_K8S_IO_V1_WATCH_NETWORKPOLICIES_KEY = ["apis_networking_k8s_io_v1_watch_networkpolicies"];
const APIS_NODE_K8S_IO_KEY = ["apis_node_k8s_io"];
const APIS_NODE_K8S_IO_V1_KEY = ["apis_node_k8s_io_v1"];
const APIS_NODE_K8S_IO_V1_RUNTIMECLASSES_KEY = ["apis_node_k8s_io_v1_runtimeclasses"];
const APIS_NODE_K8S_IO_V1_RUNTIMECLASSES_NAME_KEY = ["apis_node_k8s_io_v1_runtimeclasses_name"];
const APIS_NODE_K8S_IO_V1_WATCH_RUNTIMECLASSES_KEY = ["apis_node_k8s_io_v1_watch_runtimeclasses"];
const APIS_NODE_K8S_IO_V1_WATCH_RUNTIMECLASSES_NAME_KEY = ["apis_node_k8s_io_v1_watch_runtimeclasses_name"];
const APIS_NODE_K8S_IO_V1BETA1_KEY = ["apis_node_k8s_io_v1beta1"];
const APIS_NODE_K8S_IO_V1BETA1_RUNTIMECLASSES_KEY = ["apis_node_k8s_io_v1beta1_runtimeclasses"];
const APIS_NODE_K8S_IO_V1BETA1_RUNTIMECLASSES_NAME_KEY = ["apis_node_k8s_io_v1beta1_runtimeclasses_name"];
const APIS_NODE_K8S_IO_V1BETA1_WATCH_RUNTIMECLASSES_KEY = ["apis_node_k8s_io_v1beta1_watch_runtimeclasses"];
const APIS_NODE_K8S_IO_V1BETA1_WATCH_RUNTIMECLASSES_NAME_KEY = ["apis_node_k8s_io_v1beta1_watch_runtimeclasses_name"];
const APIS_POLICY_KEY = ["apis_policy"];
const APIS_POLICY_V1_KEY = ["apis_policy_v1"];
const APIS_POLICY_V1_NAMESPACES_NAMESPACE_PODDISRUPTIONBUDGETS_KEY = ["apis_policy_v1_namespaces_namespace_poddisruptionbudgets"];
const APIS_POLICY_V1_NAMESPACES_NAMESPACE_PODDISRUPTIONBUDGETS_NAME_KEY = ["apis_policy_v1_namespaces_namespace_poddisruptionbudgets_name"];
const APIS_POLICY_V1_NAMESPACES_NAMESPACE_PODDISRUPTIONBUDGETS_NAME_STATUS_KEY = ["apis_policy_v1_namespaces_namespace_poddisruptionbudgets_name_status"];
const APIS_POLICY_V1_PODDISRUPTIONBUDGETS_KEY = ["apis_policy_v1_poddisruptionbudgets"];
const APIS_POLICY_V1_WATCH_NAMESPACES_NAMESPACE_PODDISRUPTIONBUDGETS_KEY = ["apis_policy_v1_watch_namespaces_namespace_poddisruptionbudgets"];
const APIS_POLICY_V1_WATCH_NAMESPACES_NAMESPACE_PODDISRUPTIONBUDGETS_NAME_KEY = ["apis_policy_v1_watch_namespaces_namespace_poddisruptionbudgets_name"];
const APIS_POLICY_V1_WATCH_PODDISRUPTIONBUDGETS_KEY = ["apis_policy_v1_watch_poddisruptionbudgets"];
const APIS_POLICY_V1BETA1_KEY = ["apis_policy_v1beta1"];
const APIS_POLICY_V1BETA1_NAMESPACES_NAMESPACE_PODDISRUPTIONBUDGETS_KEY = ["apis_policy_v1beta1_namespaces_namespace_poddisruptionbudgets"];
const APIS_POLICY_V1BETA1_NAMESPACES_NAMESPACE_PODDISRUPTIONBUDGETS_NAME_KEY = ["apis_policy_v1beta1_namespaces_namespace_poddisruptionbudgets_name"];
const APIS_POLICY_V1BETA1_NAMESPACES_NAMESPACE_PODDISRUPTIONBUDGETS_NAME_STATUS_KEY = ["apis_policy_v1beta1_namespaces_namespace_poddisruptionbudgets_name_status"];
const APIS_POLICY_V1BETA1_PODDISRUPTIONBUDGETS_KEY = ["apis_policy_v1beta1_poddisruptionbudgets"];
const APIS_POLICY_V1BETA1_PODSECURITYPOLICIES_KEY = ["apis_policy_v1beta1_podsecuritypolicies"];
const APIS_POLICY_V1BETA1_PODSECURITYPOLICIES_NAME_KEY = ["apis_policy_v1beta1_podsecuritypolicies_name"];
const APIS_POLICY_V1BETA1_WATCH_NAMESPACES_NAMESPACE_PODDISRUPTIONBUDGETS_KEY = ["apis_policy_v1beta1_watch_namespaces_namespace_poddisruptionbudgets"];
const APIS_POLICY_V1BETA1_WATCH_NAMESPACES_NAMESPACE_PODDISRUPTIONBUDGETS_NAME_KEY = ["apis_policy_v1beta1_watch_namespaces_namespace_poddisruptionbudgets_name"];
const APIS_POLICY_V1BETA1_WATCH_PODDISRUPTIONBUDGETS_KEY = ["apis_policy_v1beta1_watch_poddisruptionbudgets"];
const APIS_POLICY_V1BETA1_WATCH_PODSECURITYPOLICIES_KEY = ["apis_policy_v1beta1_watch_podsecuritypolicies"];
const APIS_POLICY_V1BETA1_WATCH_PODSECURITYPOLICIES_NAME_KEY = ["apis_policy_v1beta1_watch_podsecuritypolicies_name"];
const APIS_RBAC_AUTHORIZATION_K8S_IO_KEY = ["apis_rbac_authorization_k8s_io"];
const APIS_RBAC_AUTHORIZATION_K8S_IO_V1_KEY = ["apis_rbac_authorization_k8s_io_v1"];
const APIS_RBAC_AUTHORIZATION_K8S_IO_V1_CLUSTERROLEBINDINGS_KEY = ["apis_rbac_authorization_k8s_io_v1_clusterrolebindings"];
const APIS_RBAC_AUTHORIZATION_K8S_IO_V1_CLUSTERROLEBINDINGS_NAME_KEY = ["apis_rbac_authorization_k8s_io_v1_clusterrolebindings_name"];
const APIS_RBAC_AUTHORIZATION_K8S_IO_V1_CLUSTERROLES_KEY = ["apis_rbac_authorization_k8s_io_v1_clusterroles"];
const APIS_RBAC_AUTHORIZATION_K8S_IO_V1_CLUSTERROLES_NAME_KEY = ["apis_rbac_authorization_k8s_io_v1_clusterroles_name"];
const APIS_RBAC_AUTHORIZATION_K8S_IO_V1_NAMESPACES_NAMESPACE_ROLEBINDINGS_KEY = ["apis_rbac_authorization_k8s_io_v1_namespaces_namespace_rolebindings"];
const APIS_RBAC_AUTHORIZATION_K8S_IO_V1_NAMESPACES_NAMESPACE_ROLEBINDINGS_NAME_KEY = ["apis_rbac_authorization_k8s_io_v1_namespaces_namespace_rolebindings_name"];
const APIS_RBAC_AUTHORIZATION_K8S_IO_V1_NAMESPACES_NAMESPACE_ROLES_KEY = ["apis_rbac_authorization_k8s_io_v1_namespaces_namespace_roles"];
const APIS_RBAC_AUTHORIZATION_K8S_IO_V1_NAMESPACES_NAMESPACE_ROLES_NAME_KEY = ["apis_rbac_authorization_k8s_io_v1_namespaces_namespace_roles_name"];
const APIS_RBAC_AUTHORIZATION_K8S_IO_V1_ROLEBINDINGS_KEY = ["apis_rbac_authorization_k8s_io_v1_rolebindings"];
const APIS_RBAC_AUTHORIZATION_K8S_IO_V1_ROLES_KEY = ["apis_rbac_authorization_k8s_io_v1_roles"];
const APIS_RBAC_AUTHORIZATION_K8S_IO_V1_WATCH_CLUSTERROLEBINDINGS_KEY = ["apis_rbac_authorization_k8s_io_v1_watch_clusterrolebindings"];
const APIS_RBAC_AUTHORIZATION_K8S_IO_V1_WATCH_CLUSTERROLEBINDINGS_NAME_KEY = ["apis_rbac_authorization_k8s_io_v1_watch_clusterrolebindings_name"];
const APIS_RBAC_AUTHORIZATION_K8S_IO_V1_WATCH_CLUSTERROLES_KEY = ["apis_rbac_authorization_k8s_io_v1_watch_clusterroles"];
const APIS_RBAC_AUTHORIZATION_K8S_IO_V1_WATCH_CLUSTERROLES_NAME_KEY = ["apis_rbac_authorization_k8s_io_v1_watch_clusterroles_name"];
const APIS_RBAC_AUTHORIZATION_K8S_IO_V1_WATCH_NAMESPACES_NAMESPACE_ROLEBINDINGS_KEY = ["apis_rbac_authorization_k8s_io_v1_watch_namespaces_namespace_rolebindings"];
const APIS_RBAC_AUTHORIZATION_K8S_IO_V1_WATCH_NAMESPACES_NAMESPACE_ROLEBINDINGS_NAME_KEY = ["apis_rbac_authorization_k8s_io_v1_watch_namespaces_namespace_rolebindings_name"];
const APIS_RBAC_AUTHORIZATION_K8S_IO_V1_WATCH_NAMESPACES_NAMESPACE_ROLES_KEY = ["apis_rbac_authorization_k8s_io_v1_watch_namespaces_namespace_roles"];
const APIS_RBAC_AUTHORIZATION_K8S_IO_V1_WATCH_NAMESPACES_NAMESPACE_ROLES_NAME_KEY = ["apis_rbac_authorization_k8s_io_v1_watch_namespaces_namespace_roles_name"];
const APIS_RBAC_AUTHORIZATION_K8S_IO_V1_WATCH_ROLEBINDINGS_KEY = ["apis_rbac_authorization_k8s_io_v1_watch_rolebindings"];
const APIS_RBAC_AUTHORIZATION_K8S_IO_V1_WATCH_ROLES_KEY = ["apis_rbac_authorization_k8s_io_v1_watch_roles"];
const APIS_SCHEDULING_K8S_IO_KEY = ["apis_scheduling_k8s_io"];
const APIS_SCHEDULING_K8S_IO_V1_KEY = ["apis_scheduling_k8s_io_v1"];
const APIS_SCHEDULING_K8S_IO_V1_PRIORITYCLASSES_KEY = ["apis_scheduling_k8s_io_v1_priorityclasses"];
const APIS_SCHEDULING_K8S_IO_V1_PRIORITYCLASSES_NAME_KEY = ["apis_scheduling_k8s_io_v1_priorityclasses_name"];
const APIS_SCHEDULING_K8S_IO_V1_WATCH_PRIORITYCLASSES_KEY = ["apis_scheduling_k8s_io_v1_watch_priorityclasses"];
const APIS_SCHEDULING_K8S_IO_V1_WATCH_PRIORITYCLASSES_NAME_KEY = ["apis_scheduling_k8s_io_v1_watch_priorityclasses_name"];
const APIS_STORAGE_K8S_IO_KEY = ["apis_storage_k8s_io"];
const APIS_STORAGE_K8S_IO_V1_KEY = ["apis_storage_k8s_io_v1"];
const APIS_STORAGE_K8S_IO_V1_CSIDRIVERS_KEY = ["apis_storage_k8s_io_v1_csidrivers"];
const APIS_STORAGE_K8S_IO_V1_CSIDRIVERS_NAME_KEY = ["apis_storage_k8s_io_v1_csidrivers_name"];
const APIS_STORAGE_K8S_IO_V1_CSINODES_KEY = ["apis_storage_k8s_io_v1_csinodes"];
const APIS_STORAGE_K8S_IO_V1_CSINODES_NAME_KEY = ["apis_storage_k8s_io_v1_csinodes_name"];
const APIS_STORAGE_K8S_IO_V1_STORAGECLASSES_KEY = ["apis_storage_k8s_io_v1_storageclasses"];
const APIS_STORAGE_K8S_IO_V1_STORAGECLASSES_NAME_KEY = ["apis_storage_k8s_io_v1_storageclasses_name"];
const APIS_STORAGE_K8S_IO_V1_VOLUMEATTACHMENTS_KEY = ["apis_storage_k8s_io_v1_volumeattachments"];
const APIS_STORAGE_K8S_IO_V1_VOLUMEATTACHMENTS_NAME_KEY = ["apis_storage_k8s_io_v1_volumeattachments_name"];
const APIS_STORAGE_K8S_IO_V1_VOLUMEATTACHMENTS_NAME_STATUS_KEY = ["apis_storage_k8s_io_v1_volumeattachments_name_status"];
const APIS_STORAGE_K8S_IO_V1_WATCH_CSIDRIVERS_KEY = ["apis_storage_k8s_io_v1_watch_csidrivers"];
const APIS_STORAGE_K8S_IO_V1_WATCH_CSIDRIVERS_NAME_KEY = ["apis_storage_k8s_io_v1_watch_csidrivers_name"];
const APIS_STORAGE_K8S_IO_V1_WATCH_CSINODES_KEY = ["apis_storage_k8s_io_v1_watch_csinodes"];
const APIS_STORAGE_K8S_IO_V1_WATCH_CSINODES_NAME_KEY = ["apis_storage_k8s_io_v1_watch_csinodes_name"];
const APIS_STORAGE_K8S_IO_V1_WATCH_STORAGECLASSES_KEY = ["apis_storage_k8s_io_v1_watch_storageclasses"];
const APIS_STORAGE_K8S_IO_V1_WATCH_STORAGECLASSES_NAME_KEY = ["apis_storage_k8s_io_v1_watch_storageclasses_name"];
const APIS_STORAGE_K8S_IO_V1_WATCH_VOLUMEATTACHMENTS_KEY = ["apis_storage_k8s_io_v1_watch_volumeattachments"];
const APIS_STORAGE_K8S_IO_V1_WATCH_VOLUMEATTACHMENTS_NAME_KEY = ["apis_storage_k8s_io_v1_watch_volumeattachments_name"];
const APIS_STORAGE_K8S_IO_V1BETA1_KEY = ["apis_storage_k8s_io_v1beta1"];
const APIS_STORAGE_K8S_IO_V1BETA1_CSISTORAGECAPACITIES_KEY = ["apis_storage_k8s_io_v1beta1_csistoragecapacities"];
const APIS_STORAGE_K8S_IO_V1BETA1_NAMESPACES_NAMESPACE_CSISTORAGECAPACITIES_KEY = ["apis_storage_k8s_io_v1beta1_namespaces_namespace_csistoragecapacities"];
const APIS_STORAGE_K8S_IO_V1BETA1_NAMESPACES_NAMESPACE_CSISTORAGECAPACITIES_NAME_KEY = ["apis_storage_k8s_io_v1beta1_namespaces_namespace_csistoragecapacities_name"];
const APIS_STORAGE_K8S_IO_V1BETA1_WATCH_CSISTORAGECAPACITIES_KEY = ["apis_storage_k8s_io_v1beta1_watch_csistoragecapacities"];
const APIS_STORAGE_K8S_IO_V1BETA1_WATCH_NAMESPACES_NAMESPACE_CSISTORAGECAPACITIES_KEY = ["apis_storage_k8s_io_v1beta1_watch_namespaces_namespace_csistoragecapacities"];
const APIS_STORAGE_K8S_IO_V1BETA1_WATCH_NAMESPACES_NAMESPACE_CSISTORAGECAPACITIES_NAME_KEY = ["apis_storage_k8s_io_v1beta1_watch_namespaces_namespace_csistoragecapacities_name"];
const LOGS_KEY = ["logs"];
const LOGS_LOGPATH_KEY = ["logs_logpath"];
const OPENID_V1_JWKS_KEY = ["openid_v1_jwks"];
const VERSION_KEY = ["version"];
export function useGetServiceAccountIssuerOpenIDConfigurationQuery(params: GetServiceAccountIssuerOpenIDConfigurationRequest) {
  const client = useKubernetes().client;
  return useQuery<string, Error>({
    queryKey: [...WELL_KNOWN_OPENID_CONFIGURATION_KEY],
    queryFn: async () => {
      return await client.getServiceAccountIssuerOpenIDConfiguration(params);
    },
    enabled: true
  });
}
export function useGetCoreAPIVersionsQuery(params: GetCoreAPIVersionsRequest) {
  const client = useKubernetes().client;
  return useQuery<APIVersions, Error>({
    queryKey: [...API_KEY],
    queryFn: async () => {
      return await client.getCoreAPIVersions(params);
    },
    enabled: true
  });
}
export function useGetCoreV1APIResourcesQuery(params: GetCoreV1APIResourcesRequest) {
  const client = useKubernetes().client;
  return useQuery<APIResourceList, Error>({
    queryKey: [...API_V1_KEY],
    queryFn: async () => {
      return await client.getCoreV1APIResources(params);
    },
    enabled: true
  });
}
export function useListCoreV1ComponentStatusQuery(params: ListCoreV1ComponentStatusRequest) {
  const client = useKubernetes().client;
  return useQuery<ComponentStatusList, Error>({
    queryKey: [...API_V1_COMPONENTSTATUSES_KEY],
    queryFn: async () => {
      return await client.listCoreV1ComponentStatus(params);
    },
    enabled: true
  });
}
export function useReadCoreV1ComponentStatusQuery(params: ReadCoreV1ComponentStatusRequest) {
  const client = useKubernetes().client;
  return useQuery<ComponentStatus, Error>({
    queryKey: [...API_V1_COMPONENTSTATUSES_NAME_KEY, params.path.name],
    queryFn: async () => {
      return await client.readCoreV1ComponentStatus(params);
    },
    enabled: params.path.name !== undefined
  });
}
export function useListCoreV1ConfigMapForAllNamespacesQuery(params: ListCoreV1ConfigMapForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<ConfigMapList, Error>({
    queryKey: [...API_V1_CONFIGMAPS_KEY],
    queryFn: async () => {
      return await client.listCoreV1ConfigMapForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useListCoreV1EndpointsForAllNamespacesQuery(params: ListCoreV1EndpointsForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<EndpointsList, Error>({
    queryKey: [...API_V1_ENDPOINTS_KEY],
    queryFn: async () => {
      return await client.listCoreV1EndpointsForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useListCoreV1EventForAllNamespacesQuery(params: ListCoreV1EventForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<EventList, Error>({
    queryKey: [...API_V1_EVENTS_KEY],
    queryFn: async () => {
      return await client.listCoreV1EventForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useListCoreV1LimitRangeForAllNamespacesQuery(params: ListCoreV1LimitRangeForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<LimitRangeList, Error>({
    queryKey: [...API_V1_LIMITRANGES_KEY],
    queryFn: async () => {
      return await client.listCoreV1LimitRangeForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useListCoreV1NamespaceQuery(params: ListCoreV1NamespaceRequest) {
  const client = useKubernetes().client;
  return useQuery<NamespaceList, Error>({
    queryKey: [...API_V1_NAMESPACES_KEY],
    queryFn: async () => {
      return await client.listCoreV1Namespace(params);
    },
    enabled: true
  });
}
export function useCreateCoreV1Namespace() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Namespace, Error, CreateCoreV1NamespaceRequest>({
    mutationFn: async request => {
      return client.createCoreV1Namespace(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_KEY]
      });
    }
  });
}
export function useCreateCoreV1NamespacedBinding() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Binding, Error, CreateCoreV1NamespacedBindingRequest>({
    mutationFn: async request => {
      return client.createCoreV1NamespacedBinding(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_BINDINGS_KEY, response.path.namespace]
      });
    }
  });
}
export function useListCoreV1NamespacedConfigMapQuery(params: ListCoreV1NamespacedConfigMapRequest) {
  const client = useKubernetes().client;
  return useQuery<ConfigMapList, Error>({
    queryKey: [...API_V1_NAMESPACES_NAMESPACE_CONFIGMAPS_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.listCoreV1NamespacedConfigMap(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useCreateCoreV1NamespacedConfigMap() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<ConfigMap, Error, CreateCoreV1NamespacedConfigMapRequest>({
    mutationFn: async request => {
      return client.createCoreV1NamespacedConfigMap(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_CONFIGMAPS_KEY, response.path.namespace]
      });
    }
  });
}
export function useDeleteCoreV1CollectionNamespacedConfigMap() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteCoreV1CollectionNamespacedConfigMapRequest>({
    mutationFn: async request => {
      return client.deleteCoreV1CollectionNamespacedConfigMap(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_CONFIGMAPS_KEY, response.path.namespace]
      });
    }
  });
}
export function useReadCoreV1NamespacedConfigMapQuery(params: ReadCoreV1NamespacedConfigMapRequest) {
  const client = useKubernetes().client;
  return useQuery<ConfigMap, Error>({
    queryKey: [...API_V1_NAMESPACES_NAMESPACE_CONFIGMAPS_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.readCoreV1NamespacedConfigMap(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useReplaceCoreV1NamespacedConfigMap() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<ConfigMap, Error, ReplaceCoreV1NamespacedConfigMapRequest>({
    mutationFn: async request => {
      return client.replaceCoreV1NamespacedConfigMap(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_CONFIGMAPS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useDeleteCoreV1NamespacedConfigMap() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteCoreV1NamespacedConfigMapRequest>({
    mutationFn: async request => {
      return client.deleteCoreV1NamespacedConfigMap(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_CONFIGMAPS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function usePatchCoreV1NamespacedConfigMap() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<ConfigMap, Error, PatchCoreV1NamespacedConfigMapRequest>({
    mutationFn: async request => {
      return client.patchCoreV1NamespacedConfigMap(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_CONFIGMAPS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useListCoreV1NamespacedEndpointsQuery(params: ListCoreV1NamespacedEndpointsRequest) {
  const client = useKubernetes().client;
  return useQuery<EndpointsList, Error>({
    queryKey: [...API_V1_NAMESPACES_NAMESPACE_ENDPOINTS_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.listCoreV1NamespacedEndpoints(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useCreateCoreV1NamespacedEndpoints() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Endpoints, Error, CreateCoreV1NamespacedEndpointsRequest>({
    mutationFn: async request => {
      return client.createCoreV1NamespacedEndpoints(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_ENDPOINTS_KEY, response.path.namespace]
      });
    }
  });
}
export function useDeleteCoreV1CollectionNamespacedEndpoints() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteCoreV1CollectionNamespacedEndpointsRequest>({
    mutationFn: async request => {
      return client.deleteCoreV1CollectionNamespacedEndpoints(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_ENDPOINTS_KEY, response.path.namespace]
      });
    }
  });
}
export function useReadCoreV1NamespacedEndpointsQuery(params: ReadCoreV1NamespacedEndpointsRequest) {
  const client = useKubernetes().client;
  return useQuery<Endpoints, Error>({
    queryKey: [...API_V1_NAMESPACES_NAMESPACE_ENDPOINTS_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.readCoreV1NamespacedEndpoints(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useReplaceCoreV1NamespacedEndpoints() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Endpoints, Error, ReplaceCoreV1NamespacedEndpointsRequest>({
    mutationFn: async request => {
      return client.replaceCoreV1NamespacedEndpoints(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_ENDPOINTS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useDeleteCoreV1NamespacedEndpoints() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteCoreV1NamespacedEndpointsRequest>({
    mutationFn: async request => {
      return client.deleteCoreV1NamespacedEndpoints(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_ENDPOINTS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function usePatchCoreV1NamespacedEndpoints() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Endpoints, Error, PatchCoreV1NamespacedEndpointsRequest>({
    mutationFn: async request => {
      return client.patchCoreV1NamespacedEndpoints(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_ENDPOINTS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useListCoreV1NamespacedEventQuery(params: ListCoreV1NamespacedEventRequest) {
  const client = useKubernetes().client;
  return useQuery<EventList, Error>({
    queryKey: [...API_V1_NAMESPACES_NAMESPACE_EVENTS_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.listCoreV1NamespacedEvent(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useCreateCoreV1NamespacedEvent() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Event, Error, CreateCoreV1NamespacedEventRequest>({
    mutationFn: async request => {
      return client.createCoreV1NamespacedEvent(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_EVENTS_KEY, response.path.namespace]
      });
    }
  });
}
export function useDeleteCoreV1CollectionNamespacedEvent() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteCoreV1CollectionNamespacedEventRequest>({
    mutationFn: async request => {
      return client.deleteCoreV1CollectionNamespacedEvent(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_EVENTS_KEY, response.path.namespace]
      });
    }
  });
}
export function useReadCoreV1NamespacedEventQuery(params: ReadCoreV1NamespacedEventRequest) {
  const client = useKubernetes().client;
  return useQuery<Event, Error>({
    queryKey: [...API_V1_NAMESPACES_NAMESPACE_EVENTS_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.readCoreV1NamespacedEvent(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useReplaceCoreV1NamespacedEvent() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Event, Error, ReplaceCoreV1NamespacedEventRequest>({
    mutationFn: async request => {
      return client.replaceCoreV1NamespacedEvent(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_EVENTS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useDeleteCoreV1NamespacedEvent() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteCoreV1NamespacedEventRequest>({
    mutationFn: async request => {
      return client.deleteCoreV1NamespacedEvent(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_EVENTS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function usePatchCoreV1NamespacedEvent() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Event, Error, PatchCoreV1NamespacedEventRequest>({
    mutationFn: async request => {
      return client.patchCoreV1NamespacedEvent(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_EVENTS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useListCoreV1NamespacedLimitRangeQuery(params: ListCoreV1NamespacedLimitRangeRequest) {
  const client = useKubernetes().client;
  return useQuery<LimitRangeList, Error>({
    queryKey: [...API_V1_NAMESPACES_NAMESPACE_LIMITRANGES_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.listCoreV1NamespacedLimitRange(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useCreateCoreV1NamespacedLimitRange() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<LimitRange, Error, CreateCoreV1NamespacedLimitRangeRequest>({
    mutationFn: async request => {
      return client.createCoreV1NamespacedLimitRange(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_LIMITRANGES_KEY, response.path.namespace]
      });
    }
  });
}
export function useDeleteCoreV1CollectionNamespacedLimitRange() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteCoreV1CollectionNamespacedLimitRangeRequest>({
    mutationFn: async request => {
      return client.deleteCoreV1CollectionNamespacedLimitRange(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_LIMITRANGES_KEY, response.path.namespace]
      });
    }
  });
}
export function useReadCoreV1NamespacedLimitRangeQuery(params: ReadCoreV1NamespacedLimitRangeRequest) {
  const client = useKubernetes().client;
  return useQuery<LimitRange, Error>({
    queryKey: [...API_V1_NAMESPACES_NAMESPACE_LIMITRANGES_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.readCoreV1NamespacedLimitRange(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useReplaceCoreV1NamespacedLimitRange() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<LimitRange, Error, ReplaceCoreV1NamespacedLimitRangeRequest>({
    mutationFn: async request => {
      return client.replaceCoreV1NamespacedLimitRange(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_LIMITRANGES_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useDeleteCoreV1NamespacedLimitRange() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteCoreV1NamespacedLimitRangeRequest>({
    mutationFn: async request => {
      return client.deleteCoreV1NamespacedLimitRange(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_LIMITRANGES_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function usePatchCoreV1NamespacedLimitRange() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<LimitRange, Error, PatchCoreV1NamespacedLimitRangeRequest>({
    mutationFn: async request => {
      return client.patchCoreV1NamespacedLimitRange(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_LIMITRANGES_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useListCoreV1NamespacedPersistentVolumeClaimQuery(params: ListCoreV1NamespacedPersistentVolumeClaimRequest) {
  const client = useKubernetes().client;
  return useQuery<PersistentVolumeClaimList, Error>({
    queryKey: [...API_V1_NAMESPACES_NAMESPACE_PERSISTENTVOLUMECLAIMS_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.listCoreV1NamespacedPersistentVolumeClaim(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useCreateCoreV1NamespacedPersistentVolumeClaim() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<PersistentVolumeClaim, Error, CreateCoreV1NamespacedPersistentVolumeClaimRequest>({
    mutationFn: async request => {
      return client.createCoreV1NamespacedPersistentVolumeClaim(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_PERSISTENTVOLUMECLAIMS_KEY, response.path.namespace]
      });
    }
  });
}
export function useDeleteCoreV1CollectionNamespacedPersistentVolumeClaim() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteCoreV1CollectionNamespacedPersistentVolumeClaimRequest>({
    mutationFn: async request => {
      return client.deleteCoreV1CollectionNamespacedPersistentVolumeClaim(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_PERSISTENTVOLUMECLAIMS_KEY, response.path.namespace]
      });
    }
  });
}
export function useReadCoreV1NamespacedPersistentVolumeClaimQuery(params: ReadCoreV1NamespacedPersistentVolumeClaimRequest) {
  const client = useKubernetes().client;
  return useQuery<PersistentVolumeClaim, Error>({
    queryKey: [...API_V1_NAMESPACES_NAMESPACE_PERSISTENTVOLUMECLAIMS_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.readCoreV1NamespacedPersistentVolumeClaim(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useReplaceCoreV1NamespacedPersistentVolumeClaim() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<PersistentVolumeClaim, Error, ReplaceCoreV1NamespacedPersistentVolumeClaimRequest>({
    mutationFn: async request => {
      return client.replaceCoreV1NamespacedPersistentVolumeClaim(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_PERSISTENTVOLUMECLAIMS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useDeleteCoreV1NamespacedPersistentVolumeClaim() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<PersistentVolumeClaim, Error, DeleteCoreV1NamespacedPersistentVolumeClaimRequest>({
    mutationFn: async request => {
      return client.deleteCoreV1NamespacedPersistentVolumeClaim(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_PERSISTENTVOLUMECLAIMS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function usePatchCoreV1NamespacedPersistentVolumeClaim() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<PersistentVolumeClaim, Error, PatchCoreV1NamespacedPersistentVolumeClaimRequest>({
    mutationFn: async request => {
      return client.patchCoreV1NamespacedPersistentVolumeClaim(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_PERSISTENTVOLUMECLAIMS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useReadCoreV1NamespacedPersistentVolumeClaimStatusQuery(params: ReadCoreV1NamespacedPersistentVolumeClaimStatusRequest) {
  const client = useKubernetes().client;
  return useQuery<PersistentVolumeClaim, Error>({
    queryKey: [...API_V1_NAMESPACES_NAMESPACE_PERSISTENTVOLUMECLAIMS_NAME_STATUS_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.readCoreV1NamespacedPersistentVolumeClaimStatus(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useReplaceCoreV1NamespacedPersistentVolumeClaimStatus() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<PersistentVolumeClaim, Error, ReplaceCoreV1NamespacedPersistentVolumeClaimStatusRequest>({
    mutationFn: async request => {
      return client.replaceCoreV1NamespacedPersistentVolumeClaimStatus(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_PERSISTENTVOLUMECLAIMS_NAME_STATUS_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function usePatchCoreV1NamespacedPersistentVolumeClaimStatus() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<PersistentVolumeClaim, Error, PatchCoreV1NamespacedPersistentVolumeClaimStatusRequest>({
    mutationFn: async request => {
      return client.patchCoreV1NamespacedPersistentVolumeClaimStatus(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_PERSISTENTVOLUMECLAIMS_NAME_STATUS_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useListCoreV1NamespacedPodQuery(params: ListCoreV1NamespacedPodRequest) {
  const client = useKubernetes().client;
  return useQuery<PodList, Error>({
    queryKey: [...API_V1_NAMESPACES_NAMESPACE_PODS_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.listCoreV1NamespacedPod(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useCreateCoreV1NamespacedPod() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Pod, Error, CreateCoreV1NamespacedPodRequest>({
    mutationFn: async request => {
      return client.createCoreV1NamespacedPod(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_PODS_KEY, response.path.namespace]
      });
    }
  });
}
export function useDeleteCoreV1CollectionNamespacedPod() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteCoreV1CollectionNamespacedPodRequest>({
    mutationFn: async request => {
      return client.deleteCoreV1CollectionNamespacedPod(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_PODS_KEY, response.path.namespace]
      });
    }
  });
}
export function useReadCoreV1NamespacedPodQuery(params: ReadCoreV1NamespacedPodRequest) {
  const client = useKubernetes().client;
  return useQuery<Pod, Error>({
    queryKey: [...API_V1_NAMESPACES_NAMESPACE_PODS_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.readCoreV1NamespacedPod(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useReplaceCoreV1NamespacedPod() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Pod, Error, ReplaceCoreV1NamespacedPodRequest>({
    mutationFn: async request => {
      return client.replaceCoreV1NamespacedPod(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_PODS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useDeleteCoreV1NamespacedPod() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Pod, Error, DeleteCoreV1NamespacedPodRequest>({
    mutationFn: async request => {
      return client.deleteCoreV1NamespacedPod(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_PODS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function usePatchCoreV1NamespacedPod() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Pod, Error, PatchCoreV1NamespacedPodRequest>({
    mutationFn: async request => {
      return client.patchCoreV1NamespacedPod(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_PODS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useConnectCoreV1GetNamespacedPodAttachQuery(params: ConnectCoreV1GetNamespacedPodAttachRequest) {
  const client = useKubernetes().client;
  return useQuery<string, Error>({
    queryKey: [...API_V1_NAMESPACES_NAMESPACE_PODS_NAME_ATTACH_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.connectCoreV1GetNamespacedPodAttach(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useConnectCoreV1PostNamespacedPodAttach() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<string, Error, ConnectCoreV1PostNamespacedPodAttachRequest>({
    mutationFn: async request => {
      return client.connectCoreV1PostNamespacedPodAttach(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_PODS_NAME_ATTACH_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useCreateCoreV1NamespacedPodBinding() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Binding, Error, CreateCoreV1NamespacedPodBindingRequest>({
    mutationFn: async request => {
      return client.createCoreV1NamespacedPodBinding(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_PODS_NAME_BINDING_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useCreateCoreV1NamespacedPodEviction() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Eviction, Error, CreateCoreV1NamespacedPodEvictionRequest>({
    mutationFn: async request => {
      return client.createCoreV1NamespacedPodEviction(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_PODS_NAME_EVICTION_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useConnectCoreV1GetNamespacedPodExecQuery(params: ConnectCoreV1GetNamespacedPodExecRequest) {
  const client = useKubernetes().client;
  return useQuery<string, Error>({
    queryKey: [...API_V1_NAMESPACES_NAMESPACE_PODS_NAME_EXEC_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.connectCoreV1GetNamespacedPodExec(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useConnectCoreV1PostNamespacedPodExec() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<string, Error, ConnectCoreV1PostNamespacedPodExecRequest>({
    mutationFn: async request => {
      return client.connectCoreV1PostNamespacedPodExec(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_PODS_NAME_EXEC_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useReadCoreV1NamespacedPodLogQuery(params: ReadCoreV1NamespacedPodLogRequest) {
  const client = useKubernetes().client;
  return useQuery<string, Error>({
    queryKey: [...API_V1_NAMESPACES_NAMESPACE_PODS_NAME_LOG_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.readCoreV1NamespacedPodLog(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useConnectCoreV1GetNamespacedPodPortforwardQuery(params: ConnectCoreV1GetNamespacedPodPortforwardRequest) {
  const client = useKubernetes().client;
  return useQuery<string, Error>({
    queryKey: [...API_V1_NAMESPACES_NAMESPACE_PODS_NAME_PORTFORWARD_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.connectCoreV1GetNamespacedPodPortforward(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useConnectCoreV1PostNamespacedPodPortforward() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<string, Error, ConnectCoreV1PostNamespacedPodPortforwardRequest>({
    mutationFn: async request => {
      return client.connectCoreV1PostNamespacedPodPortforward(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_PODS_NAME_PORTFORWARD_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useConnectCoreV1GetNamespacedPodProxyQuery(params: ConnectCoreV1GetNamespacedPodProxyRequest) {
  const client = useKubernetes().client;
  return useQuery<string, Error>({
    queryKey: [...API_V1_NAMESPACES_NAMESPACE_PODS_NAME_PROXY_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.connectCoreV1GetNamespacedPodProxy(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useConnectCoreV1PostNamespacedPodProxy() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<string, Error, ConnectCoreV1PostNamespacedPodProxyRequest>({
    mutationFn: async request => {
      return client.connectCoreV1PostNamespacedPodProxy(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_PODS_NAME_PROXY_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useConnectCoreV1PutNamespacedPodProxy() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<string, Error, ConnectCoreV1PutNamespacedPodProxyRequest>({
    mutationFn: async request => {
      return client.connectCoreV1PutNamespacedPodProxy(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_PODS_NAME_PROXY_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useConnectCoreV1DeleteNamespacedPodProxy() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<string, Error, ConnectCoreV1DeleteNamespacedPodProxyRequest>({
    mutationFn: async request => {
      return client.connectCoreV1DeleteNamespacedPodProxy(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_PODS_NAME_PROXY_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useConnectCoreV1PatchNamespacedPodProxy() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<string, Error, ConnectCoreV1PatchNamespacedPodProxyRequest>({
    mutationFn: async request => {
      return client.connectCoreV1PatchNamespacedPodProxy(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_PODS_NAME_PROXY_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useConnectCoreV1GetNamespacedPodProxyWithPathQuery(params: ConnectCoreV1GetNamespacedPodProxyWithPathRequest) {
  const client = useKubernetes().client;
  return useQuery<string, Error>({
    queryKey: [...API_V1_NAMESPACES_NAMESPACE_PODS_NAME_PROXY_PATH_KEY, params.path.name, params.path.namespace, params.path.path],
    queryFn: async () => {
      return await client.connectCoreV1GetNamespacedPodProxyWithPath(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined && params.path.path !== undefined
  });
}
export function useConnectCoreV1PostNamespacedPodProxyWithPath() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<string, Error, ConnectCoreV1PostNamespacedPodProxyWithPathRequest>({
    mutationFn: async request => {
      return client.connectCoreV1PostNamespacedPodProxyWithPath(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_PODS_NAME_PROXY_PATH_KEY, response.path.name, response.path.namespace, response.path.path]
      });
    }
  });
}
export function useConnectCoreV1PutNamespacedPodProxyWithPath() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<string, Error, ConnectCoreV1PutNamespacedPodProxyWithPathRequest>({
    mutationFn: async request => {
      return client.connectCoreV1PutNamespacedPodProxyWithPath(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_PODS_NAME_PROXY_PATH_KEY, response.path.name, response.path.namespace, response.path.path]
      });
    }
  });
}
export function useConnectCoreV1DeleteNamespacedPodProxyWithPath() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<string, Error, ConnectCoreV1DeleteNamespacedPodProxyWithPathRequest>({
    mutationFn: async request => {
      return client.connectCoreV1DeleteNamespacedPodProxyWithPath(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_PODS_NAME_PROXY_PATH_KEY, response.path.name, response.path.namespace, response.path.path]
      });
    }
  });
}
export function useConnectCoreV1PatchNamespacedPodProxyWithPath() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<string, Error, ConnectCoreV1PatchNamespacedPodProxyWithPathRequest>({
    mutationFn: async request => {
      return client.connectCoreV1PatchNamespacedPodProxyWithPath(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_PODS_NAME_PROXY_PATH_KEY, response.path.name, response.path.namespace, response.path.path]
      });
    }
  });
}
export function useReadCoreV1NamespacedPodStatusQuery(params: ReadCoreV1NamespacedPodStatusRequest) {
  const client = useKubernetes().client;
  return useQuery<Pod, Error>({
    queryKey: [...API_V1_NAMESPACES_NAMESPACE_PODS_NAME_STATUS_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.readCoreV1NamespacedPodStatus(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useReplaceCoreV1NamespacedPodStatus() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Pod, Error, ReplaceCoreV1NamespacedPodStatusRequest>({
    mutationFn: async request => {
      return client.replaceCoreV1NamespacedPodStatus(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_PODS_NAME_STATUS_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function usePatchCoreV1NamespacedPodStatus() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Pod, Error, PatchCoreV1NamespacedPodStatusRequest>({
    mutationFn: async request => {
      return client.patchCoreV1NamespacedPodStatus(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_PODS_NAME_STATUS_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useListCoreV1NamespacedPodTemplateQuery(params: ListCoreV1NamespacedPodTemplateRequest) {
  const client = useKubernetes().client;
  return useQuery<PodTemplateList, Error>({
    queryKey: [...API_V1_NAMESPACES_NAMESPACE_PODTEMPLATES_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.listCoreV1NamespacedPodTemplate(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useCreateCoreV1NamespacedPodTemplate() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<PodTemplate, Error, CreateCoreV1NamespacedPodTemplateRequest>({
    mutationFn: async request => {
      return client.createCoreV1NamespacedPodTemplate(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_PODTEMPLATES_KEY, response.path.namespace]
      });
    }
  });
}
export function useDeleteCoreV1CollectionNamespacedPodTemplate() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteCoreV1CollectionNamespacedPodTemplateRequest>({
    mutationFn: async request => {
      return client.deleteCoreV1CollectionNamespacedPodTemplate(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_PODTEMPLATES_KEY, response.path.namespace]
      });
    }
  });
}
export function useReadCoreV1NamespacedPodTemplateQuery(params: ReadCoreV1NamespacedPodTemplateRequest) {
  const client = useKubernetes().client;
  return useQuery<PodTemplate, Error>({
    queryKey: [...API_V1_NAMESPACES_NAMESPACE_PODTEMPLATES_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.readCoreV1NamespacedPodTemplate(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useReplaceCoreV1NamespacedPodTemplate() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<PodTemplate, Error, ReplaceCoreV1NamespacedPodTemplateRequest>({
    mutationFn: async request => {
      return client.replaceCoreV1NamespacedPodTemplate(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_PODTEMPLATES_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useDeleteCoreV1NamespacedPodTemplate() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<PodTemplate, Error, DeleteCoreV1NamespacedPodTemplateRequest>({
    mutationFn: async request => {
      return client.deleteCoreV1NamespacedPodTemplate(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_PODTEMPLATES_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function usePatchCoreV1NamespacedPodTemplate() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<PodTemplate, Error, PatchCoreV1NamespacedPodTemplateRequest>({
    mutationFn: async request => {
      return client.patchCoreV1NamespacedPodTemplate(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_PODTEMPLATES_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useListCoreV1NamespacedReplicationControllerQuery(params: ListCoreV1NamespacedReplicationControllerRequest) {
  const client = useKubernetes().client;
  return useQuery<ReplicationControllerList, Error>({
    queryKey: [...API_V1_NAMESPACES_NAMESPACE_REPLICATIONCONTROLLERS_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.listCoreV1NamespacedReplicationController(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useCreateCoreV1NamespacedReplicationController() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<ReplicationController, Error, CreateCoreV1NamespacedReplicationControllerRequest>({
    mutationFn: async request => {
      return client.createCoreV1NamespacedReplicationController(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_REPLICATIONCONTROLLERS_KEY, response.path.namespace]
      });
    }
  });
}
export function useDeleteCoreV1CollectionNamespacedReplicationController() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteCoreV1CollectionNamespacedReplicationControllerRequest>({
    mutationFn: async request => {
      return client.deleteCoreV1CollectionNamespacedReplicationController(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_REPLICATIONCONTROLLERS_KEY, response.path.namespace]
      });
    }
  });
}
export function useReadCoreV1NamespacedReplicationControllerQuery(params: ReadCoreV1NamespacedReplicationControllerRequest) {
  const client = useKubernetes().client;
  return useQuery<ReplicationController, Error>({
    queryKey: [...API_V1_NAMESPACES_NAMESPACE_REPLICATIONCONTROLLERS_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.readCoreV1NamespacedReplicationController(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useReplaceCoreV1NamespacedReplicationController() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<ReplicationController, Error, ReplaceCoreV1NamespacedReplicationControllerRequest>({
    mutationFn: async request => {
      return client.replaceCoreV1NamespacedReplicationController(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_REPLICATIONCONTROLLERS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useDeleteCoreV1NamespacedReplicationController() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteCoreV1NamespacedReplicationControllerRequest>({
    mutationFn: async request => {
      return client.deleteCoreV1NamespacedReplicationController(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_REPLICATIONCONTROLLERS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function usePatchCoreV1NamespacedReplicationController() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<ReplicationController, Error, PatchCoreV1NamespacedReplicationControllerRequest>({
    mutationFn: async request => {
      return client.patchCoreV1NamespacedReplicationController(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_REPLICATIONCONTROLLERS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useReadCoreV1NamespacedReplicationControllerScaleQuery(params: ReadCoreV1NamespacedReplicationControllerScaleRequest) {
  const client = useKubernetes().client;
  return useQuery<Scale, Error>({
    queryKey: [...API_V1_NAMESPACES_NAMESPACE_REPLICATIONCONTROLLERS_NAME_SCALE_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.readCoreV1NamespacedReplicationControllerScale(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useReplaceCoreV1NamespacedReplicationControllerScale() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Scale, Error, ReplaceCoreV1NamespacedReplicationControllerScaleRequest>({
    mutationFn: async request => {
      return client.replaceCoreV1NamespacedReplicationControllerScale(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_REPLICATIONCONTROLLERS_NAME_SCALE_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function usePatchCoreV1NamespacedReplicationControllerScale() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Scale, Error, PatchCoreV1NamespacedReplicationControllerScaleRequest>({
    mutationFn: async request => {
      return client.patchCoreV1NamespacedReplicationControllerScale(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_REPLICATIONCONTROLLERS_NAME_SCALE_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useReadCoreV1NamespacedReplicationControllerStatusQuery(params: ReadCoreV1NamespacedReplicationControllerStatusRequest) {
  const client = useKubernetes().client;
  return useQuery<ReplicationController, Error>({
    queryKey: [...API_V1_NAMESPACES_NAMESPACE_REPLICATIONCONTROLLERS_NAME_STATUS_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.readCoreV1NamespacedReplicationControllerStatus(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useReplaceCoreV1NamespacedReplicationControllerStatus() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<ReplicationController, Error, ReplaceCoreV1NamespacedReplicationControllerStatusRequest>({
    mutationFn: async request => {
      return client.replaceCoreV1NamespacedReplicationControllerStatus(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_REPLICATIONCONTROLLERS_NAME_STATUS_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function usePatchCoreV1NamespacedReplicationControllerStatus() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<ReplicationController, Error, PatchCoreV1NamespacedReplicationControllerStatusRequest>({
    mutationFn: async request => {
      return client.patchCoreV1NamespacedReplicationControllerStatus(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_REPLICATIONCONTROLLERS_NAME_STATUS_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useListCoreV1NamespacedResourceQuotaQuery(params: ListCoreV1NamespacedResourceQuotaRequest) {
  const client = useKubernetes().client;
  return useQuery<ResourceQuotaList, Error>({
    queryKey: [...API_V1_NAMESPACES_NAMESPACE_RESOURCEQUOTAS_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.listCoreV1NamespacedResourceQuota(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useCreateCoreV1NamespacedResourceQuota() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<ResourceQuota, Error, CreateCoreV1NamespacedResourceQuotaRequest>({
    mutationFn: async request => {
      return client.createCoreV1NamespacedResourceQuota(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_RESOURCEQUOTAS_KEY, response.path.namespace]
      });
    }
  });
}
export function useDeleteCoreV1CollectionNamespacedResourceQuota() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteCoreV1CollectionNamespacedResourceQuotaRequest>({
    mutationFn: async request => {
      return client.deleteCoreV1CollectionNamespacedResourceQuota(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_RESOURCEQUOTAS_KEY, response.path.namespace]
      });
    }
  });
}
export function useReadCoreV1NamespacedResourceQuotaQuery(params: ReadCoreV1NamespacedResourceQuotaRequest) {
  const client = useKubernetes().client;
  return useQuery<ResourceQuota, Error>({
    queryKey: [...API_V1_NAMESPACES_NAMESPACE_RESOURCEQUOTAS_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.readCoreV1NamespacedResourceQuota(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useReplaceCoreV1NamespacedResourceQuota() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<ResourceQuota, Error, ReplaceCoreV1NamespacedResourceQuotaRequest>({
    mutationFn: async request => {
      return client.replaceCoreV1NamespacedResourceQuota(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_RESOURCEQUOTAS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useDeleteCoreV1NamespacedResourceQuota() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<ResourceQuota, Error, DeleteCoreV1NamespacedResourceQuotaRequest>({
    mutationFn: async request => {
      return client.deleteCoreV1NamespacedResourceQuota(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_RESOURCEQUOTAS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function usePatchCoreV1NamespacedResourceQuota() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<ResourceQuota, Error, PatchCoreV1NamespacedResourceQuotaRequest>({
    mutationFn: async request => {
      return client.patchCoreV1NamespacedResourceQuota(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_RESOURCEQUOTAS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useReadCoreV1NamespacedResourceQuotaStatusQuery(params: ReadCoreV1NamespacedResourceQuotaStatusRequest) {
  const client = useKubernetes().client;
  return useQuery<ResourceQuota, Error>({
    queryKey: [...API_V1_NAMESPACES_NAMESPACE_RESOURCEQUOTAS_NAME_STATUS_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.readCoreV1NamespacedResourceQuotaStatus(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useReplaceCoreV1NamespacedResourceQuotaStatus() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<ResourceQuota, Error, ReplaceCoreV1NamespacedResourceQuotaStatusRequest>({
    mutationFn: async request => {
      return client.replaceCoreV1NamespacedResourceQuotaStatus(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_RESOURCEQUOTAS_NAME_STATUS_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function usePatchCoreV1NamespacedResourceQuotaStatus() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<ResourceQuota, Error, PatchCoreV1NamespacedResourceQuotaStatusRequest>({
    mutationFn: async request => {
      return client.patchCoreV1NamespacedResourceQuotaStatus(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_RESOURCEQUOTAS_NAME_STATUS_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useListCoreV1NamespacedSecretQuery(params: ListCoreV1NamespacedSecretRequest) {
  const client = useKubernetes().client;
  return useQuery<SecretList, Error>({
    queryKey: [...API_V1_NAMESPACES_NAMESPACE_SECRETS_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.listCoreV1NamespacedSecret(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useCreateCoreV1NamespacedSecret() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Secret, Error, CreateCoreV1NamespacedSecretRequest>({
    mutationFn: async request => {
      return client.createCoreV1NamespacedSecret(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_SECRETS_KEY, response.path.namespace]
      });
    }
  });
}
export function useDeleteCoreV1CollectionNamespacedSecret() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteCoreV1CollectionNamespacedSecretRequest>({
    mutationFn: async request => {
      return client.deleteCoreV1CollectionNamespacedSecret(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_SECRETS_KEY, response.path.namespace]
      });
    }
  });
}
export function useReadCoreV1NamespacedSecretQuery(params: ReadCoreV1NamespacedSecretRequest) {
  const client = useKubernetes().client;
  return useQuery<Secret, Error>({
    queryKey: [...API_V1_NAMESPACES_NAMESPACE_SECRETS_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.readCoreV1NamespacedSecret(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useReplaceCoreV1NamespacedSecret() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Secret, Error, ReplaceCoreV1NamespacedSecretRequest>({
    mutationFn: async request => {
      return client.replaceCoreV1NamespacedSecret(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_SECRETS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useDeleteCoreV1NamespacedSecret() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteCoreV1NamespacedSecretRequest>({
    mutationFn: async request => {
      return client.deleteCoreV1NamespacedSecret(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_SECRETS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function usePatchCoreV1NamespacedSecret() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Secret, Error, PatchCoreV1NamespacedSecretRequest>({
    mutationFn: async request => {
      return client.patchCoreV1NamespacedSecret(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_SECRETS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useListCoreV1NamespacedServiceAccountQuery(params: ListCoreV1NamespacedServiceAccountRequest) {
  const client = useKubernetes().client;
  return useQuery<ServiceAccountList, Error>({
    queryKey: [...API_V1_NAMESPACES_NAMESPACE_SERVICEACCOUNTS_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.listCoreV1NamespacedServiceAccount(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useCreateCoreV1NamespacedServiceAccount() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<ServiceAccount, Error, CreateCoreV1NamespacedServiceAccountRequest>({
    mutationFn: async request => {
      return client.createCoreV1NamespacedServiceAccount(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_SERVICEACCOUNTS_KEY, response.path.namespace]
      });
    }
  });
}
export function useDeleteCoreV1CollectionNamespacedServiceAccount() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteCoreV1CollectionNamespacedServiceAccountRequest>({
    mutationFn: async request => {
      return client.deleteCoreV1CollectionNamespacedServiceAccount(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_SERVICEACCOUNTS_KEY, response.path.namespace]
      });
    }
  });
}
export function useReadCoreV1NamespacedServiceAccountQuery(params: ReadCoreV1NamespacedServiceAccountRequest) {
  const client = useKubernetes().client;
  return useQuery<ServiceAccount, Error>({
    queryKey: [...API_V1_NAMESPACES_NAMESPACE_SERVICEACCOUNTS_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.readCoreV1NamespacedServiceAccount(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useReplaceCoreV1NamespacedServiceAccount() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<ServiceAccount, Error, ReplaceCoreV1NamespacedServiceAccountRequest>({
    mutationFn: async request => {
      return client.replaceCoreV1NamespacedServiceAccount(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_SERVICEACCOUNTS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useDeleteCoreV1NamespacedServiceAccount() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<ServiceAccount, Error, DeleteCoreV1NamespacedServiceAccountRequest>({
    mutationFn: async request => {
      return client.deleteCoreV1NamespacedServiceAccount(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_SERVICEACCOUNTS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function usePatchCoreV1NamespacedServiceAccount() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<ServiceAccount, Error, PatchCoreV1NamespacedServiceAccountRequest>({
    mutationFn: async request => {
      return client.patchCoreV1NamespacedServiceAccount(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_SERVICEACCOUNTS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useCreateCoreV1NamespacedServiceAccountToken() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<TokenRequest, Error, CreateCoreV1NamespacedServiceAccountTokenRequest>({
    mutationFn: async request => {
      return client.createCoreV1NamespacedServiceAccountToken(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_SERVICEACCOUNTS_NAME_TOKEN_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useListCoreV1NamespacedServiceQuery(params: ListCoreV1NamespacedServiceRequest) {
  const client = useKubernetes().client;
  return useQuery<ServiceList, Error>({
    queryKey: [...API_V1_NAMESPACES_NAMESPACE_SERVICES_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.listCoreV1NamespacedService(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useCreateCoreV1NamespacedService() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Service, Error, CreateCoreV1NamespacedServiceRequest>({
    mutationFn: async request => {
      return client.createCoreV1NamespacedService(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_SERVICES_KEY, response.path.namespace]
      });
    }
  });
}
export function useReadCoreV1NamespacedServiceQuery(params: ReadCoreV1NamespacedServiceRequest) {
  const client = useKubernetes().client;
  return useQuery<Service, Error>({
    queryKey: [...API_V1_NAMESPACES_NAMESPACE_SERVICES_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.readCoreV1NamespacedService(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useReplaceCoreV1NamespacedService() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Service, Error, ReplaceCoreV1NamespacedServiceRequest>({
    mutationFn: async request => {
      return client.replaceCoreV1NamespacedService(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_SERVICES_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useDeleteCoreV1NamespacedService() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteCoreV1NamespacedServiceRequest>({
    mutationFn: async request => {
      return client.deleteCoreV1NamespacedService(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_SERVICES_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function usePatchCoreV1NamespacedService() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Service, Error, PatchCoreV1NamespacedServiceRequest>({
    mutationFn: async request => {
      return client.patchCoreV1NamespacedService(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_SERVICES_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useConnectCoreV1GetNamespacedServiceProxyQuery(params: ConnectCoreV1GetNamespacedServiceProxyRequest) {
  const client = useKubernetes().client;
  return useQuery<string, Error>({
    queryKey: [...API_V1_NAMESPACES_NAMESPACE_SERVICES_NAME_PROXY_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.connectCoreV1GetNamespacedServiceProxy(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useConnectCoreV1PostNamespacedServiceProxy() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<string, Error, ConnectCoreV1PostNamespacedServiceProxyRequest>({
    mutationFn: async request => {
      return client.connectCoreV1PostNamespacedServiceProxy(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_SERVICES_NAME_PROXY_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useConnectCoreV1PutNamespacedServiceProxy() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<string, Error, ConnectCoreV1PutNamespacedServiceProxyRequest>({
    mutationFn: async request => {
      return client.connectCoreV1PutNamespacedServiceProxy(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_SERVICES_NAME_PROXY_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useConnectCoreV1DeleteNamespacedServiceProxy() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<string, Error, ConnectCoreV1DeleteNamespacedServiceProxyRequest>({
    mutationFn: async request => {
      return client.connectCoreV1DeleteNamespacedServiceProxy(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_SERVICES_NAME_PROXY_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useConnectCoreV1PatchNamespacedServiceProxy() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<string, Error, ConnectCoreV1PatchNamespacedServiceProxyRequest>({
    mutationFn: async request => {
      return client.connectCoreV1PatchNamespacedServiceProxy(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_SERVICES_NAME_PROXY_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useConnectCoreV1GetNamespacedServiceProxyWithPathQuery(params: ConnectCoreV1GetNamespacedServiceProxyWithPathRequest) {
  const client = useKubernetes().client;
  return useQuery<string, Error>({
    queryKey: [...API_V1_NAMESPACES_NAMESPACE_SERVICES_NAME_PROXY_PATH_KEY, params.path.name, params.path.namespace, params.path.path],
    queryFn: async () => {
      return await client.connectCoreV1GetNamespacedServiceProxyWithPath(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined && params.path.path !== undefined
  });
}
export function useConnectCoreV1PostNamespacedServiceProxyWithPath() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<string, Error, ConnectCoreV1PostNamespacedServiceProxyWithPathRequest>({
    mutationFn: async request => {
      return client.connectCoreV1PostNamespacedServiceProxyWithPath(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_SERVICES_NAME_PROXY_PATH_KEY, response.path.name, response.path.namespace, response.path.path]
      });
    }
  });
}
export function useConnectCoreV1PutNamespacedServiceProxyWithPath() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<string, Error, ConnectCoreV1PutNamespacedServiceProxyWithPathRequest>({
    mutationFn: async request => {
      return client.connectCoreV1PutNamespacedServiceProxyWithPath(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_SERVICES_NAME_PROXY_PATH_KEY, response.path.name, response.path.namespace, response.path.path]
      });
    }
  });
}
export function useConnectCoreV1DeleteNamespacedServiceProxyWithPath() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<string, Error, ConnectCoreV1DeleteNamespacedServiceProxyWithPathRequest>({
    mutationFn: async request => {
      return client.connectCoreV1DeleteNamespacedServiceProxyWithPath(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_SERVICES_NAME_PROXY_PATH_KEY, response.path.name, response.path.namespace, response.path.path]
      });
    }
  });
}
export function useConnectCoreV1PatchNamespacedServiceProxyWithPath() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<string, Error, ConnectCoreV1PatchNamespacedServiceProxyWithPathRequest>({
    mutationFn: async request => {
      return client.connectCoreV1PatchNamespacedServiceProxyWithPath(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_SERVICES_NAME_PROXY_PATH_KEY, response.path.name, response.path.namespace, response.path.path]
      });
    }
  });
}
export function useReadCoreV1NamespacedServiceStatusQuery(params: ReadCoreV1NamespacedServiceStatusRequest) {
  const client = useKubernetes().client;
  return useQuery<Service, Error>({
    queryKey: [...API_V1_NAMESPACES_NAMESPACE_SERVICES_NAME_STATUS_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.readCoreV1NamespacedServiceStatus(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useReplaceCoreV1NamespacedServiceStatus() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Service, Error, ReplaceCoreV1NamespacedServiceStatusRequest>({
    mutationFn: async request => {
      return client.replaceCoreV1NamespacedServiceStatus(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_SERVICES_NAME_STATUS_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function usePatchCoreV1NamespacedServiceStatus() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Service, Error, PatchCoreV1NamespacedServiceStatusRequest>({
    mutationFn: async request => {
      return client.patchCoreV1NamespacedServiceStatus(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAMESPACE_SERVICES_NAME_STATUS_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useReadCoreV1NamespaceQuery(params: ReadCoreV1NamespaceRequest) {
  const client = useKubernetes().client;
  return useQuery<Namespace, Error>({
    queryKey: [...API_V1_NAMESPACES_NAME_KEY, params.path.name],
    queryFn: async () => {
      return await client.readCoreV1Namespace(params);
    },
    enabled: params.path.name !== undefined
  });
}
export function useReplaceCoreV1Namespace() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Namespace, Error, ReplaceCoreV1NamespaceRequest>({
    mutationFn: async request => {
      return client.replaceCoreV1Namespace(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAME_KEY, response.path.name]
      });
    }
  });
}
export function useDeleteCoreV1Namespace() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteCoreV1NamespaceRequest>({
    mutationFn: async request => {
      return client.deleteCoreV1Namespace(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAME_KEY, response.path.name]
      });
    }
  });
}
export function usePatchCoreV1Namespace() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Namespace, Error, PatchCoreV1NamespaceRequest>({
    mutationFn: async request => {
      return client.patchCoreV1Namespace(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAME_KEY, response.path.name]
      });
    }
  });
}
export function useReplaceCoreV1NamespaceFinalize() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Namespace, Error, ReplaceCoreV1NamespaceFinalizeRequest>({
    mutationFn: async request => {
      return client.replaceCoreV1NamespaceFinalize(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAME_FINALIZE_KEY, response.path.name]
      });
    }
  });
}
export function useReadCoreV1NamespaceStatusQuery(params: ReadCoreV1NamespaceStatusRequest) {
  const client = useKubernetes().client;
  return useQuery<Namespace, Error>({
    queryKey: [...API_V1_NAMESPACES_NAME_STATUS_KEY, params.path.name],
    queryFn: async () => {
      return await client.readCoreV1NamespaceStatus(params);
    },
    enabled: params.path.name !== undefined
  });
}
export function useReplaceCoreV1NamespaceStatus() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Namespace, Error, ReplaceCoreV1NamespaceStatusRequest>({
    mutationFn: async request => {
      return client.replaceCoreV1NamespaceStatus(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAME_STATUS_KEY, response.path.name]
      });
    }
  });
}
export function usePatchCoreV1NamespaceStatus() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Namespace, Error, PatchCoreV1NamespaceStatusRequest>({
    mutationFn: async request => {
      return client.patchCoreV1NamespaceStatus(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NAMESPACES_NAME_STATUS_KEY, response.path.name]
      });
    }
  });
}
export function useListCoreV1NodeQuery(params: ListCoreV1NodeRequest) {
  const client = useKubernetes().client;
  return useQuery<NodeList, Error>({
    queryKey: [...API_V1_NODES_KEY],
    queryFn: async () => {
      return await client.listCoreV1Node(params);
    },
    enabled: true
  });
}
export function useCreateCoreV1Node() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Node, Error, CreateCoreV1NodeRequest>({
    mutationFn: async request => {
      return client.createCoreV1Node(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NODES_KEY]
      });
    }
  });
}
export function useDeleteCoreV1CollectionNode() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteCoreV1CollectionNodeRequest>({
    mutationFn: async request => {
      return client.deleteCoreV1CollectionNode(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NODES_KEY]
      });
    }
  });
}
export function useReadCoreV1NodeQuery(params: ReadCoreV1NodeRequest) {
  const client = useKubernetes().client;
  return useQuery<Node, Error>({
    queryKey: [...API_V1_NODES_NAME_KEY, params.path.name],
    queryFn: async () => {
      return await client.readCoreV1Node(params);
    },
    enabled: params.path.name !== undefined
  });
}
export function useReplaceCoreV1Node() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Node, Error, ReplaceCoreV1NodeRequest>({
    mutationFn: async request => {
      return client.replaceCoreV1Node(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NODES_NAME_KEY, response.path.name]
      });
    }
  });
}
export function useDeleteCoreV1Node() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteCoreV1NodeRequest>({
    mutationFn: async request => {
      return client.deleteCoreV1Node(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NODES_NAME_KEY, response.path.name]
      });
    }
  });
}
export function usePatchCoreV1Node() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Node, Error, PatchCoreV1NodeRequest>({
    mutationFn: async request => {
      return client.patchCoreV1Node(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NODES_NAME_KEY, response.path.name]
      });
    }
  });
}
export function useConnectCoreV1GetNodeProxyQuery(params: ConnectCoreV1GetNodeProxyRequest) {
  const client = useKubernetes().client;
  return useQuery<string, Error>({
    queryKey: [...API_V1_NODES_NAME_PROXY_KEY, params.path.name],
    queryFn: async () => {
      return await client.connectCoreV1GetNodeProxy(params);
    },
    enabled: params.path.name !== undefined
  });
}
export function useConnectCoreV1PostNodeProxy() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<string, Error, ConnectCoreV1PostNodeProxyRequest>({
    mutationFn: async request => {
      return client.connectCoreV1PostNodeProxy(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NODES_NAME_PROXY_KEY, response.path.name]
      });
    }
  });
}
export function useConnectCoreV1PutNodeProxy() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<string, Error, ConnectCoreV1PutNodeProxyRequest>({
    mutationFn: async request => {
      return client.connectCoreV1PutNodeProxy(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NODES_NAME_PROXY_KEY, response.path.name]
      });
    }
  });
}
export function useConnectCoreV1DeleteNodeProxy() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<string, Error, ConnectCoreV1DeleteNodeProxyRequest>({
    mutationFn: async request => {
      return client.connectCoreV1DeleteNodeProxy(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NODES_NAME_PROXY_KEY, response.path.name]
      });
    }
  });
}
export function useConnectCoreV1PatchNodeProxy() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<string, Error, ConnectCoreV1PatchNodeProxyRequest>({
    mutationFn: async request => {
      return client.connectCoreV1PatchNodeProxy(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NODES_NAME_PROXY_KEY, response.path.name]
      });
    }
  });
}
export function useConnectCoreV1GetNodeProxyWithPathQuery(params: ConnectCoreV1GetNodeProxyWithPathRequest) {
  const client = useKubernetes().client;
  return useQuery<string, Error>({
    queryKey: [...API_V1_NODES_NAME_PROXY_PATH_KEY, params.path.name, params.path.path],
    queryFn: async () => {
      return await client.connectCoreV1GetNodeProxyWithPath(params);
    },
    enabled: params.path.name !== undefined && params.path.path !== undefined
  });
}
export function useConnectCoreV1PostNodeProxyWithPath() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<string, Error, ConnectCoreV1PostNodeProxyWithPathRequest>({
    mutationFn: async request => {
      return client.connectCoreV1PostNodeProxyWithPath(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NODES_NAME_PROXY_PATH_KEY, response.path.name, response.path.path]
      });
    }
  });
}
export function useConnectCoreV1PutNodeProxyWithPath() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<string, Error, ConnectCoreV1PutNodeProxyWithPathRequest>({
    mutationFn: async request => {
      return client.connectCoreV1PutNodeProxyWithPath(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NODES_NAME_PROXY_PATH_KEY, response.path.name, response.path.path]
      });
    }
  });
}
export function useConnectCoreV1DeleteNodeProxyWithPath() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<string, Error, ConnectCoreV1DeleteNodeProxyWithPathRequest>({
    mutationFn: async request => {
      return client.connectCoreV1DeleteNodeProxyWithPath(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NODES_NAME_PROXY_PATH_KEY, response.path.name, response.path.path]
      });
    }
  });
}
export function useConnectCoreV1PatchNodeProxyWithPath() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<string, Error, ConnectCoreV1PatchNodeProxyWithPathRequest>({
    mutationFn: async request => {
      return client.connectCoreV1PatchNodeProxyWithPath(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NODES_NAME_PROXY_PATH_KEY, response.path.name, response.path.path]
      });
    }
  });
}
export function useReadCoreV1NodeStatusQuery(params: ReadCoreV1NodeStatusRequest) {
  const client = useKubernetes().client;
  return useQuery<Node, Error>({
    queryKey: [...API_V1_NODES_NAME_STATUS_KEY, params.path.name],
    queryFn: async () => {
      return await client.readCoreV1NodeStatus(params);
    },
    enabled: params.path.name !== undefined
  });
}
export function useReplaceCoreV1NodeStatus() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Node, Error, ReplaceCoreV1NodeStatusRequest>({
    mutationFn: async request => {
      return client.replaceCoreV1NodeStatus(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NODES_NAME_STATUS_KEY, response.path.name]
      });
    }
  });
}
export function usePatchCoreV1NodeStatus() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Node, Error, PatchCoreV1NodeStatusRequest>({
    mutationFn: async request => {
      return client.patchCoreV1NodeStatus(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_NODES_NAME_STATUS_KEY, response.path.name]
      });
    }
  });
}
export function useListCoreV1PersistentVolumeClaimForAllNamespacesQuery(params: ListCoreV1PersistentVolumeClaimForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<PersistentVolumeClaimList, Error>({
    queryKey: [...API_V1_PERSISTENTVOLUMECLAIMS_KEY],
    queryFn: async () => {
      return await client.listCoreV1PersistentVolumeClaimForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useListCoreV1PersistentVolumeQuery(params: ListCoreV1PersistentVolumeRequest) {
  const client = useKubernetes().client;
  return useQuery<PersistentVolumeList, Error>({
    queryKey: [...API_V1_PERSISTENTVOLUMES_KEY],
    queryFn: async () => {
      return await client.listCoreV1PersistentVolume(params);
    },
    enabled: true
  });
}
export function useCreateCoreV1PersistentVolume() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<PersistentVolume, Error, CreateCoreV1PersistentVolumeRequest>({
    mutationFn: async request => {
      return client.createCoreV1PersistentVolume(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_PERSISTENTVOLUMES_KEY]
      });
    }
  });
}
export function useDeleteCoreV1CollectionPersistentVolume() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteCoreV1CollectionPersistentVolumeRequest>({
    mutationFn: async request => {
      return client.deleteCoreV1CollectionPersistentVolume(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_PERSISTENTVOLUMES_KEY]
      });
    }
  });
}
export function useReadCoreV1PersistentVolumeQuery(params: ReadCoreV1PersistentVolumeRequest) {
  const client = useKubernetes().client;
  return useQuery<PersistentVolume, Error>({
    queryKey: [...API_V1_PERSISTENTVOLUMES_NAME_KEY, params.path.name],
    queryFn: async () => {
      return await client.readCoreV1PersistentVolume(params);
    },
    enabled: params.path.name !== undefined
  });
}
export function useReplaceCoreV1PersistentVolume() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<PersistentVolume, Error, ReplaceCoreV1PersistentVolumeRequest>({
    mutationFn: async request => {
      return client.replaceCoreV1PersistentVolume(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_PERSISTENTVOLUMES_NAME_KEY, response.path.name]
      });
    }
  });
}
export function useDeleteCoreV1PersistentVolume() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<PersistentVolume, Error, DeleteCoreV1PersistentVolumeRequest>({
    mutationFn: async request => {
      return client.deleteCoreV1PersistentVolume(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_PERSISTENTVOLUMES_NAME_KEY, response.path.name]
      });
    }
  });
}
export function usePatchCoreV1PersistentVolume() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<PersistentVolume, Error, PatchCoreV1PersistentVolumeRequest>({
    mutationFn: async request => {
      return client.patchCoreV1PersistentVolume(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_PERSISTENTVOLUMES_NAME_KEY, response.path.name]
      });
    }
  });
}
export function useReadCoreV1PersistentVolumeStatusQuery(params: ReadCoreV1PersistentVolumeStatusRequest) {
  const client = useKubernetes().client;
  return useQuery<PersistentVolume, Error>({
    queryKey: [...API_V1_PERSISTENTVOLUMES_NAME_STATUS_KEY, params.path.name],
    queryFn: async () => {
      return await client.readCoreV1PersistentVolumeStatus(params);
    },
    enabled: params.path.name !== undefined
  });
}
export function useReplaceCoreV1PersistentVolumeStatus() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<PersistentVolume, Error, ReplaceCoreV1PersistentVolumeStatusRequest>({
    mutationFn: async request => {
      return client.replaceCoreV1PersistentVolumeStatus(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_PERSISTENTVOLUMES_NAME_STATUS_KEY, response.path.name]
      });
    }
  });
}
export function usePatchCoreV1PersistentVolumeStatus() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<PersistentVolume, Error, PatchCoreV1PersistentVolumeStatusRequest>({
    mutationFn: async request => {
      return client.patchCoreV1PersistentVolumeStatus(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...API_V1_PERSISTENTVOLUMES_NAME_STATUS_KEY, response.path.name]
      });
    }
  });
}
export function useListCoreV1PodForAllNamespacesQuery(params: ListCoreV1PodForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<PodList, Error>({
    queryKey: [...API_V1_PODS_KEY],
    queryFn: async () => {
      return await client.listCoreV1PodForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useListCoreV1PodTemplateForAllNamespacesQuery(params: ListCoreV1PodTemplateForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<PodTemplateList, Error>({
    queryKey: [...API_V1_PODTEMPLATES_KEY],
    queryFn: async () => {
      return await client.listCoreV1PodTemplateForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useListCoreV1ReplicationControllerForAllNamespacesQuery(params: ListCoreV1ReplicationControllerForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<ReplicationControllerList, Error>({
    queryKey: [...API_V1_REPLICATIONCONTROLLERS_KEY],
    queryFn: async () => {
      return await client.listCoreV1ReplicationControllerForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useListCoreV1ResourceQuotaForAllNamespacesQuery(params: ListCoreV1ResourceQuotaForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<ResourceQuotaList, Error>({
    queryKey: [...API_V1_RESOURCEQUOTAS_KEY],
    queryFn: async () => {
      return await client.listCoreV1ResourceQuotaForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useListCoreV1SecretForAllNamespacesQuery(params: ListCoreV1SecretForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<SecretList, Error>({
    queryKey: [...API_V1_SECRETS_KEY],
    queryFn: async () => {
      return await client.listCoreV1SecretForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useListCoreV1ServiceAccountForAllNamespacesQuery(params: ListCoreV1ServiceAccountForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<ServiceAccountList, Error>({
    queryKey: [...API_V1_SERVICEACCOUNTS_KEY],
    queryFn: async () => {
      return await client.listCoreV1ServiceAccountForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useListCoreV1ServiceForAllNamespacesQuery(params: ListCoreV1ServiceForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<ServiceList, Error>({
    queryKey: [...API_V1_SERVICES_KEY],
    queryFn: async () => {
      return await client.listCoreV1ServiceForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useWatchCoreV1ConfigMapListForAllNamespacesQuery(params: WatchCoreV1ConfigMapListForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...API_V1_WATCH_CONFIGMAPS_KEY],
    queryFn: async () => {
      return await client.watchCoreV1ConfigMapListForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useWatchCoreV1EndpointsListForAllNamespacesQuery(params: WatchCoreV1EndpointsListForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...API_V1_WATCH_ENDPOINTS_KEY],
    queryFn: async () => {
      return await client.watchCoreV1EndpointsListForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useWatchCoreV1EventListForAllNamespacesQuery(params: WatchCoreV1EventListForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...API_V1_WATCH_EVENTS_KEY],
    queryFn: async () => {
      return await client.watchCoreV1EventListForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useWatchCoreV1LimitRangeListForAllNamespacesQuery(params: WatchCoreV1LimitRangeListForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...API_V1_WATCH_LIMITRANGES_KEY],
    queryFn: async () => {
      return await client.watchCoreV1LimitRangeListForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useWatchCoreV1NamespaceListQuery(params: WatchCoreV1NamespaceListRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...API_V1_WATCH_NAMESPACES_KEY],
    queryFn: async () => {
      return await client.watchCoreV1NamespaceList(params);
    },
    enabled: true
  });
}
export function useWatchCoreV1NamespacedConfigMapListQuery(params: WatchCoreV1NamespacedConfigMapListRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...API_V1_WATCH_NAMESPACES_NAMESPACE_CONFIGMAPS_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.watchCoreV1NamespacedConfigMapList(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useWatchCoreV1NamespacedConfigMapQuery(params: WatchCoreV1NamespacedConfigMapRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...API_V1_WATCH_NAMESPACES_NAMESPACE_CONFIGMAPS_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.watchCoreV1NamespacedConfigMap(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useWatchCoreV1NamespacedEndpointsListQuery(params: WatchCoreV1NamespacedEndpointsListRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...API_V1_WATCH_NAMESPACES_NAMESPACE_ENDPOINTS_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.watchCoreV1NamespacedEndpointsList(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useWatchCoreV1NamespacedEndpointsQuery(params: WatchCoreV1NamespacedEndpointsRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...API_V1_WATCH_NAMESPACES_NAMESPACE_ENDPOINTS_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.watchCoreV1NamespacedEndpoints(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useWatchCoreV1NamespacedEventListQuery(params: WatchCoreV1NamespacedEventListRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...API_V1_WATCH_NAMESPACES_NAMESPACE_EVENTS_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.watchCoreV1NamespacedEventList(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useWatchCoreV1NamespacedEventQuery(params: WatchCoreV1NamespacedEventRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...API_V1_WATCH_NAMESPACES_NAMESPACE_EVENTS_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.watchCoreV1NamespacedEvent(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useWatchCoreV1NamespacedLimitRangeListQuery(params: WatchCoreV1NamespacedLimitRangeListRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...API_V1_WATCH_NAMESPACES_NAMESPACE_LIMITRANGES_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.watchCoreV1NamespacedLimitRangeList(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useWatchCoreV1NamespacedLimitRangeQuery(params: WatchCoreV1NamespacedLimitRangeRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...API_V1_WATCH_NAMESPACES_NAMESPACE_LIMITRANGES_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.watchCoreV1NamespacedLimitRange(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useWatchCoreV1NamespacedPersistentVolumeClaimListQuery(params: WatchCoreV1NamespacedPersistentVolumeClaimListRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...API_V1_WATCH_NAMESPACES_NAMESPACE_PERSISTENTVOLUMECLAIMS_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.watchCoreV1NamespacedPersistentVolumeClaimList(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useWatchCoreV1NamespacedPersistentVolumeClaimQuery(params: WatchCoreV1NamespacedPersistentVolumeClaimRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...API_V1_WATCH_NAMESPACES_NAMESPACE_PERSISTENTVOLUMECLAIMS_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.watchCoreV1NamespacedPersistentVolumeClaim(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useWatchCoreV1NamespacedPodListQuery(params: WatchCoreV1NamespacedPodListRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...API_V1_WATCH_NAMESPACES_NAMESPACE_PODS_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.watchCoreV1NamespacedPodList(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useWatchCoreV1NamespacedPodQuery(params: WatchCoreV1NamespacedPodRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...API_V1_WATCH_NAMESPACES_NAMESPACE_PODS_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.watchCoreV1NamespacedPod(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useWatchCoreV1NamespacedPodTemplateListQuery(params: WatchCoreV1NamespacedPodTemplateListRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...API_V1_WATCH_NAMESPACES_NAMESPACE_PODTEMPLATES_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.watchCoreV1NamespacedPodTemplateList(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useWatchCoreV1NamespacedPodTemplateQuery(params: WatchCoreV1NamespacedPodTemplateRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...API_V1_WATCH_NAMESPACES_NAMESPACE_PODTEMPLATES_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.watchCoreV1NamespacedPodTemplate(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useWatchCoreV1NamespacedReplicationControllerListQuery(params: WatchCoreV1NamespacedReplicationControllerListRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...API_V1_WATCH_NAMESPACES_NAMESPACE_REPLICATIONCONTROLLERS_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.watchCoreV1NamespacedReplicationControllerList(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useWatchCoreV1NamespacedReplicationControllerQuery(params: WatchCoreV1NamespacedReplicationControllerRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...API_V1_WATCH_NAMESPACES_NAMESPACE_REPLICATIONCONTROLLERS_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.watchCoreV1NamespacedReplicationController(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useWatchCoreV1NamespacedResourceQuotaListQuery(params: WatchCoreV1NamespacedResourceQuotaListRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...API_V1_WATCH_NAMESPACES_NAMESPACE_RESOURCEQUOTAS_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.watchCoreV1NamespacedResourceQuotaList(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useWatchCoreV1NamespacedResourceQuotaQuery(params: WatchCoreV1NamespacedResourceQuotaRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...API_V1_WATCH_NAMESPACES_NAMESPACE_RESOURCEQUOTAS_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.watchCoreV1NamespacedResourceQuota(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useWatchCoreV1NamespacedSecretListQuery(params: WatchCoreV1NamespacedSecretListRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...API_V1_WATCH_NAMESPACES_NAMESPACE_SECRETS_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.watchCoreV1NamespacedSecretList(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useWatchCoreV1NamespacedSecretQuery(params: WatchCoreV1NamespacedSecretRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...API_V1_WATCH_NAMESPACES_NAMESPACE_SECRETS_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.watchCoreV1NamespacedSecret(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useWatchCoreV1NamespacedServiceAccountListQuery(params: WatchCoreV1NamespacedServiceAccountListRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...API_V1_WATCH_NAMESPACES_NAMESPACE_SERVICEACCOUNTS_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.watchCoreV1NamespacedServiceAccountList(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useWatchCoreV1NamespacedServiceAccountQuery(params: WatchCoreV1NamespacedServiceAccountRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...API_V1_WATCH_NAMESPACES_NAMESPACE_SERVICEACCOUNTS_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.watchCoreV1NamespacedServiceAccount(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useWatchCoreV1NamespacedServiceListQuery(params: WatchCoreV1NamespacedServiceListRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...API_V1_WATCH_NAMESPACES_NAMESPACE_SERVICES_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.watchCoreV1NamespacedServiceList(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useWatchCoreV1NamespacedServiceQuery(params: WatchCoreV1NamespacedServiceRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...API_V1_WATCH_NAMESPACES_NAMESPACE_SERVICES_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.watchCoreV1NamespacedService(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useWatchCoreV1NamespaceQuery(params: WatchCoreV1NamespaceRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...API_V1_WATCH_NAMESPACES_NAME_KEY, params.path.name],
    queryFn: async () => {
      return await client.watchCoreV1Namespace(params);
    },
    enabled: params.path.name !== undefined
  });
}
export function useWatchCoreV1NodeListQuery(params: WatchCoreV1NodeListRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...API_V1_WATCH_NODES_KEY],
    queryFn: async () => {
      return await client.watchCoreV1NodeList(params);
    },
    enabled: true
  });
}
export function useWatchCoreV1NodeQuery(params: WatchCoreV1NodeRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...API_V1_WATCH_NODES_NAME_KEY, params.path.name],
    queryFn: async () => {
      return await client.watchCoreV1Node(params);
    },
    enabled: params.path.name !== undefined
  });
}
export function useWatchCoreV1PersistentVolumeClaimListForAllNamespacesQuery(params: WatchCoreV1PersistentVolumeClaimListForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...API_V1_WATCH_PERSISTENTVOLUMECLAIMS_KEY],
    queryFn: async () => {
      return await client.watchCoreV1PersistentVolumeClaimListForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useWatchCoreV1PersistentVolumeListQuery(params: WatchCoreV1PersistentVolumeListRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...API_V1_WATCH_PERSISTENTVOLUMES_KEY],
    queryFn: async () => {
      return await client.watchCoreV1PersistentVolumeList(params);
    },
    enabled: true
  });
}
export function useWatchCoreV1PersistentVolumeQuery(params: WatchCoreV1PersistentVolumeRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...API_V1_WATCH_PERSISTENTVOLUMES_NAME_KEY, params.path.name],
    queryFn: async () => {
      return await client.watchCoreV1PersistentVolume(params);
    },
    enabled: params.path.name !== undefined
  });
}
export function useWatchCoreV1PodListForAllNamespacesQuery(params: WatchCoreV1PodListForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...API_V1_WATCH_PODS_KEY],
    queryFn: async () => {
      return await client.watchCoreV1PodListForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useWatchCoreV1PodTemplateListForAllNamespacesQuery(params: WatchCoreV1PodTemplateListForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...API_V1_WATCH_PODTEMPLATES_KEY],
    queryFn: async () => {
      return await client.watchCoreV1PodTemplateListForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useWatchCoreV1ReplicationControllerListForAllNamespacesQuery(params: WatchCoreV1ReplicationControllerListForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...API_V1_WATCH_REPLICATIONCONTROLLERS_KEY],
    queryFn: async () => {
      return await client.watchCoreV1ReplicationControllerListForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useWatchCoreV1ResourceQuotaListForAllNamespacesQuery(params: WatchCoreV1ResourceQuotaListForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...API_V1_WATCH_RESOURCEQUOTAS_KEY],
    queryFn: async () => {
      return await client.watchCoreV1ResourceQuotaListForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useWatchCoreV1SecretListForAllNamespacesQuery(params: WatchCoreV1SecretListForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...API_V1_WATCH_SECRETS_KEY],
    queryFn: async () => {
      return await client.watchCoreV1SecretListForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useWatchCoreV1ServiceAccountListForAllNamespacesQuery(params: WatchCoreV1ServiceAccountListForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...API_V1_WATCH_SERVICEACCOUNTS_KEY],
    queryFn: async () => {
      return await client.watchCoreV1ServiceAccountListForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useWatchCoreV1ServiceListForAllNamespacesQuery(params: WatchCoreV1ServiceListForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...API_V1_WATCH_SERVICES_KEY],
    queryFn: async () => {
      return await client.watchCoreV1ServiceListForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useGetAPIVersionsQuery(params: GetAPIVersionsRequest) {
  const client = useKubernetes().client;
  return useQuery<APIGroupList, Error>({
    queryKey: [...APIS_KEY],
    queryFn: async () => {
      return await client.getAPIVersions(params);
    },
    enabled: true
  });
}
export function useGetAdmissionregistrationAPIGroupQuery(params: GetAdmissionregistrationAPIGroupRequest) {
  const client = useKubernetes().client;
  return useQuery<APIGroup, Error>({
    queryKey: [...APIS_ADMISSIONREGISTRATION_K8S_IO_KEY],
    queryFn: async () => {
      return await client.getAdmissionregistrationAPIGroup(params);
    },
    enabled: true
  });
}
export function useGetAdmissionregistrationV1APIResourcesQuery(params: GetAdmissionregistrationV1APIResourcesRequest) {
  const client = useKubernetes().client;
  return useQuery<APIResourceList, Error>({
    queryKey: [...APIS_ADMISSIONREGISTRATION_K8S_IO_V1_KEY],
    queryFn: async () => {
      return await client.getAdmissionregistrationV1APIResources(params);
    },
    enabled: true
  });
}
export function useListAdmissionregistrationV1MutatingWebhookConfigurationQuery(params: ListAdmissionregistrationV1MutatingWebhookConfigurationRequest) {
  const client = useKubernetes().client;
  return useQuery<MutatingWebhookConfigurationList, Error>({
    queryKey: [...APIS_ADMISSIONREGISTRATION_K8S_IO_V1_MUTATINGWEBHOOKCONFIGURATIONS_KEY],
    queryFn: async () => {
      return await client.listAdmissionregistrationV1MutatingWebhookConfiguration(params);
    },
    enabled: true
  });
}
export function useCreateAdmissionregistrationV1MutatingWebhookConfiguration() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<MutatingWebhookConfiguration, Error, CreateAdmissionregistrationV1MutatingWebhookConfigurationRequest>({
    mutationFn: async request => {
      return client.createAdmissionregistrationV1MutatingWebhookConfiguration(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_ADMISSIONREGISTRATION_K8S_IO_V1_MUTATINGWEBHOOKCONFIGURATIONS_KEY]
      });
    }
  });
}
export function useDeleteAdmissionregistrationV1CollectionMutatingWebhookConfiguration() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationRequest>({
    mutationFn: async request => {
      return client.deleteAdmissionregistrationV1CollectionMutatingWebhookConfiguration(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_ADMISSIONREGISTRATION_K8S_IO_V1_MUTATINGWEBHOOKCONFIGURATIONS_KEY]
      });
    }
  });
}
export function useReadAdmissionregistrationV1MutatingWebhookConfigurationQuery(params: ReadAdmissionregistrationV1MutatingWebhookConfigurationRequest) {
  const client = useKubernetes().client;
  return useQuery<MutatingWebhookConfiguration, Error>({
    queryKey: [...APIS_ADMISSIONREGISTRATION_K8S_IO_V1_MUTATINGWEBHOOKCONFIGURATIONS_NAME_KEY, params.path.name],
    queryFn: async () => {
      return await client.readAdmissionregistrationV1MutatingWebhookConfiguration(params);
    },
    enabled: params.path.name !== undefined
  });
}
export function useReplaceAdmissionregistrationV1MutatingWebhookConfiguration() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<MutatingWebhookConfiguration, Error, ReplaceAdmissionregistrationV1MutatingWebhookConfigurationRequest>({
    mutationFn: async request => {
      return client.replaceAdmissionregistrationV1MutatingWebhookConfiguration(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_ADMISSIONREGISTRATION_K8S_IO_V1_MUTATINGWEBHOOKCONFIGURATIONS_NAME_KEY, response.path.name]
      });
    }
  });
}
export function useDeleteAdmissionregistrationV1MutatingWebhookConfiguration() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteAdmissionregistrationV1MutatingWebhookConfigurationRequest>({
    mutationFn: async request => {
      return client.deleteAdmissionregistrationV1MutatingWebhookConfiguration(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_ADMISSIONREGISTRATION_K8S_IO_V1_MUTATINGWEBHOOKCONFIGURATIONS_NAME_KEY, response.path.name]
      });
    }
  });
}
export function usePatchAdmissionregistrationV1MutatingWebhookConfiguration() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<MutatingWebhookConfiguration, Error, PatchAdmissionregistrationV1MutatingWebhookConfigurationRequest>({
    mutationFn: async request => {
      return client.patchAdmissionregistrationV1MutatingWebhookConfiguration(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_ADMISSIONREGISTRATION_K8S_IO_V1_MUTATINGWEBHOOKCONFIGURATIONS_NAME_KEY, response.path.name]
      });
    }
  });
}
export function useListAdmissionregistrationV1ValidatingWebhookConfigurationQuery(params: ListAdmissionregistrationV1ValidatingWebhookConfigurationRequest) {
  const client = useKubernetes().client;
  return useQuery<ValidatingWebhookConfigurationList, Error>({
    queryKey: [...APIS_ADMISSIONREGISTRATION_K8S_IO_V1_VALIDATINGWEBHOOKCONFIGURATIONS_KEY],
    queryFn: async () => {
      return await client.listAdmissionregistrationV1ValidatingWebhookConfiguration(params);
    },
    enabled: true
  });
}
export function useCreateAdmissionregistrationV1ValidatingWebhookConfiguration() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<ValidatingWebhookConfiguration, Error, CreateAdmissionregistrationV1ValidatingWebhookConfigurationRequest>({
    mutationFn: async request => {
      return client.createAdmissionregistrationV1ValidatingWebhookConfiguration(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_ADMISSIONREGISTRATION_K8S_IO_V1_VALIDATINGWEBHOOKCONFIGURATIONS_KEY]
      });
    }
  });
}
export function useDeleteAdmissionregistrationV1CollectionValidatingWebhookConfiguration() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationRequest>({
    mutationFn: async request => {
      return client.deleteAdmissionregistrationV1CollectionValidatingWebhookConfiguration(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_ADMISSIONREGISTRATION_K8S_IO_V1_VALIDATINGWEBHOOKCONFIGURATIONS_KEY]
      });
    }
  });
}
export function useReadAdmissionregistrationV1ValidatingWebhookConfigurationQuery(params: ReadAdmissionregistrationV1ValidatingWebhookConfigurationRequest) {
  const client = useKubernetes().client;
  return useQuery<ValidatingWebhookConfiguration, Error>({
    queryKey: [...APIS_ADMISSIONREGISTRATION_K8S_IO_V1_VALIDATINGWEBHOOKCONFIGURATIONS_NAME_KEY, params.path.name],
    queryFn: async () => {
      return await client.readAdmissionregistrationV1ValidatingWebhookConfiguration(params);
    },
    enabled: params.path.name !== undefined
  });
}
export function useReplaceAdmissionregistrationV1ValidatingWebhookConfiguration() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<ValidatingWebhookConfiguration, Error, ReplaceAdmissionregistrationV1ValidatingWebhookConfigurationRequest>({
    mutationFn: async request => {
      return client.replaceAdmissionregistrationV1ValidatingWebhookConfiguration(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_ADMISSIONREGISTRATION_K8S_IO_V1_VALIDATINGWEBHOOKCONFIGURATIONS_NAME_KEY, response.path.name]
      });
    }
  });
}
export function useDeleteAdmissionregistrationV1ValidatingWebhookConfiguration() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteAdmissionregistrationV1ValidatingWebhookConfigurationRequest>({
    mutationFn: async request => {
      return client.deleteAdmissionregistrationV1ValidatingWebhookConfiguration(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_ADMISSIONREGISTRATION_K8S_IO_V1_VALIDATINGWEBHOOKCONFIGURATIONS_NAME_KEY, response.path.name]
      });
    }
  });
}
export function usePatchAdmissionregistrationV1ValidatingWebhookConfiguration() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<ValidatingWebhookConfiguration, Error, PatchAdmissionregistrationV1ValidatingWebhookConfigurationRequest>({
    mutationFn: async request => {
      return client.patchAdmissionregistrationV1ValidatingWebhookConfiguration(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_ADMISSIONREGISTRATION_K8S_IO_V1_VALIDATINGWEBHOOKCONFIGURATIONS_NAME_KEY, response.path.name]
      });
    }
  });
}
export function useWatchAdmissionregistrationV1MutatingWebhookConfigurationListQuery(params: WatchAdmissionregistrationV1MutatingWebhookConfigurationListRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_ADMISSIONREGISTRATION_K8S_IO_V1_WATCH_MUTATINGWEBHOOKCONFIGURATIONS_KEY],
    queryFn: async () => {
      return await client.watchAdmissionregistrationV1MutatingWebhookConfigurationList(params);
    },
    enabled: true
  });
}
export function useWatchAdmissionregistrationV1MutatingWebhookConfigurationQuery(params: WatchAdmissionregistrationV1MutatingWebhookConfigurationRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_ADMISSIONREGISTRATION_K8S_IO_V1_WATCH_MUTATINGWEBHOOKCONFIGURATIONS_NAME_KEY, params.path.name],
    queryFn: async () => {
      return await client.watchAdmissionregistrationV1MutatingWebhookConfiguration(params);
    },
    enabled: params.path.name !== undefined
  });
}
export function useWatchAdmissionregistrationV1ValidatingWebhookConfigurationListQuery(params: WatchAdmissionregistrationV1ValidatingWebhookConfigurationListRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_ADMISSIONREGISTRATION_K8S_IO_V1_WATCH_VALIDATINGWEBHOOKCONFIGURATIONS_KEY],
    queryFn: async () => {
      return await client.watchAdmissionregistrationV1ValidatingWebhookConfigurationList(params);
    },
    enabled: true
  });
}
export function useWatchAdmissionregistrationV1ValidatingWebhookConfigurationQuery(params: WatchAdmissionregistrationV1ValidatingWebhookConfigurationRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_ADMISSIONREGISTRATION_K8S_IO_V1_WATCH_VALIDATINGWEBHOOKCONFIGURATIONS_NAME_KEY, params.path.name],
    queryFn: async () => {
      return await client.watchAdmissionregistrationV1ValidatingWebhookConfiguration(params);
    },
    enabled: params.path.name !== undefined
  });
}
export function useGetApiextensionsAPIGroupQuery(params: GetApiextensionsAPIGroupRequest) {
  const client = useKubernetes().client;
  return useQuery<APIGroup, Error>({
    queryKey: [...APIS_APIEXTENSIONS_K8S_IO_KEY],
    queryFn: async () => {
      return await client.getApiextensionsAPIGroup(params);
    },
    enabled: true
  });
}
export function useGetApiextensionsV1APIResourcesQuery(params: GetApiextensionsV1APIResourcesRequest) {
  const client = useKubernetes().client;
  return useQuery<APIResourceList, Error>({
    queryKey: [...APIS_APIEXTENSIONS_K8S_IO_V1_KEY],
    queryFn: async () => {
      return await client.getApiextensionsV1APIResources(params);
    },
    enabled: true
  });
}
export function useListApiextensionsV1CustomResourceDefinitionQuery(params: ListApiextensionsV1CustomResourceDefinitionRequest) {
  const client = useKubernetes().client;
  return useQuery<CustomResourceDefinitionList, Error>({
    queryKey: [...APIS_APIEXTENSIONS_K8S_IO_V1_CUSTOMRESOURCEDEFINITIONS_KEY],
    queryFn: async () => {
      return await client.listApiextensionsV1CustomResourceDefinition(params);
    },
    enabled: true
  });
}
export function useCreateApiextensionsV1CustomResourceDefinition() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<CustomResourceDefinition, Error, CreateApiextensionsV1CustomResourceDefinitionRequest>({
    mutationFn: async request => {
      return client.createApiextensionsV1CustomResourceDefinition(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_APIEXTENSIONS_K8S_IO_V1_CUSTOMRESOURCEDEFINITIONS_KEY]
      });
    }
  });
}
export function useDeleteApiextensionsV1CollectionCustomResourceDefinition() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteApiextensionsV1CollectionCustomResourceDefinitionRequest>({
    mutationFn: async request => {
      return client.deleteApiextensionsV1CollectionCustomResourceDefinition(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_APIEXTENSIONS_K8S_IO_V1_CUSTOMRESOURCEDEFINITIONS_KEY]
      });
    }
  });
}
export function useReadApiextensionsV1CustomResourceDefinitionQuery(params: ReadApiextensionsV1CustomResourceDefinitionRequest) {
  const client = useKubernetes().client;
  return useQuery<CustomResourceDefinition, Error>({
    queryKey: [...APIS_APIEXTENSIONS_K8S_IO_V1_CUSTOMRESOURCEDEFINITIONS_NAME_KEY, params.path.name],
    queryFn: async () => {
      return await client.readApiextensionsV1CustomResourceDefinition(params);
    },
    enabled: params.path.name !== undefined
  });
}
export function useReplaceApiextensionsV1CustomResourceDefinition() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<CustomResourceDefinition, Error, ReplaceApiextensionsV1CustomResourceDefinitionRequest>({
    mutationFn: async request => {
      return client.replaceApiextensionsV1CustomResourceDefinition(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_APIEXTENSIONS_K8S_IO_V1_CUSTOMRESOURCEDEFINITIONS_NAME_KEY, response.path.name]
      });
    }
  });
}
export function useDeleteApiextensionsV1CustomResourceDefinition() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteApiextensionsV1CustomResourceDefinitionRequest>({
    mutationFn: async request => {
      return client.deleteApiextensionsV1CustomResourceDefinition(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_APIEXTENSIONS_K8S_IO_V1_CUSTOMRESOURCEDEFINITIONS_NAME_KEY, response.path.name]
      });
    }
  });
}
export function usePatchApiextensionsV1CustomResourceDefinition() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<CustomResourceDefinition, Error, PatchApiextensionsV1CustomResourceDefinitionRequest>({
    mutationFn: async request => {
      return client.patchApiextensionsV1CustomResourceDefinition(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_APIEXTENSIONS_K8S_IO_V1_CUSTOMRESOURCEDEFINITIONS_NAME_KEY, response.path.name]
      });
    }
  });
}
export function useReadApiextensionsV1CustomResourceDefinitionStatusQuery(params: ReadApiextensionsV1CustomResourceDefinitionStatusRequest) {
  const client = useKubernetes().client;
  return useQuery<CustomResourceDefinition, Error>({
    queryKey: [...APIS_APIEXTENSIONS_K8S_IO_V1_CUSTOMRESOURCEDEFINITIONS_NAME_STATUS_KEY, params.path.name],
    queryFn: async () => {
      return await client.readApiextensionsV1CustomResourceDefinitionStatus(params);
    },
    enabled: params.path.name !== undefined
  });
}
export function useReplaceApiextensionsV1CustomResourceDefinitionStatus() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<CustomResourceDefinition, Error, ReplaceApiextensionsV1CustomResourceDefinitionStatusRequest>({
    mutationFn: async request => {
      return client.replaceApiextensionsV1CustomResourceDefinitionStatus(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_APIEXTENSIONS_K8S_IO_V1_CUSTOMRESOURCEDEFINITIONS_NAME_STATUS_KEY, response.path.name]
      });
    }
  });
}
export function usePatchApiextensionsV1CustomResourceDefinitionStatus() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<CustomResourceDefinition, Error, PatchApiextensionsV1CustomResourceDefinitionStatusRequest>({
    mutationFn: async request => {
      return client.patchApiextensionsV1CustomResourceDefinitionStatus(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_APIEXTENSIONS_K8S_IO_V1_CUSTOMRESOURCEDEFINITIONS_NAME_STATUS_KEY, response.path.name]
      });
    }
  });
}
export function useWatchApiextensionsV1CustomResourceDefinitionListQuery(params: WatchApiextensionsV1CustomResourceDefinitionListRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_APIEXTENSIONS_K8S_IO_V1_WATCH_CUSTOMRESOURCEDEFINITIONS_KEY],
    queryFn: async () => {
      return await client.watchApiextensionsV1CustomResourceDefinitionList(params);
    },
    enabled: true
  });
}
export function useWatchApiextensionsV1CustomResourceDefinitionQuery(params: WatchApiextensionsV1CustomResourceDefinitionRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_APIEXTENSIONS_K8S_IO_V1_WATCH_CUSTOMRESOURCEDEFINITIONS_NAME_KEY, params.path.name],
    queryFn: async () => {
      return await client.watchApiextensionsV1CustomResourceDefinition(params);
    },
    enabled: params.path.name !== undefined
  });
}
export function useGetApiregistrationAPIGroupQuery(params: GetApiregistrationAPIGroupRequest) {
  const client = useKubernetes().client;
  return useQuery<APIGroup, Error>({
    queryKey: [...APIS_APIREGISTRATION_K8S_IO_KEY],
    queryFn: async () => {
      return await client.getApiregistrationAPIGroup(params);
    },
    enabled: true
  });
}
export function useGetApiregistrationV1APIResourcesQuery(params: GetApiregistrationV1APIResourcesRequest) {
  const client = useKubernetes().client;
  return useQuery<APIResourceList, Error>({
    queryKey: [...APIS_APIREGISTRATION_K8S_IO_V1_KEY],
    queryFn: async () => {
      return await client.getApiregistrationV1APIResources(params);
    },
    enabled: true
  });
}
export function useListApiregistrationV1APIServiceQuery(params: ListApiregistrationV1APIServiceRequest) {
  const client = useKubernetes().client;
  return useQuery<APIServiceList, Error>({
    queryKey: [...APIS_APIREGISTRATION_K8S_IO_V1_APISERVICES_KEY],
    queryFn: async () => {
      return await client.listApiregistrationV1APIService(params);
    },
    enabled: true
  });
}
export function useCreateApiregistrationV1APIService() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<APIService, Error, CreateApiregistrationV1APIServiceRequest>({
    mutationFn: async request => {
      return client.createApiregistrationV1APIService(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_APIREGISTRATION_K8S_IO_V1_APISERVICES_KEY]
      });
    }
  });
}
export function useDeleteApiregistrationV1CollectionAPIService() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteApiregistrationV1CollectionAPIServiceRequest>({
    mutationFn: async request => {
      return client.deleteApiregistrationV1CollectionAPIService(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_APIREGISTRATION_K8S_IO_V1_APISERVICES_KEY]
      });
    }
  });
}
export function useReadApiregistrationV1APIServiceQuery(params: ReadApiregistrationV1APIServiceRequest) {
  const client = useKubernetes().client;
  return useQuery<APIService, Error>({
    queryKey: [...APIS_APIREGISTRATION_K8S_IO_V1_APISERVICES_NAME_KEY, params.path.name],
    queryFn: async () => {
      return await client.readApiregistrationV1APIService(params);
    },
    enabled: params.path.name !== undefined
  });
}
export function useReplaceApiregistrationV1APIService() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<APIService, Error, ReplaceApiregistrationV1APIServiceRequest>({
    mutationFn: async request => {
      return client.replaceApiregistrationV1APIService(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_APIREGISTRATION_K8S_IO_V1_APISERVICES_NAME_KEY, response.path.name]
      });
    }
  });
}
export function useDeleteApiregistrationV1APIService() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteApiregistrationV1APIServiceRequest>({
    mutationFn: async request => {
      return client.deleteApiregistrationV1APIService(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_APIREGISTRATION_K8S_IO_V1_APISERVICES_NAME_KEY, response.path.name]
      });
    }
  });
}
export function usePatchApiregistrationV1APIService() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<APIService, Error, PatchApiregistrationV1APIServiceRequest>({
    mutationFn: async request => {
      return client.patchApiregistrationV1APIService(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_APIREGISTRATION_K8S_IO_V1_APISERVICES_NAME_KEY, response.path.name]
      });
    }
  });
}
export function useReadApiregistrationV1APIServiceStatusQuery(params: ReadApiregistrationV1APIServiceStatusRequest) {
  const client = useKubernetes().client;
  return useQuery<APIService, Error>({
    queryKey: [...APIS_APIREGISTRATION_K8S_IO_V1_APISERVICES_NAME_STATUS_KEY, params.path.name],
    queryFn: async () => {
      return await client.readApiregistrationV1APIServiceStatus(params);
    },
    enabled: params.path.name !== undefined
  });
}
export function useReplaceApiregistrationV1APIServiceStatus() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<APIService, Error, ReplaceApiregistrationV1APIServiceStatusRequest>({
    mutationFn: async request => {
      return client.replaceApiregistrationV1APIServiceStatus(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_APIREGISTRATION_K8S_IO_V1_APISERVICES_NAME_STATUS_KEY, response.path.name]
      });
    }
  });
}
export function usePatchApiregistrationV1APIServiceStatus() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<APIService, Error, PatchApiregistrationV1APIServiceStatusRequest>({
    mutationFn: async request => {
      return client.patchApiregistrationV1APIServiceStatus(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_APIREGISTRATION_K8S_IO_V1_APISERVICES_NAME_STATUS_KEY, response.path.name]
      });
    }
  });
}
export function useWatchApiregistrationV1APIServiceListQuery(params: WatchApiregistrationV1APIServiceListRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_APIREGISTRATION_K8S_IO_V1_WATCH_APISERVICES_KEY],
    queryFn: async () => {
      return await client.watchApiregistrationV1APIServiceList(params);
    },
    enabled: true
  });
}
export function useWatchApiregistrationV1APIServiceQuery(params: WatchApiregistrationV1APIServiceRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_APIREGISTRATION_K8S_IO_V1_WATCH_APISERVICES_NAME_KEY, params.path.name],
    queryFn: async () => {
      return await client.watchApiregistrationV1APIService(params);
    },
    enabled: params.path.name !== undefined
  });
}
export function useGetAppsAPIGroupQuery(params: GetAppsAPIGroupRequest) {
  const client = useKubernetes().client;
  return useQuery<APIGroup, Error>({
    queryKey: [...APIS_APPS_KEY],
    queryFn: async () => {
      return await client.getAppsAPIGroup(params);
    },
    enabled: true
  });
}
export function useGetAppsV1APIResourcesQuery(params: GetAppsV1APIResourcesRequest) {
  const client = useKubernetes().client;
  return useQuery<APIResourceList, Error>({
    queryKey: [...APIS_APPS_V1_KEY],
    queryFn: async () => {
      return await client.getAppsV1APIResources(params);
    },
    enabled: true
  });
}
export function useListAppsV1ControllerRevisionForAllNamespacesQuery(params: ListAppsV1ControllerRevisionForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<ControllerRevisionList, Error>({
    queryKey: [...APIS_APPS_V1_CONTROLLERREVISIONS_KEY],
    queryFn: async () => {
      return await client.listAppsV1ControllerRevisionForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useListAppsV1DaemonSetForAllNamespacesQuery(params: ListAppsV1DaemonSetForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<DaemonSetList, Error>({
    queryKey: [...APIS_APPS_V1_DAEMONSETS_KEY],
    queryFn: async () => {
      return await client.listAppsV1DaemonSetForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useListAppsV1DeploymentForAllNamespacesQuery(params: ListAppsV1DeploymentForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<DeploymentList, Error>({
    queryKey: [...APIS_APPS_V1_DEPLOYMENTS_KEY],
    queryFn: async () => {
      return await client.listAppsV1DeploymentForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useListAppsV1NamespacedControllerRevisionQuery(params: ListAppsV1NamespacedControllerRevisionRequest) {
  const client = useKubernetes().client;
  return useQuery<ControllerRevisionList, Error>({
    queryKey: [...APIS_APPS_V1_NAMESPACES_NAMESPACE_CONTROLLERREVISIONS_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.listAppsV1NamespacedControllerRevision(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useCreateAppsV1NamespacedControllerRevision() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<ControllerRevision, Error, CreateAppsV1NamespacedControllerRevisionRequest>({
    mutationFn: async request => {
      return client.createAppsV1NamespacedControllerRevision(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_APPS_V1_NAMESPACES_NAMESPACE_CONTROLLERREVISIONS_KEY, response.path.namespace]
      });
    }
  });
}
export function useDeleteAppsV1CollectionNamespacedControllerRevision() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteAppsV1CollectionNamespacedControllerRevisionRequest>({
    mutationFn: async request => {
      return client.deleteAppsV1CollectionNamespacedControllerRevision(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_APPS_V1_NAMESPACES_NAMESPACE_CONTROLLERREVISIONS_KEY, response.path.namespace]
      });
    }
  });
}
export function useReadAppsV1NamespacedControllerRevisionQuery(params: ReadAppsV1NamespacedControllerRevisionRequest) {
  const client = useKubernetes().client;
  return useQuery<ControllerRevision, Error>({
    queryKey: [...APIS_APPS_V1_NAMESPACES_NAMESPACE_CONTROLLERREVISIONS_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.readAppsV1NamespacedControllerRevision(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useReplaceAppsV1NamespacedControllerRevision() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<ControllerRevision, Error, ReplaceAppsV1NamespacedControllerRevisionRequest>({
    mutationFn: async request => {
      return client.replaceAppsV1NamespacedControllerRevision(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_APPS_V1_NAMESPACES_NAMESPACE_CONTROLLERREVISIONS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useDeleteAppsV1NamespacedControllerRevision() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteAppsV1NamespacedControllerRevisionRequest>({
    mutationFn: async request => {
      return client.deleteAppsV1NamespacedControllerRevision(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_APPS_V1_NAMESPACES_NAMESPACE_CONTROLLERREVISIONS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function usePatchAppsV1NamespacedControllerRevision() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<ControllerRevision, Error, PatchAppsV1NamespacedControllerRevisionRequest>({
    mutationFn: async request => {
      return client.patchAppsV1NamespacedControllerRevision(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_APPS_V1_NAMESPACES_NAMESPACE_CONTROLLERREVISIONS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useListAppsV1NamespacedDaemonSetQuery(params: ListAppsV1NamespacedDaemonSetRequest) {
  const client = useKubernetes().client;
  return useQuery<DaemonSetList, Error>({
    queryKey: [...APIS_APPS_V1_NAMESPACES_NAMESPACE_DAEMONSETS_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.listAppsV1NamespacedDaemonSet(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useCreateAppsV1NamespacedDaemonSet() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<DaemonSet, Error, CreateAppsV1NamespacedDaemonSetRequest>({
    mutationFn: async request => {
      return client.createAppsV1NamespacedDaemonSet(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_APPS_V1_NAMESPACES_NAMESPACE_DAEMONSETS_KEY, response.path.namespace]
      });
    }
  });
}
export function useDeleteAppsV1CollectionNamespacedDaemonSet() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteAppsV1CollectionNamespacedDaemonSetRequest>({
    mutationFn: async request => {
      return client.deleteAppsV1CollectionNamespacedDaemonSet(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_APPS_V1_NAMESPACES_NAMESPACE_DAEMONSETS_KEY, response.path.namespace]
      });
    }
  });
}
export function useReadAppsV1NamespacedDaemonSetQuery(params: ReadAppsV1NamespacedDaemonSetRequest) {
  const client = useKubernetes().client;
  return useQuery<DaemonSet, Error>({
    queryKey: [...APIS_APPS_V1_NAMESPACES_NAMESPACE_DAEMONSETS_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.readAppsV1NamespacedDaemonSet(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useReplaceAppsV1NamespacedDaemonSet() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<DaemonSet, Error, ReplaceAppsV1NamespacedDaemonSetRequest>({
    mutationFn: async request => {
      return client.replaceAppsV1NamespacedDaemonSet(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_APPS_V1_NAMESPACES_NAMESPACE_DAEMONSETS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useDeleteAppsV1NamespacedDaemonSet() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteAppsV1NamespacedDaemonSetRequest>({
    mutationFn: async request => {
      return client.deleteAppsV1NamespacedDaemonSet(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_APPS_V1_NAMESPACES_NAMESPACE_DAEMONSETS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function usePatchAppsV1NamespacedDaemonSet() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<DaemonSet, Error, PatchAppsV1NamespacedDaemonSetRequest>({
    mutationFn: async request => {
      return client.patchAppsV1NamespacedDaemonSet(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_APPS_V1_NAMESPACES_NAMESPACE_DAEMONSETS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useReadAppsV1NamespacedDaemonSetStatusQuery(params: ReadAppsV1NamespacedDaemonSetStatusRequest) {
  const client = useKubernetes().client;
  return useQuery<DaemonSet, Error>({
    queryKey: [...APIS_APPS_V1_NAMESPACES_NAMESPACE_DAEMONSETS_NAME_STATUS_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.readAppsV1NamespacedDaemonSetStatus(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useReplaceAppsV1NamespacedDaemonSetStatus() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<DaemonSet, Error, ReplaceAppsV1NamespacedDaemonSetStatusRequest>({
    mutationFn: async request => {
      return client.replaceAppsV1NamespacedDaemonSetStatus(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_APPS_V1_NAMESPACES_NAMESPACE_DAEMONSETS_NAME_STATUS_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function usePatchAppsV1NamespacedDaemonSetStatus() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<DaemonSet, Error, PatchAppsV1NamespacedDaemonSetStatusRequest>({
    mutationFn: async request => {
      return client.patchAppsV1NamespacedDaemonSetStatus(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_APPS_V1_NAMESPACES_NAMESPACE_DAEMONSETS_NAME_STATUS_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useListAppsV1NamespacedDeploymentQuery(params: ListAppsV1NamespacedDeploymentRequest) {
  const client = useKubernetes().client;
  return useQuery<DeploymentList, Error>({
    queryKey: [...APIS_APPS_V1_NAMESPACES_NAMESPACE_DEPLOYMENTS_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.listAppsV1NamespacedDeployment(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useCreateAppsV1NamespacedDeployment() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Deployment, Error, CreateAppsV1NamespacedDeploymentRequest>({
    mutationFn: async request => {
      return client.createAppsV1NamespacedDeployment(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_APPS_V1_NAMESPACES_NAMESPACE_DEPLOYMENTS_KEY, response.path.namespace]
      });
    }
  });
}
export function useDeleteAppsV1CollectionNamespacedDeployment() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteAppsV1CollectionNamespacedDeploymentRequest>({
    mutationFn: async request => {
      return client.deleteAppsV1CollectionNamespacedDeployment(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_APPS_V1_NAMESPACES_NAMESPACE_DEPLOYMENTS_KEY, response.path.namespace]
      });
    }
  });
}
export function useReadAppsV1NamespacedDeploymentQuery(params: ReadAppsV1NamespacedDeploymentRequest) {
  const client = useKubernetes().client;
  return useQuery<Deployment, Error>({
    queryKey: [...APIS_APPS_V1_NAMESPACES_NAMESPACE_DEPLOYMENTS_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.readAppsV1NamespacedDeployment(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useReplaceAppsV1NamespacedDeployment() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Deployment, Error, ReplaceAppsV1NamespacedDeploymentRequest>({
    mutationFn: async request => {
      return client.replaceAppsV1NamespacedDeployment(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_APPS_V1_NAMESPACES_NAMESPACE_DEPLOYMENTS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useDeleteAppsV1NamespacedDeployment() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteAppsV1NamespacedDeploymentRequest>({
    mutationFn: async request => {
      return client.deleteAppsV1NamespacedDeployment(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_APPS_V1_NAMESPACES_NAMESPACE_DEPLOYMENTS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function usePatchAppsV1NamespacedDeployment() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Deployment, Error, PatchAppsV1NamespacedDeploymentRequest>({
    mutationFn: async request => {
      return client.patchAppsV1NamespacedDeployment(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_APPS_V1_NAMESPACES_NAMESPACE_DEPLOYMENTS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useReadAppsV1NamespacedDeploymentScaleQuery(params: ReadAppsV1NamespacedDeploymentScaleRequest) {
  const client = useKubernetes().client;
  return useQuery<Scale, Error>({
    queryKey: [...APIS_APPS_V1_NAMESPACES_NAMESPACE_DEPLOYMENTS_NAME_SCALE_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.readAppsV1NamespacedDeploymentScale(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useReplaceAppsV1NamespacedDeploymentScale() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Scale, Error, ReplaceAppsV1NamespacedDeploymentScaleRequest>({
    mutationFn: async request => {
      return client.replaceAppsV1NamespacedDeploymentScale(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_APPS_V1_NAMESPACES_NAMESPACE_DEPLOYMENTS_NAME_SCALE_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function usePatchAppsV1NamespacedDeploymentScale() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Scale, Error, PatchAppsV1NamespacedDeploymentScaleRequest>({
    mutationFn: async request => {
      return client.patchAppsV1NamespacedDeploymentScale(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_APPS_V1_NAMESPACES_NAMESPACE_DEPLOYMENTS_NAME_SCALE_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useReadAppsV1NamespacedDeploymentStatusQuery(params: ReadAppsV1NamespacedDeploymentStatusRequest) {
  const client = useKubernetes().client;
  return useQuery<Deployment, Error>({
    queryKey: [...APIS_APPS_V1_NAMESPACES_NAMESPACE_DEPLOYMENTS_NAME_STATUS_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.readAppsV1NamespacedDeploymentStatus(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useReplaceAppsV1NamespacedDeploymentStatus() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Deployment, Error, ReplaceAppsV1NamespacedDeploymentStatusRequest>({
    mutationFn: async request => {
      return client.replaceAppsV1NamespacedDeploymentStatus(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_APPS_V1_NAMESPACES_NAMESPACE_DEPLOYMENTS_NAME_STATUS_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function usePatchAppsV1NamespacedDeploymentStatus() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Deployment, Error, PatchAppsV1NamespacedDeploymentStatusRequest>({
    mutationFn: async request => {
      return client.patchAppsV1NamespacedDeploymentStatus(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_APPS_V1_NAMESPACES_NAMESPACE_DEPLOYMENTS_NAME_STATUS_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useListAppsV1NamespacedReplicaSetQuery(params: ListAppsV1NamespacedReplicaSetRequest) {
  const client = useKubernetes().client;
  return useQuery<ReplicaSetList, Error>({
    queryKey: [...APIS_APPS_V1_NAMESPACES_NAMESPACE_REPLICASETS_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.listAppsV1NamespacedReplicaSet(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useCreateAppsV1NamespacedReplicaSet() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<ReplicaSet, Error, CreateAppsV1NamespacedReplicaSetRequest>({
    mutationFn: async request => {
      return client.createAppsV1NamespacedReplicaSet(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_APPS_V1_NAMESPACES_NAMESPACE_REPLICASETS_KEY, response.path.namespace]
      });
    }
  });
}
export function useDeleteAppsV1CollectionNamespacedReplicaSet() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteAppsV1CollectionNamespacedReplicaSetRequest>({
    mutationFn: async request => {
      return client.deleteAppsV1CollectionNamespacedReplicaSet(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_APPS_V1_NAMESPACES_NAMESPACE_REPLICASETS_KEY, response.path.namespace]
      });
    }
  });
}
export function useReadAppsV1NamespacedReplicaSetQuery(params: ReadAppsV1NamespacedReplicaSetRequest) {
  const client = useKubernetes().client;
  return useQuery<ReplicaSet, Error>({
    queryKey: [...APIS_APPS_V1_NAMESPACES_NAMESPACE_REPLICASETS_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.readAppsV1NamespacedReplicaSet(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useReplaceAppsV1NamespacedReplicaSet() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<ReplicaSet, Error, ReplaceAppsV1NamespacedReplicaSetRequest>({
    mutationFn: async request => {
      return client.replaceAppsV1NamespacedReplicaSet(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_APPS_V1_NAMESPACES_NAMESPACE_REPLICASETS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useDeleteAppsV1NamespacedReplicaSet() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteAppsV1NamespacedReplicaSetRequest>({
    mutationFn: async request => {
      return client.deleteAppsV1NamespacedReplicaSet(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_APPS_V1_NAMESPACES_NAMESPACE_REPLICASETS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function usePatchAppsV1NamespacedReplicaSet() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<ReplicaSet, Error, PatchAppsV1NamespacedReplicaSetRequest>({
    mutationFn: async request => {
      return client.patchAppsV1NamespacedReplicaSet(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_APPS_V1_NAMESPACES_NAMESPACE_REPLICASETS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useReadAppsV1NamespacedReplicaSetScaleQuery(params: ReadAppsV1NamespacedReplicaSetScaleRequest) {
  const client = useKubernetes().client;
  return useQuery<Scale, Error>({
    queryKey: [...APIS_APPS_V1_NAMESPACES_NAMESPACE_REPLICASETS_NAME_SCALE_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.readAppsV1NamespacedReplicaSetScale(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useReplaceAppsV1NamespacedReplicaSetScale() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Scale, Error, ReplaceAppsV1NamespacedReplicaSetScaleRequest>({
    mutationFn: async request => {
      return client.replaceAppsV1NamespacedReplicaSetScale(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_APPS_V1_NAMESPACES_NAMESPACE_REPLICASETS_NAME_SCALE_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function usePatchAppsV1NamespacedReplicaSetScale() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Scale, Error, PatchAppsV1NamespacedReplicaSetScaleRequest>({
    mutationFn: async request => {
      return client.patchAppsV1NamespacedReplicaSetScale(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_APPS_V1_NAMESPACES_NAMESPACE_REPLICASETS_NAME_SCALE_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useReadAppsV1NamespacedReplicaSetStatusQuery(params: ReadAppsV1NamespacedReplicaSetStatusRequest) {
  const client = useKubernetes().client;
  return useQuery<ReplicaSet, Error>({
    queryKey: [...APIS_APPS_V1_NAMESPACES_NAMESPACE_REPLICASETS_NAME_STATUS_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.readAppsV1NamespacedReplicaSetStatus(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useReplaceAppsV1NamespacedReplicaSetStatus() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<ReplicaSet, Error, ReplaceAppsV1NamespacedReplicaSetStatusRequest>({
    mutationFn: async request => {
      return client.replaceAppsV1NamespacedReplicaSetStatus(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_APPS_V1_NAMESPACES_NAMESPACE_REPLICASETS_NAME_STATUS_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function usePatchAppsV1NamespacedReplicaSetStatus() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<ReplicaSet, Error, PatchAppsV1NamespacedReplicaSetStatusRequest>({
    mutationFn: async request => {
      return client.patchAppsV1NamespacedReplicaSetStatus(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_APPS_V1_NAMESPACES_NAMESPACE_REPLICASETS_NAME_STATUS_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useListAppsV1NamespacedStatefulSetQuery(params: ListAppsV1NamespacedStatefulSetRequest) {
  const client = useKubernetes().client;
  return useQuery<StatefulSetList, Error>({
    queryKey: [...APIS_APPS_V1_NAMESPACES_NAMESPACE_STATEFULSETS_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.listAppsV1NamespacedStatefulSet(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useCreateAppsV1NamespacedStatefulSet() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<StatefulSet, Error, CreateAppsV1NamespacedStatefulSetRequest>({
    mutationFn: async request => {
      return client.createAppsV1NamespacedStatefulSet(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_APPS_V1_NAMESPACES_NAMESPACE_STATEFULSETS_KEY, response.path.namespace]
      });
    }
  });
}
export function useDeleteAppsV1CollectionNamespacedStatefulSet() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteAppsV1CollectionNamespacedStatefulSetRequest>({
    mutationFn: async request => {
      return client.deleteAppsV1CollectionNamespacedStatefulSet(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_APPS_V1_NAMESPACES_NAMESPACE_STATEFULSETS_KEY, response.path.namespace]
      });
    }
  });
}
export function useReadAppsV1NamespacedStatefulSetQuery(params: ReadAppsV1NamespacedStatefulSetRequest) {
  const client = useKubernetes().client;
  return useQuery<StatefulSet, Error>({
    queryKey: [...APIS_APPS_V1_NAMESPACES_NAMESPACE_STATEFULSETS_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.readAppsV1NamespacedStatefulSet(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useReplaceAppsV1NamespacedStatefulSet() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<StatefulSet, Error, ReplaceAppsV1NamespacedStatefulSetRequest>({
    mutationFn: async request => {
      return client.replaceAppsV1NamespacedStatefulSet(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_APPS_V1_NAMESPACES_NAMESPACE_STATEFULSETS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useDeleteAppsV1NamespacedStatefulSet() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteAppsV1NamespacedStatefulSetRequest>({
    mutationFn: async request => {
      return client.deleteAppsV1NamespacedStatefulSet(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_APPS_V1_NAMESPACES_NAMESPACE_STATEFULSETS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function usePatchAppsV1NamespacedStatefulSet() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<StatefulSet, Error, PatchAppsV1NamespacedStatefulSetRequest>({
    mutationFn: async request => {
      return client.patchAppsV1NamespacedStatefulSet(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_APPS_V1_NAMESPACES_NAMESPACE_STATEFULSETS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useReadAppsV1NamespacedStatefulSetScaleQuery(params: ReadAppsV1NamespacedStatefulSetScaleRequest) {
  const client = useKubernetes().client;
  return useQuery<Scale, Error>({
    queryKey: [...APIS_APPS_V1_NAMESPACES_NAMESPACE_STATEFULSETS_NAME_SCALE_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.readAppsV1NamespacedStatefulSetScale(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useReplaceAppsV1NamespacedStatefulSetScale() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Scale, Error, ReplaceAppsV1NamespacedStatefulSetScaleRequest>({
    mutationFn: async request => {
      return client.replaceAppsV1NamespacedStatefulSetScale(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_APPS_V1_NAMESPACES_NAMESPACE_STATEFULSETS_NAME_SCALE_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function usePatchAppsV1NamespacedStatefulSetScale() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Scale, Error, PatchAppsV1NamespacedStatefulSetScaleRequest>({
    mutationFn: async request => {
      return client.patchAppsV1NamespacedStatefulSetScale(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_APPS_V1_NAMESPACES_NAMESPACE_STATEFULSETS_NAME_SCALE_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useReadAppsV1NamespacedStatefulSetStatusQuery(params: ReadAppsV1NamespacedStatefulSetStatusRequest) {
  const client = useKubernetes().client;
  return useQuery<StatefulSet, Error>({
    queryKey: [...APIS_APPS_V1_NAMESPACES_NAMESPACE_STATEFULSETS_NAME_STATUS_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.readAppsV1NamespacedStatefulSetStatus(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useReplaceAppsV1NamespacedStatefulSetStatus() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<StatefulSet, Error, ReplaceAppsV1NamespacedStatefulSetStatusRequest>({
    mutationFn: async request => {
      return client.replaceAppsV1NamespacedStatefulSetStatus(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_APPS_V1_NAMESPACES_NAMESPACE_STATEFULSETS_NAME_STATUS_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function usePatchAppsV1NamespacedStatefulSetStatus() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<StatefulSet, Error, PatchAppsV1NamespacedStatefulSetStatusRequest>({
    mutationFn: async request => {
      return client.patchAppsV1NamespacedStatefulSetStatus(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_APPS_V1_NAMESPACES_NAMESPACE_STATEFULSETS_NAME_STATUS_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useListAppsV1ReplicaSetForAllNamespacesQuery(params: ListAppsV1ReplicaSetForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<ReplicaSetList, Error>({
    queryKey: [...APIS_APPS_V1_REPLICASETS_KEY],
    queryFn: async () => {
      return await client.listAppsV1ReplicaSetForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useListAppsV1StatefulSetForAllNamespacesQuery(params: ListAppsV1StatefulSetForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<StatefulSetList, Error>({
    queryKey: [...APIS_APPS_V1_STATEFULSETS_KEY],
    queryFn: async () => {
      return await client.listAppsV1StatefulSetForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useWatchAppsV1ControllerRevisionListForAllNamespacesQuery(params: WatchAppsV1ControllerRevisionListForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_APPS_V1_WATCH_CONTROLLERREVISIONS_KEY],
    queryFn: async () => {
      return await client.watchAppsV1ControllerRevisionListForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useWatchAppsV1DaemonSetListForAllNamespacesQuery(params: WatchAppsV1DaemonSetListForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_APPS_V1_WATCH_DAEMONSETS_KEY],
    queryFn: async () => {
      return await client.watchAppsV1DaemonSetListForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useWatchAppsV1DeploymentListForAllNamespacesQuery(params: WatchAppsV1DeploymentListForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_APPS_V1_WATCH_DEPLOYMENTS_KEY],
    queryFn: async () => {
      return await client.watchAppsV1DeploymentListForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useWatchAppsV1NamespacedControllerRevisionListQuery(params: WatchAppsV1NamespacedControllerRevisionListRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_APPS_V1_WATCH_NAMESPACES_NAMESPACE_CONTROLLERREVISIONS_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.watchAppsV1NamespacedControllerRevisionList(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useWatchAppsV1NamespacedControllerRevisionQuery(params: WatchAppsV1NamespacedControllerRevisionRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_APPS_V1_WATCH_NAMESPACES_NAMESPACE_CONTROLLERREVISIONS_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.watchAppsV1NamespacedControllerRevision(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useWatchAppsV1NamespacedDaemonSetListQuery(params: WatchAppsV1NamespacedDaemonSetListRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_APPS_V1_WATCH_NAMESPACES_NAMESPACE_DAEMONSETS_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.watchAppsV1NamespacedDaemonSetList(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useWatchAppsV1NamespacedDaemonSetQuery(params: WatchAppsV1NamespacedDaemonSetRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_APPS_V1_WATCH_NAMESPACES_NAMESPACE_DAEMONSETS_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.watchAppsV1NamespacedDaemonSet(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useWatchAppsV1NamespacedDeploymentListQuery(params: WatchAppsV1NamespacedDeploymentListRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_APPS_V1_WATCH_NAMESPACES_NAMESPACE_DEPLOYMENTS_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.watchAppsV1NamespacedDeploymentList(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useWatchAppsV1NamespacedDeploymentQuery(params: WatchAppsV1NamespacedDeploymentRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_APPS_V1_WATCH_NAMESPACES_NAMESPACE_DEPLOYMENTS_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.watchAppsV1NamespacedDeployment(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useWatchAppsV1NamespacedReplicaSetListQuery(params: WatchAppsV1NamespacedReplicaSetListRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_APPS_V1_WATCH_NAMESPACES_NAMESPACE_REPLICASETS_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.watchAppsV1NamespacedReplicaSetList(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useWatchAppsV1NamespacedReplicaSetQuery(params: WatchAppsV1NamespacedReplicaSetRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_APPS_V1_WATCH_NAMESPACES_NAMESPACE_REPLICASETS_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.watchAppsV1NamespacedReplicaSet(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useWatchAppsV1NamespacedStatefulSetListQuery(params: WatchAppsV1NamespacedStatefulSetListRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_APPS_V1_WATCH_NAMESPACES_NAMESPACE_STATEFULSETS_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.watchAppsV1NamespacedStatefulSetList(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useWatchAppsV1NamespacedStatefulSetQuery(params: WatchAppsV1NamespacedStatefulSetRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_APPS_V1_WATCH_NAMESPACES_NAMESPACE_STATEFULSETS_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.watchAppsV1NamespacedStatefulSet(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useWatchAppsV1ReplicaSetListForAllNamespacesQuery(params: WatchAppsV1ReplicaSetListForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_APPS_V1_WATCH_REPLICASETS_KEY],
    queryFn: async () => {
      return await client.watchAppsV1ReplicaSetListForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useWatchAppsV1StatefulSetListForAllNamespacesQuery(params: WatchAppsV1StatefulSetListForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_APPS_V1_WATCH_STATEFULSETS_KEY],
    queryFn: async () => {
      return await client.watchAppsV1StatefulSetListForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useGetAuthenticationAPIGroupQuery(params: GetAuthenticationAPIGroupRequest) {
  const client = useKubernetes().client;
  return useQuery<APIGroup, Error>({
    queryKey: [...APIS_AUTHENTICATION_K8S_IO_KEY],
    queryFn: async () => {
      return await client.getAuthenticationAPIGroup(params);
    },
    enabled: true
  });
}
export function useGetAuthenticationV1APIResourcesQuery(params: GetAuthenticationV1APIResourcesRequest) {
  const client = useKubernetes().client;
  return useQuery<APIResourceList, Error>({
    queryKey: [...APIS_AUTHENTICATION_K8S_IO_V1_KEY],
    queryFn: async () => {
      return await client.getAuthenticationV1APIResources(params);
    },
    enabled: true
  });
}
export function useCreateAuthenticationV1TokenReview() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<TokenReview, Error, CreateAuthenticationV1TokenReviewRequest>({
    mutationFn: async request => {
      return client.createAuthenticationV1TokenReview(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_AUTHENTICATION_K8S_IO_V1_TOKENREVIEWS_KEY]
      });
    }
  });
}
export function useGetAuthorizationAPIGroupQuery(params: GetAuthorizationAPIGroupRequest) {
  const client = useKubernetes().client;
  return useQuery<APIGroup, Error>({
    queryKey: [...APIS_AUTHORIZATION_K8S_IO_KEY],
    queryFn: async () => {
      return await client.getAuthorizationAPIGroup(params);
    },
    enabled: true
  });
}
export function useGetAuthorizationV1APIResourcesQuery(params: GetAuthorizationV1APIResourcesRequest) {
  const client = useKubernetes().client;
  return useQuery<APIResourceList, Error>({
    queryKey: [...APIS_AUTHORIZATION_K8S_IO_V1_KEY],
    queryFn: async () => {
      return await client.getAuthorizationV1APIResources(params);
    },
    enabled: true
  });
}
export function useCreateAuthorizationV1NamespacedLocalSubjectAccessReview() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<LocalSubjectAccessReview, Error, CreateAuthorizationV1NamespacedLocalSubjectAccessReviewRequest>({
    mutationFn: async request => {
      return client.createAuthorizationV1NamespacedLocalSubjectAccessReview(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_AUTHORIZATION_K8S_IO_V1_NAMESPACES_NAMESPACE_LOCALSUBJECTACCESSREVIEWS_KEY, response.path.namespace]
      });
    }
  });
}
export function useCreateAuthorizationV1SelfSubjectAccessReview() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<SelfSubjectAccessReview, Error, CreateAuthorizationV1SelfSubjectAccessReviewRequest>({
    mutationFn: async request => {
      return client.createAuthorizationV1SelfSubjectAccessReview(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_AUTHORIZATION_K8S_IO_V1_SELFSUBJECTACCESSREVIEWS_KEY]
      });
    }
  });
}
export function useCreateAuthorizationV1SelfSubjectRulesReview() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<SelfSubjectRulesReview, Error, CreateAuthorizationV1SelfSubjectRulesReviewRequest>({
    mutationFn: async request => {
      return client.createAuthorizationV1SelfSubjectRulesReview(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_AUTHORIZATION_K8S_IO_V1_SELFSUBJECTRULESREVIEWS_KEY]
      });
    }
  });
}
export function useCreateAuthorizationV1SubjectAccessReview() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<SubjectAccessReview, Error, CreateAuthorizationV1SubjectAccessReviewRequest>({
    mutationFn: async request => {
      return client.createAuthorizationV1SubjectAccessReview(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_AUTHORIZATION_K8S_IO_V1_SUBJECTACCESSREVIEWS_KEY]
      });
    }
  });
}
export function useGetAutoscalingAPIGroupQuery(params: GetAutoscalingAPIGroupRequest) {
  const client = useKubernetes().client;
  return useQuery<APIGroup, Error>({
    queryKey: [...APIS_AUTOSCALING_KEY],
    queryFn: async () => {
      return await client.getAutoscalingAPIGroup(params);
    },
    enabled: true
  });
}
export function useGetAutoscalingV1APIResourcesQuery(params: GetAutoscalingV1APIResourcesRequest) {
  const client = useKubernetes().client;
  return useQuery<APIResourceList, Error>({
    queryKey: [...APIS_AUTOSCALING_V1_KEY],
    queryFn: async () => {
      return await client.getAutoscalingV1APIResources(params);
    },
    enabled: true
  });
}
export function useListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesQuery(params: ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<HorizontalPodAutoscalerList, Error>({
    queryKey: [...APIS_AUTOSCALING_V1_HORIZONTALPODAUTOSCALERS_KEY],
    queryFn: async () => {
      return await client.listAutoscalingV1HorizontalPodAutoscalerForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useListAutoscalingV1NamespacedHorizontalPodAutoscalerQuery(params: ListAutoscalingV1NamespacedHorizontalPodAutoscalerRequest) {
  const client = useKubernetes().client;
  return useQuery<HorizontalPodAutoscalerList, Error>({
    queryKey: [...APIS_AUTOSCALING_V1_NAMESPACES_NAMESPACE_HORIZONTALPODAUTOSCALERS_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.listAutoscalingV1NamespacedHorizontalPodAutoscaler(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useCreateAutoscalingV1NamespacedHorizontalPodAutoscaler() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<HorizontalPodAutoscaler, Error, CreateAutoscalingV1NamespacedHorizontalPodAutoscalerRequest>({
    mutationFn: async request => {
      return client.createAutoscalingV1NamespacedHorizontalPodAutoscaler(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_AUTOSCALING_V1_NAMESPACES_NAMESPACE_HORIZONTALPODAUTOSCALERS_KEY, response.path.namespace]
      });
    }
  });
}
export function useDeleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscaler() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscalerRequest>({
    mutationFn: async request => {
      return client.deleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscaler(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_AUTOSCALING_V1_NAMESPACES_NAMESPACE_HORIZONTALPODAUTOSCALERS_KEY, response.path.namespace]
      });
    }
  });
}
export function useReadAutoscalingV1NamespacedHorizontalPodAutoscalerQuery(params: ReadAutoscalingV1NamespacedHorizontalPodAutoscalerRequest) {
  const client = useKubernetes().client;
  return useQuery<HorizontalPodAutoscaler, Error>({
    queryKey: [...APIS_AUTOSCALING_V1_NAMESPACES_NAMESPACE_HORIZONTALPODAUTOSCALERS_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.readAutoscalingV1NamespacedHorizontalPodAutoscaler(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useReplaceAutoscalingV1NamespacedHorizontalPodAutoscaler() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<HorizontalPodAutoscaler, Error, ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerRequest>({
    mutationFn: async request => {
      return client.replaceAutoscalingV1NamespacedHorizontalPodAutoscaler(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_AUTOSCALING_V1_NAMESPACES_NAMESPACE_HORIZONTALPODAUTOSCALERS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useDeleteAutoscalingV1NamespacedHorizontalPodAutoscaler() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteAutoscalingV1NamespacedHorizontalPodAutoscalerRequest>({
    mutationFn: async request => {
      return client.deleteAutoscalingV1NamespacedHorizontalPodAutoscaler(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_AUTOSCALING_V1_NAMESPACES_NAMESPACE_HORIZONTALPODAUTOSCALERS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function usePatchAutoscalingV1NamespacedHorizontalPodAutoscaler() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<HorizontalPodAutoscaler, Error, PatchAutoscalingV1NamespacedHorizontalPodAutoscalerRequest>({
    mutationFn: async request => {
      return client.patchAutoscalingV1NamespacedHorizontalPodAutoscaler(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_AUTOSCALING_V1_NAMESPACES_NAMESPACE_HORIZONTALPODAUTOSCALERS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatusQuery(params: ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatusRequest) {
  const client = useKubernetes().client;
  return useQuery<HorizontalPodAutoscaler, Error>({
    queryKey: [...APIS_AUTOSCALING_V1_NAMESPACES_NAMESPACE_HORIZONTALPODAUTOSCALERS_NAME_STATUS_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.readAutoscalingV1NamespacedHorizontalPodAutoscalerStatus(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatus() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<HorizontalPodAutoscaler, Error, ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatusRequest>({
    mutationFn: async request => {
      return client.replaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatus(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_AUTOSCALING_V1_NAMESPACES_NAMESPACE_HORIZONTALPODAUTOSCALERS_NAME_STATUS_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function usePatchAutoscalingV1NamespacedHorizontalPodAutoscalerStatus() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<HorizontalPodAutoscaler, Error, PatchAutoscalingV1NamespacedHorizontalPodAutoscalerStatusRequest>({
    mutationFn: async request => {
      return client.patchAutoscalingV1NamespacedHorizontalPodAutoscalerStatus(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_AUTOSCALING_V1_NAMESPACES_NAMESPACE_HORIZONTALPODAUTOSCALERS_NAME_STATUS_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useWatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesQuery(params: WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_AUTOSCALING_V1_WATCH_HORIZONTALPODAUTOSCALERS_KEY],
    queryFn: async () => {
      return await client.watchAutoscalingV1HorizontalPodAutoscalerListForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useWatchAutoscalingV1NamespacedHorizontalPodAutoscalerListQuery(params: WatchAutoscalingV1NamespacedHorizontalPodAutoscalerListRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_AUTOSCALING_V1_WATCH_NAMESPACES_NAMESPACE_HORIZONTALPODAUTOSCALERS_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.watchAutoscalingV1NamespacedHorizontalPodAutoscalerList(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useWatchAutoscalingV1NamespacedHorizontalPodAutoscalerQuery(params: WatchAutoscalingV1NamespacedHorizontalPodAutoscalerRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_AUTOSCALING_V1_WATCH_NAMESPACES_NAMESPACE_HORIZONTALPODAUTOSCALERS_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.watchAutoscalingV1NamespacedHorizontalPodAutoscaler(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useGetAutoscalingV2beta1APIResourcesQuery(params: GetAutoscalingV2beta1APIResourcesRequest) {
  const client = useKubernetes().client;
  return useQuery<APIResourceList, Error>({
    queryKey: [...APIS_AUTOSCALING_V2BETA1_KEY],
    queryFn: async () => {
      return await client.getAutoscalingV2beta1APIResources(params);
    },
    enabled: true
  });
}
export function useListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesQuery(params: ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<HorizontalPodAutoscalerList, Error>({
    queryKey: [...APIS_AUTOSCALING_V2BETA1_HORIZONTALPODAUTOSCALERS_KEY],
    queryFn: async () => {
      return await client.listAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerQuery(params: ListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest) {
  const client = useKubernetes().client;
  return useQuery<HorizontalPodAutoscalerList, Error>({
    queryKey: [...APIS_AUTOSCALING_V2BETA1_NAMESPACES_NAMESPACE_HORIZONTALPODAUTOSCALERS_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.listAutoscalingV2beta1NamespacedHorizontalPodAutoscaler(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useCreateAutoscalingV2beta1NamespacedHorizontalPodAutoscaler() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<HorizontalPodAutoscaler, Error, CreateAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest>({
    mutationFn: async request => {
      return client.createAutoscalingV2beta1NamespacedHorizontalPodAutoscaler(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_AUTOSCALING_V2BETA1_NAMESPACES_NAMESPACE_HORIZONTALPODAUTOSCALERS_KEY, response.path.namespace]
      });
    }
  });
}
export function useDeleteAutoscalingV2beta1CollectionNamespacedHorizontalPodAutoscaler() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteAutoscalingV2beta1CollectionNamespacedHorizontalPodAutoscalerRequest>({
    mutationFn: async request => {
      return client.deleteAutoscalingV2beta1CollectionNamespacedHorizontalPodAutoscaler(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_AUTOSCALING_V2BETA1_NAMESPACES_NAMESPACE_HORIZONTALPODAUTOSCALERS_KEY, response.path.namespace]
      });
    }
  });
}
export function useReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerQuery(params: ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest) {
  const client = useKubernetes().client;
  return useQuery<HorizontalPodAutoscaler, Error>({
    queryKey: [...APIS_AUTOSCALING_V2BETA1_NAMESPACES_NAMESPACE_HORIZONTALPODAUTOSCALERS_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.readAutoscalingV2beta1NamespacedHorizontalPodAutoscaler(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscaler() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<HorizontalPodAutoscaler, Error, ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest>({
    mutationFn: async request => {
      return client.replaceAutoscalingV2beta1NamespacedHorizontalPodAutoscaler(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_AUTOSCALING_V2BETA1_NAMESPACES_NAMESPACE_HORIZONTALPODAUTOSCALERS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useDeleteAutoscalingV2beta1NamespacedHorizontalPodAutoscaler() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest>({
    mutationFn: async request => {
      return client.deleteAutoscalingV2beta1NamespacedHorizontalPodAutoscaler(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_AUTOSCALING_V2BETA1_NAMESPACES_NAMESPACE_HORIZONTALPODAUTOSCALERS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function usePatchAutoscalingV2beta1NamespacedHorizontalPodAutoscaler() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<HorizontalPodAutoscaler, Error, PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest>({
    mutationFn: async request => {
      return client.patchAutoscalingV2beta1NamespacedHorizontalPodAutoscaler(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_AUTOSCALING_V2BETA1_NAMESPACES_NAMESPACE_HORIZONTALPODAUTOSCALERS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusQuery(params: ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusRequest) {
  const client = useKubernetes().client;
  return useQuery<HorizontalPodAutoscaler, Error>({
    queryKey: [...APIS_AUTOSCALING_V2BETA1_NAMESPACES_NAMESPACE_HORIZONTALPODAUTOSCALERS_NAME_STATUS_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.readAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<HorizontalPodAutoscaler, Error, ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusRequest>({
    mutationFn: async request => {
      return client.replaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_AUTOSCALING_V2BETA1_NAMESPACES_NAMESPACE_HORIZONTALPODAUTOSCALERS_NAME_STATUS_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function usePatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<HorizontalPodAutoscaler, Error, PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusRequest>({
    mutationFn: async request => {
      return client.patchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_AUTOSCALING_V2BETA1_NAMESPACES_NAMESPACE_HORIZONTALPODAUTOSCALERS_NAME_STATUS_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useWatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesQuery(params: WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_AUTOSCALING_V2BETA1_WATCH_HORIZONTALPODAUTOSCALERS_KEY],
    queryFn: async () => {
      return await client.watchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useWatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListQuery(params: WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_AUTOSCALING_V2BETA1_WATCH_NAMESPACES_NAMESPACE_HORIZONTALPODAUTOSCALERS_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.watchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerList(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useWatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerQuery(params: WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_AUTOSCALING_V2BETA1_WATCH_NAMESPACES_NAMESPACE_HORIZONTALPODAUTOSCALERS_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.watchAutoscalingV2beta1NamespacedHorizontalPodAutoscaler(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useGetAutoscalingV2beta2APIResourcesQuery(params: GetAutoscalingV2beta2APIResourcesRequest) {
  const client = useKubernetes().client;
  return useQuery<APIResourceList, Error>({
    queryKey: [...APIS_AUTOSCALING_V2BETA2_KEY],
    queryFn: async () => {
      return await client.getAutoscalingV2beta2APIResources(params);
    },
    enabled: true
  });
}
export function useListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesQuery(params: ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<HorizontalPodAutoscalerList, Error>({
    queryKey: [...APIS_AUTOSCALING_V2BETA2_HORIZONTALPODAUTOSCALERS_KEY],
    queryFn: async () => {
      return await client.listAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useListAutoscalingV2beta2NamespacedHorizontalPodAutoscalerQuery(params: ListAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRequest) {
  const client = useKubernetes().client;
  return useQuery<HorizontalPodAutoscalerList, Error>({
    queryKey: [...APIS_AUTOSCALING_V2BETA2_NAMESPACES_NAMESPACE_HORIZONTALPODAUTOSCALERS_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.listAutoscalingV2beta2NamespacedHorizontalPodAutoscaler(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useCreateAutoscalingV2beta2NamespacedHorizontalPodAutoscaler() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<HorizontalPodAutoscaler, Error, CreateAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRequest>({
    mutationFn: async request => {
      return client.createAutoscalingV2beta2NamespacedHorizontalPodAutoscaler(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_AUTOSCALING_V2BETA2_NAMESPACES_NAMESPACE_HORIZONTALPODAUTOSCALERS_KEY, response.path.namespace]
      });
    }
  });
}
export function useDeleteAutoscalingV2beta2CollectionNamespacedHorizontalPodAutoscaler() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteAutoscalingV2beta2CollectionNamespacedHorizontalPodAutoscalerRequest>({
    mutationFn: async request => {
      return client.deleteAutoscalingV2beta2CollectionNamespacedHorizontalPodAutoscaler(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_AUTOSCALING_V2BETA2_NAMESPACES_NAMESPACE_HORIZONTALPODAUTOSCALERS_KEY, response.path.namespace]
      });
    }
  });
}
export function useReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerQuery(params: ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRequest) {
  const client = useKubernetes().client;
  return useQuery<HorizontalPodAutoscaler, Error>({
    queryKey: [...APIS_AUTOSCALING_V2BETA2_NAMESPACES_NAMESPACE_HORIZONTALPODAUTOSCALERS_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.readAutoscalingV2beta2NamespacedHorizontalPodAutoscaler(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscaler() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<HorizontalPodAutoscaler, Error, ReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRequest>({
    mutationFn: async request => {
      return client.replaceAutoscalingV2beta2NamespacedHorizontalPodAutoscaler(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_AUTOSCALING_V2BETA2_NAMESPACES_NAMESPACE_HORIZONTALPODAUTOSCALERS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useDeleteAutoscalingV2beta2NamespacedHorizontalPodAutoscaler() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRequest>({
    mutationFn: async request => {
      return client.deleteAutoscalingV2beta2NamespacedHorizontalPodAutoscaler(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_AUTOSCALING_V2BETA2_NAMESPACES_NAMESPACE_HORIZONTALPODAUTOSCALERS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function usePatchAutoscalingV2beta2NamespacedHorizontalPodAutoscaler() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<HorizontalPodAutoscaler, Error, PatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRequest>({
    mutationFn: async request => {
      return client.patchAutoscalingV2beta2NamespacedHorizontalPodAutoscaler(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_AUTOSCALING_V2BETA2_NAMESPACES_NAMESPACE_HORIZONTALPODAUTOSCALERS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusQuery(params: ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusRequest) {
  const client = useKubernetes().client;
  return useQuery<HorizontalPodAutoscaler, Error>({
    queryKey: [...APIS_AUTOSCALING_V2BETA2_NAMESPACES_NAMESPACE_HORIZONTALPODAUTOSCALERS_NAME_STATUS_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.readAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatus(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatus() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<HorizontalPodAutoscaler, Error, ReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusRequest>({
    mutationFn: async request => {
      return client.replaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatus(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_AUTOSCALING_V2BETA2_NAMESPACES_NAMESPACE_HORIZONTALPODAUTOSCALERS_NAME_STATUS_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function usePatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatus() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<HorizontalPodAutoscaler, Error, PatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusRequest>({
    mutationFn: async request => {
      return client.patchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatus(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_AUTOSCALING_V2BETA2_NAMESPACES_NAMESPACE_HORIZONTALPODAUTOSCALERS_NAME_STATUS_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useWatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesQuery(params: WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_AUTOSCALING_V2BETA2_WATCH_HORIZONTALPODAUTOSCALERS_KEY],
    queryFn: async () => {
      return await client.watchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useWatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerListQuery(params: WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerListRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_AUTOSCALING_V2BETA2_WATCH_NAMESPACES_NAMESPACE_HORIZONTALPODAUTOSCALERS_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.watchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerList(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useWatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerQuery(params: WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_AUTOSCALING_V2BETA2_WATCH_NAMESPACES_NAMESPACE_HORIZONTALPODAUTOSCALERS_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.watchAutoscalingV2beta2NamespacedHorizontalPodAutoscaler(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useGetBatchAPIGroupQuery(params: GetBatchAPIGroupRequest) {
  const client = useKubernetes().client;
  return useQuery<APIGroup, Error>({
    queryKey: [...APIS_BATCH_KEY],
    queryFn: async () => {
      return await client.getBatchAPIGroup(params);
    },
    enabled: true
  });
}
export function useGetBatchV1APIResourcesQuery(params: GetBatchV1APIResourcesRequest) {
  const client = useKubernetes().client;
  return useQuery<APIResourceList, Error>({
    queryKey: [...APIS_BATCH_V1_KEY],
    queryFn: async () => {
      return await client.getBatchV1APIResources(params);
    },
    enabled: true
  });
}
export function useListBatchV1CronJobForAllNamespacesQuery(params: ListBatchV1CronJobForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<CronJobList, Error>({
    queryKey: [...APIS_BATCH_V1_CRONJOBS_KEY],
    queryFn: async () => {
      return await client.listBatchV1CronJobForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useListBatchV1JobForAllNamespacesQuery(params: ListBatchV1JobForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<JobList, Error>({
    queryKey: [...APIS_BATCH_V1_JOBS_KEY],
    queryFn: async () => {
      return await client.listBatchV1JobForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useListBatchV1NamespacedCronJobQuery(params: ListBatchV1NamespacedCronJobRequest) {
  const client = useKubernetes().client;
  return useQuery<CronJobList, Error>({
    queryKey: [...APIS_BATCH_V1_NAMESPACES_NAMESPACE_CRONJOBS_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.listBatchV1NamespacedCronJob(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useCreateBatchV1NamespacedCronJob() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<CronJob, Error, CreateBatchV1NamespacedCronJobRequest>({
    mutationFn: async request => {
      return client.createBatchV1NamespacedCronJob(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_BATCH_V1_NAMESPACES_NAMESPACE_CRONJOBS_KEY, response.path.namespace]
      });
    }
  });
}
export function useDeleteBatchV1CollectionNamespacedCronJob() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteBatchV1CollectionNamespacedCronJobRequest>({
    mutationFn: async request => {
      return client.deleteBatchV1CollectionNamespacedCronJob(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_BATCH_V1_NAMESPACES_NAMESPACE_CRONJOBS_KEY, response.path.namespace]
      });
    }
  });
}
export function useReadBatchV1NamespacedCronJobQuery(params: ReadBatchV1NamespacedCronJobRequest) {
  const client = useKubernetes().client;
  return useQuery<CronJob, Error>({
    queryKey: [...APIS_BATCH_V1_NAMESPACES_NAMESPACE_CRONJOBS_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.readBatchV1NamespacedCronJob(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useReplaceBatchV1NamespacedCronJob() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<CronJob, Error, ReplaceBatchV1NamespacedCronJobRequest>({
    mutationFn: async request => {
      return client.replaceBatchV1NamespacedCronJob(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_BATCH_V1_NAMESPACES_NAMESPACE_CRONJOBS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useDeleteBatchV1NamespacedCronJob() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteBatchV1NamespacedCronJobRequest>({
    mutationFn: async request => {
      return client.deleteBatchV1NamespacedCronJob(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_BATCH_V1_NAMESPACES_NAMESPACE_CRONJOBS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function usePatchBatchV1NamespacedCronJob() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<CronJob, Error, PatchBatchV1NamespacedCronJobRequest>({
    mutationFn: async request => {
      return client.patchBatchV1NamespacedCronJob(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_BATCH_V1_NAMESPACES_NAMESPACE_CRONJOBS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useReadBatchV1NamespacedCronJobStatusQuery(params: ReadBatchV1NamespacedCronJobStatusRequest) {
  const client = useKubernetes().client;
  return useQuery<CronJob, Error>({
    queryKey: [...APIS_BATCH_V1_NAMESPACES_NAMESPACE_CRONJOBS_NAME_STATUS_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.readBatchV1NamespacedCronJobStatus(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useReplaceBatchV1NamespacedCronJobStatus() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<CronJob, Error, ReplaceBatchV1NamespacedCronJobStatusRequest>({
    mutationFn: async request => {
      return client.replaceBatchV1NamespacedCronJobStatus(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_BATCH_V1_NAMESPACES_NAMESPACE_CRONJOBS_NAME_STATUS_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function usePatchBatchV1NamespacedCronJobStatus() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<CronJob, Error, PatchBatchV1NamespacedCronJobStatusRequest>({
    mutationFn: async request => {
      return client.patchBatchV1NamespacedCronJobStatus(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_BATCH_V1_NAMESPACES_NAMESPACE_CRONJOBS_NAME_STATUS_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useListBatchV1NamespacedJobQuery(params: ListBatchV1NamespacedJobRequest) {
  const client = useKubernetes().client;
  return useQuery<JobList, Error>({
    queryKey: [...APIS_BATCH_V1_NAMESPACES_NAMESPACE_JOBS_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.listBatchV1NamespacedJob(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useCreateBatchV1NamespacedJob() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Job, Error, CreateBatchV1NamespacedJobRequest>({
    mutationFn: async request => {
      return client.createBatchV1NamespacedJob(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_BATCH_V1_NAMESPACES_NAMESPACE_JOBS_KEY, response.path.namespace]
      });
    }
  });
}
export function useDeleteBatchV1CollectionNamespacedJob() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteBatchV1CollectionNamespacedJobRequest>({
    mutationFn: async request => {
      return client.deleteBatchV1CollectionNamespacedJob(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_BATCH_V1_NAMESPACES_NAMESPACE_JOBS_KEY, response.path.namespace]
      });
    }
  });
}
export function useReadBatchV1NamespacedJobQuery(params: ReadBatchV1NamespacedJobRequest) {
  const client = useKubernetes().client;
  return useQuery<Job, Error>({
    queryKey: [...APIS_BATCH_V1_NAMESPACES_NAMESPACE_JOBS_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.readBatchV1NamespacedJob(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useReplaceBatchV1NamespacedJob() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Job, Error, ReplaceBatchV1NamespacedJobRequest>({
    mutationFn: async request => {
      return client.replaceBatchV1NamespacedJob(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_BATCH_V1_NAMESPACES_NAMESPACE_JOBS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useDeleteBatchV1NamespacedJob() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteBatchV1NamespacedJobRequest>({
    mutationFn: async request => {
      return client.deleteBatchV1NamespacedJob(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_BATCH_V1_NAMESPACES_NAMESPACE_JOBS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function usePatchBatchV1NamespacedJob() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Job, Error, PatchBatchV1NamespacedJobRequest>({
    mutationFn: async request => {
      return client.patchBatchV1NamespacedJob(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_BATCH_V1_NAMESPACES_NAMESPACE_JOBS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useReadBatchV1NamespacedJobStatusQuery(params: ReadBatchV1NamespacedJobStatusRequest) {
  const client = useKubernetes().client;
  return useQuery<Job, Error>({
    queryKey: [...APIS_BATCH_V1_NAMESPACES_NAMESPACE_JOBS_NAME_STATUS_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.readBatchV1NamespacedJobStatus(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useReplaceBatchV1NamespacedJobStatus() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Job, Error, ReplaceBatchV1NamespacedJobStatusRequest>({
    mutationFn: async request => {
      return client.replaceBatchV1NamespacedJobStatus(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_BATCH_V1_NAMESPACES_NAMESPACE_JOBS_NAME_STATUS_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function usePatchBatchV1NamespacedJobStatus() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Job, Error, PatchBatchV1NamespacedJobStatusRequest>({
    mutationFn: async request => {
      return client.patchBatchV1NamespacedJobStatus(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_BATCH_V1_NAMESPACES_NAMESPACE_JOBS_NAME_STATUS_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useWatchBatchV1CronJobListForAllNamespacesQuery(params: WatchBatchV1CronJobListForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_BATCH_V1_WATCH_CRONJOBS_KEY],
    queryFn: async () => {
      return await client.watchBatchV1CronJobListForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useWatchBatchV1JobListForAllNamespacesQuery(params: WatchBatchV1JobListForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_BATCH_V1_WATCH_JOBS_KEY],
    queryFn: async () => {
      return await client.watchBatchV1JobListForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useWatchBatchV1NamespacedCronJobListQuery(params: WatchBatchV1NamespacedCronJobListRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_BATCH_V1_WATCH_NAMESPACES_NAMESPACE_CRONJOBS_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.watchBatchV1NamespacedCronJobList(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useWatchBatchV1NamespacedCronJobQuery(params: WatchBatchV1NamespacedCronJobRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_BATCH_V1_WATCH_NAMESPACES_NAMESPACE_CRONJOBS_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.watchBatchV1NamespacedCronJob(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useWatchBatchV1NamespacedJobListQuery(params: WatchBatchV1NamespacedJobListRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_BATCH_V1_WATCH_NAMESPACES_NAMESPACE_JOBS_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.watchBatchV1NamespacedJobList(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useWatchBatchV1NamespacedJobQuery(params: WatchBatchV1NamespacedJobRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_BATCH_V1_WATCH_NAMESPACES_NAMESPACE_JOBS_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.watchBatchV1NamespacedJob(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useGetBatchV1beta1APIResourcesQuery(params: GetBatchV1beta1APIResourcesRequest) {
  const client = useKubernetes().client;
  return useQuery<APIResourceList, Error>({
    queryKey: [...APIS_BATCH_V1BETA1_KEY],
    queryFn: async () => {
      return await client.getBatchV1beta1APIResources(params);
    },
    enabled: true
  });
}
export function useListBatchV1beta1CronJobForAllNamespacesQuery(params: ListBatchV1beta1CronJobForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<CronJobList, Error>({
    queryKey: [...APIS_BATCH_V1BETA1_CRONJOBS_KEY],
    queryFn: async () => {
      return await client.listBatchV1beta1CronJobForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useListBatchV1beta1NamespacedCronJobQuery(params: ListBatchV1beta1NamespacedCronJobRequest) {
  const client = useKubernetes().client;
  return useQuery<CronJobList, Error>({
    queryKey: [...APIS_BATCH_V1BETA1_NAMESPACES_NAMESPACE_CRONJOBS_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.listBatchV1beta1NamespacedCronJob(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useCreateBatchV1beta1NamespacedCronJob() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<CronJob, Error, CreateBatchV1beta1NamespacedCronJobRequest>({
    mutationFn: async request => {
      return client.createBatchV1beta1NamespacedCronJob(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_BATCH_V1BETA1_NAMESPACES_NAMESPACE_CRONJOBS_KEY, response.path.namespace]
      });
    }
  });
}
export function useDeleteBatchV1beta1CollectionNamespacedCronJob() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteBatchV1beta1CollectionNamespacedCronJobRequest>({
    mutationFn: async request => {
      return client.deleteBatchV1beta1CollectionNamespacedCronJob(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_BATCH_V1BETA1_NAMESPACES_NAMESPACE_CRONJOBS_KEY, response.path.namespace]
      });
    }
  });
}
export function useReadBatchV1beta1NamespacedCronJobQuery(params: ReadBatchV1beta1NamespacedCronJobRequest) {
  const client = useKubernetes().client;
  return useQuery<CronJob, Error>({
    queryKey: [...APIS_BATCH_V1BETA1_NAMESPACES_NAMESPACE_CRONJOBS_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.readBatchV1beta1NamespacedCronJob(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useReplaceBatchV1beta1NamespacedCronJob() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<CronJob, Error, ReplaceBatchV1beta1NamespacedCronJobRequest>({
    mutationFn: async request => {
      return client.replaceBatchV1beta1NamespacedCronJob(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_BATCH_V1BETA1_NAMESPACES_NAMESPACE_CRONJOBS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useDeleteBatchV1beta1NamespacedCronJob() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteBatchV1beta1NamespacedCronJobRequest>({
    mutationFn: async request => {
      return client.deleteBatchV1beta1NamespacedCronJob(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_BATCH_V1BETA1_NAMESPACES_NAMESPACE_CRONJOBS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function usePatchBatchV1beta1NamespacedCronJob() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<CronJob, Error, PatchBatchV1beta1NamespacedCronJobRequest>({
    mutationFn: async request => {
      return client.patchBatchV1beta1NamespacedCronJob(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_BATCH_V1BETA1_NAMESPACES_NAMESPACE_CRONJOBS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useReadBatchV1beta1NamespacedCronJobStatusQuery(params: ReadBatchV1beta1NamespacedCronJobStatusRequest) {
  const client = useKubernetes().client;
  return useQuery<CronJob, Error>({
    queryKey: [...APIS_BATCH_V1BETA1_NAMESPACES_NAMESPACE_CRONJOBS_NAME_STATUS_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.readBatchV1beta1NamespacedCronJobStatus(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useReplaceBatchV1beta1NamespacedCronJobStatus() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<CronJob, Error, ReplaceBatchV1beta1NamespacedCronJobStatusRequest>({
    mutationFn: async request => {
      return client.replaceBatchV1beta1NamespacedCronJobStatus(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_BATCH_V1BETA1_NAMESPACES_NAMESPACE_CRONJOBS_NAME_STATUS_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function usePatchBatchV1beta1NamespacedCronJobStatus() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<CronJob, Error, PatchBatchV1beta1NamespacedCronJobStatusRequest>({
    mutationFn: async request => {
      return client.patchBatchV1beta1NamespacedCronJobStatus(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_BATCH_V1BETA1_NAMESPACES_NAMESPACE_CRONJOBS_NAME_STATUS_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useWatchBatchV1beta1CronJobListForAllNamespacesQuery(params: WatchBatchV1beta1CronJobListForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_BATCH_V1BETA1_WATCH_CRONJOBS_KEY],
    queryFn: async () => {
      return await client.watchBatchV1beta1CronJobListForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useWatchBatchV1beta1NamespacedCronJobListQuery(params: WatchBatchV1beta1NamespacedCronJobListRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_BATCH_V1BETA1_WATCH_NAMESPACES_NAMESPACE_CRONJOBS_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.watchBatchV1beta1NamespacedCronJobList(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useWatchBatchV1beta1NamespacedCronJobQuery(params: WatchBatchV1beta1NamespacedCronJobRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_BATCH_V1BETA1_WATCH_NAMESPACES_NAMESPACE_CRONJOBS_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.watchBatchV1beta1NamespacedCronJob(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useGetCertificatesAPIGroupQuery(params: GetCertificatesAPIGroupRequest) {
  const client = useKubernetes().client;
  return useQuery<APIGroup, Error>({
    queryKey: [...APIS_CERTIFICATES_K8S_IO_KEY],
    queryFn: async () => {
      return await client.getCertificatesAPIGroup(params);
    },
    enabled: true
  });
}
export function useGetCertificatesV1APIResourcesQuery(params: GetCertificatesV1APIResourcesRequest) {
  const client = useKubernetes().client;
  return useQuery<APIResourceList, Error>({
    queryKey: [...APIS_CERTIFICATES_K8S_IO_V1_KEY],
    queryFn: async () => {
      return await client.getCertificatesV1APIResources(params);
    },
    enabled: true
  });
}
export function useListCertificatesV1CertificateSigningRequestQuery(params: ListCertificatesV1CertificateSigningRequestRequest) {
  const client = useKubernetes().client;
  return useQuery<CertificateSigningRequestList, Error>({
    queryKey: [...APIS_CERTIFICATES_K8S_IO_V1_CERTIFICATESIGNINGREQUESTS_KEY],
    queryFn: async () => {
      return await client.listCertificatesV1CertificateSigningRequest(params);
    },
    enabled: true
  });
}
export function useCreateCertificatesV1CertificateSigningRequest() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<CertificateSigningRequest, Error, CreateCertificatesV1CertificateSigningRequestRequest>({
    mutationFn: async request => {
      return client.createCertificatesV1CertificateSigningRequest(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_CERTIFICATES_K8S_IO_V1_CERTIFICATESIGNINGREQUESTS_KEY]
      });
    }
  });
}
export function useDeleteCertificatesV1CollectionCertificateSigningRequest() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteCertificatesV1CollectionCertificateSigningRequestRequest>({
    mutationFn: async request => {
      return client.deleteCertificatesV1CollectionCertificateSigningRequest(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_CERTIFICATES_K8S_IO_V1_CERTIFICATESIGNINGREQUESTS_KEY]
      });
    }
  });
}
export function useReadCertificatesV1CertificateSigningRequestQuery(params: ReadCertificatesV1CertificateSigningRequestRequest) {
  const client = useKubernetes().client;
  return useQuery<CertificateSigningRequest, Error>({
    queryKey: [...APIS_CERTIFICATES_K8S_IO_V1_CERTIFICATESIGNINGREQUESTS_NAME_KEY, params.path.name],
    queryFn: async () => {
      return await client.readCertificatesV1CertificateSigningRequest(params);
    },
    enabled: params.path.name !== undefined
  });
}
export function useReplaceCertificatesV1CertificateSigningRequest() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<CertificateSigningRequest, Error, ReplaceCertificatesV1CertificateSigningRequestRequest>({
    mutationFn: async request => {
      return client.replaceCertificatesV1CertificateSigningRequest(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_CERTIFICATES_K8S_IO_V1_CERTIFICATESIGNINGREQUESTS_NAME_KEY, response.path.name]
      });
    }
  });
}
export function useDeleteCertificatesV1CertificateSigningRequest() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteCertificatesV1CertificateSigningRequestRequest>({
    mutationFn: async request => {
      return client.deleteCertificatesV1CertificateSigningRequest(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_CERTIFICATES_K8S_IO_V1_CERTIFICATESIGNINGREQUESTS_NAME_KEY, response.path.name]
      });
    }
  });
}
export function usePatchCertificatesV1CertificateSigningRequest() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<CertificateSigningRequest, Error, PatchCertificatesV1CertificateSigningRequestRequest>({
    mutationFn: async request => {
      return client.patchCertificatesV1CertificateSigningRequest(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_CERTIFICATES_K8S_IO_V1_CERTIFICATESIGNINGREQUESTS_NAME_KEY, response.path.name]
      });
    }
  });
}
export function useReadCertificatesV1CertificateSigningRequestApprovalQuery(params: ReadCertificatesV1CertificateSigningRequestApprovalRequest) {
  const client = useKubernetes().client;
  return useQuery<CertificateSigningRequest, Error>({
    queryKey: [...APIS_CERTIFICATES_K8S_IO_V1_CERTIFICATESIGNINGREQUESTS_NAME_APPROVAL_KEY, params.path.name],
    queryFn: async () => {
      return await client.readCertificatesV1CertificateSigningRequestApproval(params);
    },
    enabled: params.path.name !== undefined
  });
}
export function useReplaceCertificatesV1CertificateSigningRequestApproval() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<CertificateSigningRequest, Error, ReplaceCertificatesV1CertificateSigningRequestApprovalRequest>({
    mutationFn: async request => {
      return client.replaceCertificatesV1CertificateSigningRequestApproval(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_CERTIFICATES_K8S_IO_V1_CERTIFICATESIGNINGREQUESTS_NAME_APPROVAL_KEY, response.path.name]
      });
    }
  });
}
export function usePatchCertificatesV1CertificateSigningRequestApproval() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<CertificateSigningRequest, Error, PatchCertificatesV1CertificateSigningRequestApprovalRequest>({
    mutationFn: async request => {
      return client.patchCertificatesV1CertificateSigningRequestApproval(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_CERTIFICATES_K8S_IO_V1_CERTIFICATESIGNINGREQUESTS_NAME_APPROVAL_KEY, response.path.name]
      });
    }
  });
}
export function useReadCertificatesV1CertificateSigningRequestStatusQuery(params: ReadCertificatesV1CertificateSigningRequestStatusRequest) {
  const client = useKubernetes().client;
  return useQuery<CertificateSigningRequest, Error>({
    queryKey: [...APIS_CERTIFICATES_K8S_IO_V1_CERTIFICATESIGNINGREQUESTS_NAME_STATUS_KEY, params.path.name],
    queryFn: async () => {
      return await client.readCertificatesV1CertificateSigningRequestStatus(params);
    },
    enabled: params.path.name !== undefined
  });
}
export function useReplaceCertificatesV1CertificateSigningRequestStatus() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<CertificateSigningRequest, Error, ReplaceCertificatesV1CertificateSigningRequestStatusRequest>({
    mutationFn: async request => {
      return client.replaceCertificatesV1CertificateSigningRequestStatus(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_CERTIFICATES_K8S_IO_V1_CERTIFICATESIGNINGREQUESTS_NAME_STATUS_KEY, response.path.name]
      });
    }
  });
}
export function usePatchCertificatesV1CertificateSigningRequestStatus() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<CertificateSigningRequest, Error, PatchCertificatesV1CertificateSigningRequestStatusRequest>({
    mutationFn: async request => {
      return client.patchCertificatesV1CertificateSigningRequestStatus(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_CERTIFICATES_K8S_IO_V1_CERTIFICATESIGNINGREQUESTS_NAME_STATUS_KEY, response.path.name]
      });
    }
  });
}
export function useWatchCertificatesV1CertificateSigningRequestListQuery(params: WatchCertificatesV1CertificateSigningRequestListRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_CERTIFICATES_K8S_IO_V1_WATCH_CERTIFICATESIGNINGREQUESTS_KEY],
    queryFn: async () => {
      return await client.watchCertificatesV1CertificateSigningRequestList(params);
    },
    enabled: true
  });
}
export function useWatchCertificatesV1CertificateSigningRequestQuery(params: WatchCertificatesV1CertificateSigningRequestRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_CERTIFICATES_K8S_IO_V1_WATCH_CERTIFICATESIGNINGREQUESTS_NAME_KEY, params.path.name],
    queryFn: async () => {
      return await client.watchCertificatesV1CertificateSigningRequest(params);
    },
    enabled: params.path.name !== undefined
  });
}
export function useGetCoordinationAPIGroupQuery(params: GetCoordinationAPIGroupRequest) {
  const client = useKubernetes().client;
  return useQuery<APIGroup, Error>({
    queryKey: [...APIS_COORDINATION_K8S_IO_KEY],
    queryFn: async () => {
      return await client.getCoordinationAPIGroup(params);
    },
    enabled: true
  });
}
export function useGetCoordinationV1APIResourcesQuery(params: GetCoordinationV1APIResourcesRequest) {
  const client = useKubernetes().client;
  return useQuery<APIResourceList, Error>({
    queryKey: [...APIS_COORDINATION_K8S_IO_V1_KEY],
    queryFn: async () => {
      return await client.getCoordinationV1APIResources(params);
    },
    enabled: true
  });
}
export function useListCoordinationV1LeaseForAllNamespacesQuery(params: ListCoordinationV1LeaseForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<LeaseList, Error>({
    queryKey: [...APIS_COORDINATION_K8S_IO_V1_LEASES_KEY],
    queryFn: async () => {
      return await client.listCoordinationV1LeaseForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useListCoordinationV1NamespacedLeaseQuery(params: ListCoordinationV1NamespacedLeaseRequest) {
  const client = useKubernetes().client;
  return useQuery<LeaseList, Error>({
    queryKey: [...APIS_COORDINATION_K8S_IO_V1_NAMESPACES_NAMESPACE_LEASES_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.listCoordinationV1NamespacedLease(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useCreateCoordinationV1NamespacedLease() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Lease, Error, CreateCoordinationV1NamespacedLeaseRequest>({
    mutationFn: async request => {
      return client.createCoordinationV1NamespacedLease(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_COORDINATION_K8S_IO_V1_NAMESPACES_NAMESPACE_LEASES_KEY, response.path.namespace]
      });
    }
  });
}
export function useDeleteCoordinationV1CollectionNamespacedLease() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteCoordinationV1CollectionNamespacedLeaseRequest>({
    mutationFn: async request => {
      return client.deleteCoordinationV1CollectionNamespacedLease(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_COORDINATION_K8S_IO_V1_NAMESPACES_NAMESPACE_LEASES_KEY, response.path.namespace]
      });
    }
  });
}
export function useReadCoordinationV1NamespacedLeaseQuery(params: ReadCoordinationV1NamespacedLeaseRequest) {
  const client = useKubernetes().client;
  return useQuery<Lease, Error>({
    queryKey: [...APIS_COORDINATION_K8S_IO_V1_NAMESPACES_NAMESPACE_LEASES_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.readCoordinationV1NamespacedLease(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useReplaceCoordinationV1NamespacedLease() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Lease, Error, ReplaceCoordinationV1NamespacedLeaseRequest>({
    mutationFn: async request => {
      return client.replaceCoordinationV1NamespacedLease(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_COORDINATION_K8S_IO_V1_NAMESPACES_NAMESPACE_LEASES_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useDeleteCoordinationV1NamespacedLease() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteCoordinationV1NamespacedLeaseRequest>({
    mutationFn: async request => {
      return client.deleteCoordinationV1NamespacedLease(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_COORDINATION_K8S_IO_V1_NAMESPACES_NAMESPACE_LEASES_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function usePatchCoordinationV1NamespacedLease() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Lease, Error, PatchCoordinationV1NamespacedLeaseRequest>({
    mutationFn: async request => {
      return client.patchCoordinationV1NamespacedLease(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_COORDINATION_K8S_IO_V1_NAMESPACES_NAMESPACE_LEASES_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useWatchCoordinationV1LeaseListForAllNamespacesQuery(params: WatchCoordinationV1LeaseListForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_COORDINATION_K8S_IO_V1_WATCH_LEASES_KEY],
    queryFn: async () => {
      return await client.watchCoordinationV1LeaseListForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useWatchCoordinationV1NamespacedLeaseListQuery(params: WatchCoordinationV1NamespacedLeaseListRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_COORDINATION_K8S_IO_V1_WATCH_NAMESPACES_NAMESPACE_LEASES_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.watchCoordinationV1NamespacedLeaseList(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useWatchCoordinationV1NamespacedLeaseQuery(params: WatchCoordinationV1NamespacedLeaseRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_COORDINATION_K8S_IO_V1_WATCH_NAMESPACES_NAMESPACE_LEASES_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.watchCoordinationV1NamespacedLease(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useGetDiscoveryAPIGroupQuery(params: GetDiscoveryAPIGroupRequest) {
  const client = useKubernetes().client;
  return useQuery<APIGroup, Error>({
    queryKey: [...APIS_DISCOVERY_K8S_IO_KEY],
    queryFn: async () => {
      return await client.getDiscoveryAPIGroup(params);
    },
    enabled: true
  });
}
export function useGetDiscoveryV1APIResourcesQuery(params: GetDiscoveryV1APIResourcesRequest) {
  const client = useKubernetes().client;
  return useQuery<APIResourceList, Error>({
    queryKey: [...APIS_DISCOVERY_K8S_IO_V1_KEY],
    queryFn: async () => {
      return await client.getDiscoveryV1APIResources(params);
    },
    enabled: true
  });
}
export function useListDiscoveryV1EndpointSliceForAllNamespacesQuery(params: ListDiscoveryV1EndpointSliceForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<EndpointSliceList, Error>({
    queryKey: [...APIS_DISCOVERY_K8S_IO_V1_ENDPOINTSLICES_KEY],
    queryFn: async () => {
      return await client.listDiscoveryV1EndpointSliceForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useListDiscoveryV1NamespacedEndpointSliceQuery(params: ListDiscoveryV1NamespacedEndpointSliceRequest) {
  const client = useKubernetes().client;
  return useQuery<EndpointSliceList, Error>({
    queryKey: [...APIS_DISCOVERY_K8S_IO_V1_NAMESPACES_NAMESPACE_ENDPOINTSLICES_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.listDiscoveryV1NamespacedEndpointSlice(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useCreateDiscoveryV1NamespacedEndpointSlice() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<EndpointSlice, Error, CreateDiscoveryV1NamespacedEndpointSliceRequest>({
    mutationFn: async request => {
      return client.createDiscoveryV1NamespacedEndpointSlice(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_DISCOVERY_K8S_IO_V1_NAMESPACES_NAMESPACE_ENDPOINTSLICES_KEY, response.path.namespace]
      });
    }
  });
}
export function useDeleteDiscoveryV1CollectionNamespacedEndpointSlice() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteDiscoveryV1CollectionNamespacedEndpointSliceRequest>({
    mutationFn: async request => {
      return client.deleteDiscoveryV1CollectionNamespacedEndpointSlice(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_DISCOVERY_K8S_IO_V1_NAMESPACES_NAMESPACE_ENDPOINTSLICES_KEY, response.path.namespace]
      });
    }
  });
}
export function useReadDiscoveryV1NamespacedEndpointSliceQuery(params: ReadDiscoveryV1NamespacedEndpointSliceRequest) {
  const client = useKubernetes().client;
  return useQuery<EndpointSlice, Error>({
    queryKey: [...APIS_DISCOVERY_K8S_IO_V1_NAMESPACES_NAMESPACE_ENDPOINTSLICES_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.readDiscoveryV1NamespacedEndpointSlice(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useReplaceDiscoveryV1NamespacedEndpointSlice() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<EndpointSlice, Error, ReplaceDiscoveryV1NamespacedEndpointSliceRequest>({
    mutationFn: async request => {
      return client.replaceDiscoveryV1NamespacedEndpointSlice(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_DISCOVERY_K8S_IO_V1_NAMESPACES_NAMESPACE_ENDPOINTSLICES_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useDeleteDiscoveryV1NamespacedEndpointSlice() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteDiscoveryV1NamespacedEndpointSliceRequest>({
    mutationFn: async request => {
      return client.deleteDiscoveryV1NamespacedEndpointSlice(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_DISCOVERY_K8S_IO_V1_NAMESPACES_NAMESPACE_ENDPOINTSLICES_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function usePatchDiscoveryV1NamespacedEndpointSlice() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<EndpointSlice, Error, PatchDiscoveryV1NamespacedEndpointSliceRequest>({
    mutationFn: async request => {
      return client.patchDiscoveryV1NamespacedEndpointSlice(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_DISCOVERY_K8S_IO_V1_NAMESPACES_NAMESPACE_ENDPOINTSLICES_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useWatchDiscoveryV1EndpointSliceListForAllNamespacesQuery(params: WatchDiscoveryV1EndpointSliceListForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_DISCOVERY_K8S_IO_V1_WATCH_ENDPOINTSLICES_KEY],
    queryFn: async () => {
      return await client.watchDiscoveryV1EndpointSliceListForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useWatchDiscoveryV1NamespacedEndpointSliceListQuery(params: WatchDiscoveryV1NamespacedEndpointSliceListRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_DISCOVERY_K8S_IO_V1_WATCH_NAMESPACES_NAMESPACE_ENDPOINTSLICES_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.watchDiscoveryV1NamespacedEndpointSliceList(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useWatchDiscoveryV1NamespacedEndpointSliceQuery(params: WatchDiscoveryV1NamespacedEndpointSliceRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_DISCOVERY_K8S_IO_V1_WATCH_NAMESPACES_NAMESPACE_ENDPOINTSLICES_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.watchDiscoveryV1NamespacedEndpointSlice(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useGetDiscoveryV1beta1APIResourcesQuery(params: GetDiscoveryV1beta1APIResourcesRequest) {
  const client = useKubernetes().client;
  return useQuery<APIResourceList, Error>({
    queryKey: [...APIS_DISCOVERY_K8S_IO_V1BETA1_KEY],
    queryFn: async () => {
      return await client.getDiscoveryV1beta1APIResources(params);
    },
    enabled: true
  });
}
export function useListDiscoveryV1beta1EndpointSliceForAllNamespacesQuery(params: ListDiscoveryV1beta1EndpointSliceForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<EndpointSliceList, Error>({
    queryKey: [...APIS_DISCOVERY_K8S_IO_V1BETA1_ENDPOINTSLICES_KEY],
    queryFn: async () => {
      return await client.listDiscoveryV1beta1EndpointSliceForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useListDiscoveryV1beta1NamespacedEndpointSliceQuery(params: ListDiscoveryV1beta1NamespacedEndpointSliceRequest) {
  const client = useKubernetes().client;
  return useQuery<EndpointSliceList, Error>({
    queryKey: [...APIS_DISCOVERY_K8S_IO_V1BETA1_NAMESPACES_NAMESPACE_ENDPOINTSLICES_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.listDiscoveryV1beta1NamespacedEndpointSlice(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useCreateDiscoveryV1beta1NamespacedEndpointSlice() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<EndpointSlice, Error, CreateDiscoveryV1beta1NamespacedEndpointSliceRequest>({
    mutationFn: async request => {
      return client.createDiscoveryV1beta1NamespacedEndpointSlice(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_DISCOVERY_K8S_IO_V1BETA1_NAMESPACES_NAMESPACE_ENDPOINTSLICES_KEY, response.path.namespace]
      });
    }
  });
}
export function useDeleteDiscoveryV1beta1CollectionNamespacedEndpointSlice() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteDiscoveryV1beta1CollectionNamespacedEndpointSliceRequest>({
    mutationFn: async request => {
      return client.deleteDiscoveryV1beta1CollectionNamespacedEndpointSlice(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_DISCOVERY_K8S_IO_V1BETA1_NAMESPACES_NAMESPACE_ENDPOINTSLICES_KEY, response.path.namespace]
      });
    }
  });
}
export function useReadDiscoveryV1beta1NamespacedEndpointSliceQuery(params: ReadDiscoveryV1beta1NamespacedEndpointSliceRequest) {
  const client = useKubernetes().client;
  return useQuery<EndpointSlice, Error>({
    queryKey: [...APIS_DISCOVERY_K8S_IO_V1BETA1_NAMESPACES_NAMESPACE_ENDPOINTSLICES_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.readDiscoveryV1beta1NamespacedEndpointSlice(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useReplaceDiscoveryV1beta1NamespacedEndpointSlice() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<EndpointSlice, Error, ReplaceDiscoveryV1beta1NamespacedEndpointSliceRequest>({
    mutationFn: async request => {
      return client.replaceDiscoveryV1beta1NamespacedEndpointSlice(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_DISCOVERY_K8S_IO_V1BETA1_NAMESPACES_NAMESPACE_ENDPOINTSLICES_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useDeleteDiscoveryV1beta1NamespacedEndpointSlice() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteDiscoveryV1beta1NamespacedEndpointSliceRequest>({
    mutationFn: async request => {
      return client.deleteDiscoveryV1beta1NamespacedEndpointSlice(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_DISCOVERY_K8S_IO_V1BETA1_NAMESPACES_NAMESPACE_ENDPOINTSLICES_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function usePatchDiscoveryV1beta1NamespacedEndpointSlice() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<EndpointSlice, Error, PatchDiscoveryV1beta1NamespacedEndpointSliceRequest>({
    mutationFn: async request => {
      return client.patchDiscoveryV1beta1NamespacedEndpointSlice(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_DISCOVERY_K8S_IO_V1BETA1_NAMESPACES_NAMESPACE_ENDPOINTSLICES_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useWatchDiscoveryV1beta1EndpointSliceListForAllNamespacesQuery(params: WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_DISCOVERY_K8S_IO_V1BETA1_WATCH_ENDPOINTSLICES_KEY],
    queryFn: async () => {
      return await client.watchDiscoveryV1beta1EndpointSliceListForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useWatchDiscoveryV1beta1NamespacedEndpointSliceListQuery(params: WatchDiscoveryV1beta1NamespacedEndpointSliceListRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_DISCOVERY_K8S_IO_V1BETA1_WATCH_NAMESPACES_NAMESPACE_ENDPOINTSLICES_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.watchDiscoveryV1beta1NamespacedEndpointSliceList(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useWatchDiscoveryV1beta1NamespacedEndpointSliceQuery(params: WatchDiscoveryV1beta1NamespacedEndpointSliceRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_DISCOVERY_K8S_IO_V1BETA1_WATCH_NAMESPACES_NAMESPACE_ENDPOINTSLICES_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.watchDiscoveryV1beta1NamespacedEndpointSlice(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useGetEventsAPIGroupQuery(params: GetEventsAPIGroupRequest) {
  const client = useKubernetes().client;
  return useQuery<APIGroup, Error>({
    queryKey: [...APIS_EVENTS_K8S_IO_KEY],
    queryFn: async () => {
      return await client.getEventsAPIGroup(params);
    },
    enabled: true
  });
}
export function useGetEventsV1APIResourcesQuery(params: GetEventsV1APIResourcesRequest) {
  const client = useKubernetes().client;
  return useQuery<APIResourceList, Error>({
    queryKey: [...APIS_EVENTS_K8S_IO_V1_KEY],
    queryFn: async () => {
      return await client.getEventsV1APIResources(params);
    },
    enabled: true
  });
}
export function useListEventsV1EventForAllNamespacesQuery(params: ListEventsV1EventForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<EventList, Error>({
    queryKey: [...APIS_EVENTS_K8S_IO_V1_EVENTS_KEY],
    queryFn: async () => {
      return await client.listEventsV1EventForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useListEventsV1NamespacedEventQuery(params: ListEventsV1NamespacedEventRequest) {
  const client = useKubernetes().client;
  return useQuery<EventList, Error>({
    queryKey: [...APIS_EVENTS_K8S_IO_V1_NAMESPACES_NAMESPACE_EVENTS_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.listEventsV1NamespacedEvent(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useCreateEventsV1NamespacedEvent() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Event, Error, CreateEventsV1NamespacedEventRequest>({
    mutationFn: async request => {
      return client.createEventsV1NamespacedEvent(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_EVENTS_K8S_IO_V1_NAMESPACES_NAMESPACE_EVENTS_KEY, response.path.namespace]
      });
    }
  });
}
export function useDeleteEventsV1CollectionNamespacedEvent() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteEventsV1CollectionNamespacedEventRequest>({
    mutationFn: async request => {
      return client.deleteEventsV1CollectionNamespacedEvent(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_EVENTS_K8S_IO_V1_NAMESPACES_NAMESPACE_EVENTS_KEY, response.path.namespace]
      });
    }
  });
}
export function useReadEventsV1NamespacedEventQuery(params: ReadEventsV1NamespacedEventRequest) {
  const client = useKubernetes().client;
  return useQuery<Event, Error>({
    queryKey: [...APIS_EVENTS_K8S_IO_V1_NAMESPACES_NAMESPACE_EVENTS_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.readEventsV1NamespacedEvent(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useReplaceEventsV1NamespacedEvent() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Event, Error, ReplaceEventsV1NamespacedEventRequest>({
    mutationFn: async request => {
      return client.replaceEventsV1NamespacedEvent(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_EVENTS_K8S_IO_V1_NAMESPACES_NAMESPACE_EVENTS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useDeleteEventsV1NamespacedEvent() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteEventsV1NamespacedEventRequest>({
    mutationFn: async request => {
      return client.deleteEventsV1NamespacedEvent(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_EVENTS_K8S_IO_V1_NAMESPACES_NAMESPACE_EVENTS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function usePatchEventsV1NamespacedEvent() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Event, Error, PatchEventsV1NamespacedEventRequest>({
    mutationFn: async request => {
      return client.patchEventsV1NamespacedEvent(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_EVENTS_K8S_IO_V1_NAMESPACES_NAMESPACE_EVENTS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useWatchEventsV1EventListForAllNamespacesQuery(params: WatchEventsV1EventListForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_EVENTS_K8S_IO_V1_WATCH_EVENTS_KEY],
    queryFn: async () => {
      return await client.watchEventsV1EventListForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useWatchEventsV1NamespacedEventListQuery(params: WatchEventsV1NamespacedEventListRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_EVENTS_K8S_IO_V1_WATCH_NAMESPACES_NAMESPACE_EVENTS_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.watchEventsV1NamespacedEventList(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useWatchEventsV1NamespacedEventQuery(params: WatchEventsV1NamespacedEventRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_EVENTS_K8S_IO_V1_WATCH_NAMESPACES_NAMESPACE_EVENTS_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.watchEventsV1NamespacedEvent(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useGetEventsV1beta1APIResourcesQuery(params: GetEventsV1beta1APIResourcesRequest) {
  const client = useKubernetes().client;
  return useQuery<APIResourceList, Error>({
    queryKey: [...APIS_EVENTS_K8S_IO_V1BETA1_KEY],
    queryFn: async () => {
      return await client.getEventsV1beta1APIResources(params);
    },
    enabled: true
  });
}
export function useListEventsV1beta1EventForAllNamespacesQuery(params: ListEventsV1beta1EventForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<EventList, Error>({
    queryKey: [...APIS_EVENTS_K8S_IO_V1BETA1_EVENTS_KEY],
    queryFn: async () => {
      return await client.listEventsV1beta1EventForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useListEventsV1beta1NamespacedEventQuery(params: ListEventsV1beta1NamespacedEventRequest) {
  const client = useKubernetes().client;
  return useQuery<EventList, Error>({
    queryKey: [...APIS_EVENTS_K8S_IO_V1BETA1_NAMESPACES_NAMESPACE_EVENTS_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.listEventsV1beta1NamespacedEvent(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useCreateEventsV1beta1NamespacedEvent() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Event, Error, CreateEventsV1beta1NamespacedEventRequest>({
    mutationFn: async request => {
      return client.createEventsV1beta1NamespacedEvent(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_EVENTS_K8S_IO_V1BETA1_NAMESPACES_NAMESPACE_EVENTS_KEY, response.path.namespace]
      });
    }
  });
}
export function useDeleteEventsV1beta1CollectionNamespacedEvent() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteEventsV1beta1CollectionNamespacedEventRequest>({
    mutationFn: async request => {
      return client.deleteEventsV1beta1CollectionNamespacedEvent(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_EVENTS_K8S_IO_V1BETA1_NAMESPACES_NAMESPACE_EVENTS_KEY, response.path.namespace]
      });
    }
  });
}
export function useReadEventsV1beta1NamespacedEventQuery(params: ReadEventsV1beta1NamespacedEventRequest) {
  const client = useKubernetes().client;
  return useQuery<Event, Error>({
    queryKey: [...APIS_EVENTS_K8S_IO_V1BETA1_NAMESPACES_NAMESPACE_EVENTS_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.readEventsV1beta1NamespacedEvent(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useReplaceEventsV1beta1NamespacedEvent() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Event, Error, ReplaceEventsV1beta1NamespacedEventRequest>({
    mutationFn: async request => {
      return client.replaceEventsV1beta1NamespacedEvent(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_EVENTS_K8S_IO_V1BETA1_NAMESPACES_NAMESPACE_EVENTS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useDeleteEventsV1beta1NamespacedEvent() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteEventsV1beta1NamespacedEventRequest>({
    mutationFn: async request => {
      return client.deleteEventsV1beta1NamespacedEvent(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_EVENTS_K8S_IO_V1BETA1_NAMESPACES_NAMESPACE_EVENTS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function usePatchEventsV1beta1NamespacedEvent() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Event, Error, PatchEventsV1beta1NamespacedEventRequest>({
    mutationFn: async request => {
      return client.patchEventsV1beta1NamespacedEvent(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_EVENTS_K8S_IO_V1BETA1_NAMESPACES_NAMESPACE_EVENTS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useWatchEventsV1beta1EventListForAllNamespacesQuery(params: WatchEventsV1beta1EventListForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_EVENTS_K8S_IO_V1BETA1_WATCH_EVENTS_KEY],
    queryFn: async () => {
      return await client.watchEventsV1beta1EventListForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useWatchEventsV1beta1NamespacedEventListQuery(params: WatchEventsV1beta1NamespacedEventListRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_EVENTS_K8S_IO_V1BETA1_WATCH_NAMESPACES_NAMESPACE_EVENTS_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.watchEventsV1beta1NamespacedEventList(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useWatchEventsV1beta1NamespacedEventQuery(params: WatchEventsV1beta1NamespacedEventRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_EVENTS_K8S_IO_V1BETA1_WATCH_NAMESPACES_NAMESPACE_EVENTS_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.watchEventsV1beta1NamespacedEvent(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useGetFlowcontrolApiserverAPIGroupQuery(params: GetFlowcontrolApiserverAPIGroupRequest) {
  const client = useKubernetes().client;
  return useQuery<APIGroup, Error>({
    queryKey: [...APIS_FLOWCONTROL_APISERVER_K8S_IO_KEY],
    queryFn: async () => {
      return await client.getFlowcontrolApiserverAPIGroup(params);
    },
    enabled: true
  });
}
export function useGetFlowcontrolApiserverV1beta1APIResourcesQuery(params: GetFlowcontrolApiserverV1beta1APIResourcesRequest) {
  const client = useKubernetes().client;
  return useQuery<APIResourceList, Error>({
    queryKey: [...APIS_FLOWCONTROL_APISERVER_K8S_IO_V1BETA1_KEY],
    queryFn: async () => {
      return await client.getFlowcontrolApiserverV1beta1APIResources(params);
    },
    enabled: true
  });
}
export function useListFlowcontrolApiserverV1beta1FlowSchemaQuery(params: ListFlowcontrolApiserverV1beta1FlowSchemaRequest) {
  const client = useKubernetes().client;
  return useQuery<FlowSchemaList, Error>({
    queryKey: [...APIS_FLOWCONTROL_APISERVER_K8S_IO_V1BETA1_FLOWSCHEMAS_KEY],
    queryFn: async () => {
      return await client.listFlowcontrolApiserverV1beta1FlowSchema(params);
    },
    enabled: true
  });
}
export function useCreateFlowcontrolApiserverV1beta1FlowSchema() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<FlowSchema, Error, CreateFlowcontrolApiserverV1beta1FlowSchemaRequest>({
    mutationFn: async request => {
      return client.createFlowcontrolApiserverV1beta1FlowSchema(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_FLOWCONTROL_APISERVER_K8S_IO_V1BETA1_FLOWSCHEMAS_KEY]
      });
    }
  });
}
export function useDeleteFlowcontrolApiserverV1beta1CollectionFlowSchema() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteFlowcontrolApiserverV1beta1CollectionFlowSchemaRequest>({
    mutationFn: async request => {
      return client.deleteFlowcontrolApiserverV1beta1CollectionFlowSchema(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_FLOWCONTROL_APISERVER_K8S_IO_V1BETA1_FLOWSCHEMAS_KEY]
      });
    }
  });
}
export function useReadFlowcontrolApiserverV1beta1FlowSchemaQuery(params: ReadFlowcontrolApiserverV1beta1FlowSchemaRequest) {
  const client = useKubernetes().client;
  return useQuery<FlowSchema, Error>({
    queryKey: [...APIS_FLOWCONTROL_APISERVER_K8S_IO_V1BETA1_FLOWSCHEMAS_NAME_KEY, params.path.name],
    queryFn: async () => {
      return await client.readFlowcontrolApiserverV1beta1FlowSchema(params);
    },
    enabled: params.path.name !== undefined
  });
}
export function useReplaceFlowcontrolApiserverV1beta1FlowSchema() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<FlowSchema, Error, ReplaceFlowcontrolApiserverV1beta1FlowSchemaRequest>({
    mutationFn: async request => {
      return client.replaceFlowcontrolApiserverV1beta1FlowSchema(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_FLOWCONTROL_APISERVER_K8S_IO_V1BETA1_FLOWSCHEMAS_NAME_KEY, response.path.name]
      });
    }
  });
}
export function useDeleteFlowcontrolApiserverV1beta1FlowSchema() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteFlowcontrolApiserverV1beta1FlowSchemaRequest>({
    mutationFn: async request => {
      return client.deleteFlowcontrolApiserverV1beta1FlowSchema(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_FLOWCONTROL_APISERVER_K8S_IO_V1BETA1_FLOWSCHEMAS_NAME_KEY, response.path.name]
      });
    }
  });
}
export function usePatchFlowcontrolApiserverV1beta1FlowSchema() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<FlowSchema, Error, PatchFlowcontrolApiserverV1beta1FlowSchemaRequest>({
    mutationFn: async request => {
      return client.patchFlowcontrolApiserverV1beta1FlowSchema(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_FLOWCONTROL_APISERVER_K8S_IO_V1BETA1_FLOWSCHEMAS_NAME_KEY, response.path.name]
      });
    }
  });
}
export function useReadFlowcontrolApiserverV1beta1FlowSchemaStatusQuery(params: ReadFlowcontrolApiserverV1beta1FlowSchemaStatusRequest) {
  const client = useKubernetes().client;
  return useQuery<FlowSchema, Error>({
    queryKey: [...APIS_FLOWCONTROL_APISERVER_K8S_IO_V1BETA1_FLOWSCHEMAS_NAME_STATUS_KEY, params.path.name],
    queryFn: async () => {
      return await client.readFlowcontrolApiserverV1beta1FlowSchemaStatus(params);
    },
    enabled: params.path.name !== undefined
  });
}
export function useReplaceFlowcontrolApiserverV1beta1FlowSchemaStatus() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<FlowSchema, Error, ReplaceFlowcontrolApiserverV1beta1FlowSchemaStatusRequest>({
    mutationFn: async request => {
      return client.replaceFlowcontrolApiserverV1beta1FlowSchemaStatus(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_FLOWCONTROL_APISERVER_K8S_IO_V1BETA1_FLOWSCHEMAS_NAME_STATUS_KEY, response.path.name]
      });
    }
  });
}
export function usePatchFlowcontrolApiserverV1beta1FlowSchemaStatus() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<FlowSchema, Error, PatchFlowcontrolApiserverV1beta1FlowSchemaStatusRequest>({
    mutationFn: async request => {
      return client.patchFlowcontrolApiserverV1beta1FlowSchemaStatus(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_FLOWCONTROL_APISERVER_K8S_IO_V1BETA1_FLOWSCHEMAS_NAME_STATUS_KEY, response.path.name]
      });
    }
  });
}
export function useListFlowcontrolApiserverV1beta1PriorityLevelConfigurationQuery(params: ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationRequest) {
  const client = useKubernetes().client;
  return useQuery<PriorityLevelConfigurationList, Error>({
    queryKey: [...APIS_FLOWCONTROL_APISERVER_K8S_IO_V1BETA1_PRIORITYLEVELCONFIGURATIONS_KEY],
    queryFn: async () => {
      return await client.listFlowcontrolApiserverV1beta1PriorityLevelConfiguration(params);
    },
    enabled: true
  });
}
export function useCreateFlowcontrolApiserverV1beta1PriorityLevelConfiguration() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<PriorityLevelConfiguration, Error, CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationRequest>({
    mutationFn: async request => {
      return client.createFlowcontrolApiserverV1beta1PriorityLevelConfiguration(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_FLOWCONTROL_APISERVER_K8S_IO_V1BETA1_PRIORITYLEVELCONFIGURATIONS_KEY]
      });
    }
  });
}
export function useDeleteFlowcontrolApiserverV1beta1CollectionPriorityLevelConfiguration() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteFlowcontrolApiserverV1beta1CollectionPriorityLevelConfigurationRequest>({
    mutationFn: async request => {
      return client.deleteFlowcontrolApiserverV1beta1CollectionPriorityLevelConfiguration(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_FLOWCONTROL_APISERVER_K8S_IO_V1BETA1_PRIORITYLEVELCONFIGURATIONS_KEY]
      });
    }
  });
}
export function useReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationQuery(params: ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationRequest) {
  const client = useKubernetes().client;
  return useQuery<PriorityLevelConfiguration, Error>({
    queryKey: [...APIS_FLOWCONTROL_APISERVER_K8S_IO_V1BETA1_PRIORITYLEVELCONFIGURATIONS_NAME_KEY, params.path.name],
    queryFn: async () => {
      return await client.readFlowcontrolApiserverV1beta1PriorityLevelConfiguration(params);
    },
    enabled: params.path.name !== undefined
  });
}
export function useReplaceFlowcontrolApiserverV1beta1PriorityLevelConfiguration() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<PriorityLevelConfiguration, Error, ReplaceFlowcontrolApiserverV1beta1PriorityLevelConfigurationRequest>({
    mutationFn: async request => {
      return client.replaceFlowcontrolApiserverV1beta1PriorityLevelConfiguration(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_FLOWCONTROL_APISERVER_K8S_IO_V1BETA1_PRIORITYLEVELCONFIGURATIONS_NAME_KEY, response.path.name]
      });
    }
  });
}
export function useDeleteFlowcontrolApiserverV1beta1PriorityLevelConfiguration() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteFlowcontrolApiserverV1beta1PriorityLevelConfigurationRequest>({
    mutationFn: async request => {
      return client.deleteFlowcontrolApiserverV1beta1PriorityLevelConfiguration(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_FLOWCONTROL_APISERVER_K8S_IO_V1BETA1_PRIORITYLEVELCONFIGURATIONS_NAME_KEY, response.path.name]
      });
    }
  });
}
export function usePatchFlowcontrolApiserverV1beta1PriorityLevelConfiguration() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<PriorityLevelConfiguration, Error, PatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationRequest>({
    mutationFn: async request => {
      return client.patchFlowcontrolApiserverV1beta1PriorityLevelConfiguration(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_FLOWCONTROL_APISERVER_K8S_IO_V1BETA1_PRIORITYLEVELCONFIGURATIONS_NAME_KEY, response.path.name]
      });
    }
  });
}
export function useReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusQuery(params: ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusRequest) {
  const client = useKubernetes().client;
  return useQuery<PriorityLevelConfiguration, Error>({
    queryKey: [...APIS_FLOWCONTROL_APISERVER_K8S_IO_V1BETA1_PRIORITYLEVELCONFIGURATIONS_NAME_STATUS_KEY, params.path.name],
    queryFn: async () => {
      return await client.readFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatus(params);
    },
    enabled: params.path.name !== undefined
  });
}
export function useReplaceFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatus() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<PriorityLevelConfiguration, Error, ReplaceFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusRequest>({
    mutationFn: async request => {
      return client.replaceFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatus(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_FLOWCONTROL_APISERVER_K8S_IO_V1BETA1_PRIORITYLEVELCONFIGURATIONS_NAME_STATUS_KEY, response.path.name]
      });
    }
  });
}
export function usePatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatus() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<PriorityLevelConfiguration, Error, PatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusRequest>({
    mutationFn: async request => {
      return client.patchFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatus(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_FLOWCONTROL_APISERVER_K8S_IO_V1BETA1_PRIORITYLEVELCONFIGURATIONS_NAME_STATUS_KEY, response.path.name]
      });
    }
  });
}
export function useWatchFlowcontrolApiserverV1beta1FlowSchemaListQuery(params: WatchFlowcontrolApiserverV1beta1FlowSchemaListRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_FLOWCONTROL_APISERVER_K8S_IO_V1BETA1_WATCH_FLOWSCHEMAS_KEY],
    queryFn: async () => {
      return await client.watchFlowcontrolApiserverV1beta1FlowSchemaList(params);
    },
    enabled: true
  });
}
export function useWatchFlowcontrolApiserverV1beta1FlowSchemaQuery(params: WatchFlowcontrolApiserverV1beta1FlowSchemaRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_FLOWCONTROL_APISERVER_K8S_IO_V1BETA1_WATCH_FLOWSCHEMAS_NAME_KEY, params.path.name],
    queryFn: async () => {
      return await client.watchFlowcontrolApiserverV1beta1FlowSchema(params);
    },
    enabled: params.path.name !== undefined
  });
}
export function useWatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListQuery(params: WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_FLOWCONTROL_APISERVER_K8S_IO_V1BETA1_WATCH_PRIORITYLEVELCONFIGURATIONS_KEY],
    queryFn: async () => {
      return await client.watchFlowcontrolApiserverV1beta1PriorityLevelConfigurationList(params);
    },
    enabled: true
  });
}
export function useWatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationQuery(params: WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_FLOWCONTROL_APISERVER_K8S_IO_V1BETA1_WATCH_PRIORITYLEVELCONFIGURATIONS_NAME_KEY, params.path.name],
    queryFn: async () => {
      return await client.watchFlowcontrolApiserverV1beta1PriorityLevelConfiguration(params);
    },
    enabled: params.path.name !== undefined
  });
}
export function useGetNetworkingAPIGroupQuery(params: GetNetworkingAPIGroupRequest) {
  const client = useKubernetes().client;
  return useQuery<APIGroup, Error>({
    queryKey: [...APIS_NETWORKING_K8S_IO_KEY],
    queryFn: async () => {
      return await client.getNetworkingAPIGroup(params);
    },
    enabled: true
  });
}
export function useGetNetworkingV1APIResourcesQuery(params: GetNetworkingV1APIResourcesRequest) {
  const client = useKubernetes().client;
  return useQuery<APIResourceList, Error>({
    queryKey: [...APIS_NETWORKING_K8S_IO_V1_KEY],
    queryFn: async () => {
      return await client.getNetworkingV1APIResources(params);
    },
    enabled: true
  });
}
export function useListNetworkingV1IngressClassQuery(params: ListNetworkingV1IngressClassRequest) {
  const client = useKubernetes().client;
  return useQuery<IngressClassList, Error>({
    queryKey: [...APIS_NETWORKING_K8S_IO_V1_INGRESSCLASSES_KEY],
    queryFn: async () => {
      return await client.listNetworkingV1IngressClass(params);
    },
    enabled: true
  });
}
export function useCreateNetworkingV1IngressClass() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<IngressClass, Error, CreateNetworkingV1IngressClassRequest>({
    mutationFn: async request => {
      return client.createNetworkingV1IngressClass(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_NETWORKING_K8S_IO_V1_INGRESSCLASSES_KEY]
      });
    }
  });
}
export function useDeleteNetworkingV1CollectionIngressClass() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteNetworkingV1CollectionIngressClassRequest>({
    mutationFn: async request => {
      return client.deleteNetworkingV1CollectionIngressClass(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_NETWORKING_K8S_IO_V1_INGRESSCLASSES_KEY]
      });
    }
  });
}
export function useReadNetworkingV1IngressClassQuery(params: ReadNetworkingV1IngressClassRequest) {
  const client = useKubernetes().client;
  return useQuery<IngressClass, Error>({
    queryKey: [...APIS_NETWORKING_K8S_IO_V1_INGRESSCLASSES_NAME_KEY, params.path.name],
    queryFn: async () => {
      return await client.readNetworkingV1IngressClass(params);
    },
    enabled: params.path.name !== undefined
  });
}
export function useReplaceNetworkingV1IngressClass() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<IngressClass, Error, ReplaceNetworkingV1IngressClassRequest>({
    mutationFn: async request => {
      return client.replaceNetworkingV1IngressClass(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_NETWORKING_K8S_IO_V1_INGRESSCLASSES_NAME_KEY, response.path.name]
      });
    }
  });
}
export function useDeleteNetworkingV1IngressClass() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteNetworkingV1IngressClassRequest>({
    mutationFn: async request => {
      return client.deleteNetworkingV1IngressClass(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_NETWORKING_K8S_IO_V1_INGRESSCLASSES_NAME_KEY, response.path.name]
      });
    }
  });
}
export function usePatchNetworkingV1IngressClass() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<IngressClass, Error, PatchNetworkingV1IngressClassRequest>({
    mutationFn: async request => {
      return client.patchNetworkingV1IngressClass(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_NETWORKING_K8S_IO_V1_INGRESSCLASSES_NAME_KEY, response.path.name]
      });
    }
  });
}
export function useListNetworkingV1IngressForAllNamespacesQuery(params: ListNetworkingV1IngressForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<IngressList, Error>({
    queryKey: [...APIS_NETWORKING_K8S_IO_V1_INGRESSES_KEY],
    queryFn: async () => {
      return await client.listNetworkingV1IngressForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useListNetworkingV1NamespacedIngressQuery(params: ListNetworkingV1NamespacedIngressRequest) {
  const client = useKubernetes().client;
  return useQuery<IngressList, Error>({
    queryKey: [...APIS_NETWORKING_K8S_IO_V1_NAMESPACES_NAMESPACE_INGRESSES_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.listNetworkingV1NamespacedIngress(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useCreateNetworkingV1NamespacedIngress() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Ingress, Error, CreateNetworkingV1NamespacedIngressRequest>({
    mutationFn: async request => {
      return client.createNetworkingV1NamespacedIngress(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_NETWORKING_K8S_IO_V1_NAMESPACES_NAMESPACE_INGRESSES_KEY, response.path.namespace]
      });
    }
  });
}
export function useDeleteNetworkingV1CollectionNamespacedIngress() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteNetworkingV1CollectionNamespacedIngressRequest>({
    mutationFn: async request => {
      return client.deleteNetworkingV1CollectionNamespacedIngress(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_NETWORKING_K8S_IO_V1_NAMESPACES_NAMESPACE_INGRESSES_KEY, response.path.namespace]
      });
    }
  });
}
export function useReadNetworkingV1NamespacedIngressQuery(params: ReadNetworkingV1NamespacedIngressRequest) {
  const client = useKubernetes().client;
  return useQuery<Ingress, Error>({
    queryKey: [...APIS_NETWORKING_K8S_IO_V1_NAMESPACES_NAMESPACE_INGRESSES_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.readNetworkingV1NamespacedIngress(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useReplaceNetworkingV1NamespacedIngress() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Ingress, Error, ReplaceNetworkingV1NamespacedIngressRequest>({
    mutationFn: async request => {
      return client.replaceNetworkingV1NamespacedIngress(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_NETWORKING_K8S_IO_V1_NAMESPACES_NAMESPACE_INGRESSES_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useDeleteNetworkingV1NamespacedIngress() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteNetworkingV1NamespacedIngressRequest>({
    mutationFn: async request => {
      return client.deleteNetworkingV1NamespacedIngress(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_NETWORKING_K8S_IO_V1_NAMESPACES_NAMESPACE_INGRESSES_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function usePatchNetworkingV1NamespacedIngress() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Ingress, Error, PatchNetworkingV1NamespacedIngressRequest>({
    mutationFn: async request => {
      return client.patchNetworkingV1NamespacedIngress(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_NETWORKING_K8S_IO_V1_NAMESPACES_NAMESPACE_INGRESSES_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useReadNetworkingV1NamespacedIngressStatusQuery(params: ReadNetworkingV1NamespacedIngressStatusRequest) {
  const client = useKubernetes().client;
  return useQuery<Ingress, Error>({
    queryKey: [...APIS_NETWORKING_K8S_IO_V1_NAMESPACES_NAMESPACE_INGRESSES_NAME_STATUS_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.readNetworkingV1NamespacedIngressStatus(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useReplaceNetworkingV1NamespacedIngressStatus() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Ingress, Error, ReplaceNetworkingV1NamespacedIngressStatusRequest>({
    mutationFn: async request => {
      return client.replaceNetworkingV1NamespacedIngressStatus(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_NETWORKING_K8S_IO_V1_NAMESPACES_NAMESPACE_INGRESSES_NAME_STATUS_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function usePatchNetworkingV1NamespacedIngressStatus() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Ingress, Error, PatchNetworkingV1NamespacedIngressStatusRequest>({
    mutationFn: async request => {
      return client.patchNetworkingV1NamespacedIngressStatus(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_NETWORKING_K8S_IO_V1_NAMESPACES_NAMESPACE_INGRESSES_NAME_STATUS_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useListNetworkingV1NamespacedNetworkPolicyQuery(params: ListNetworkingV1NamespacedNetworkPolicyRequest) {
  const client = useKubernetes().client;
  return useQuery<NetworkPolicyList, Error>({
    queryKey: [...APIS_NETWORKING_K8S_IO_V1_NAMESPACES_NAMESPACE_NETWORKPOLICIES_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.listNetworkingV1NamespacedNetworkPolicy(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useCreateNetworkingV1NamespacedNetworkPolicy() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<NetworkPolicy, Error, CreateNetworkingV1NamespacedNetworkPolicyRequest>({
    mutationFn: async request => {
      return client.createNetworkingV1NamespacedNetworkPolicy(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_NETWORKING_K8S_IO_V1_NAMESPACES_NAMESPACE_NETWORKPOLICIES_KEY, response.path.namespace]
      });
    }
  });
}
export function useDeleteNetworkingV1CollectionNamespacedNetworkPolicy() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteNetworkingV1CollectionNamespacedNetworkPolicyRequest>({
    mutationFn: async request => {
      return client.deleteNetworkingV1CollectionNamespacedNetworkPolicy(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_NETWORKING_K8S_IO_V1_NAMESPACES_NAMESPACE_NETWORKPOLICIES_KEY, response.path.namespace]
      });
    }
  });
}
export function useReadNetworkingV1NamespacedNetworkPolicyQuery(params: ReadNetworkingV1NamespacedNetworkPolicyRequest) {
  const client = useKubernetes().client;
  return useQuery<NetworkPolicy, Error>({
    queryKey: [...APIS_NETWORKING_K8S_IO_V1_NAMESPACES_NAMESPACE_NETWORKPOLICIES_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.readNetworkingV1NamespacedNetworkPolicy(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useReplaceNetworkingV1NamespacedNetworkPolicy() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<NetworkPolicy, Error, ReplaceNetworkingV1NamespacedNetworkPolicyRequest>({
    mutationFn: async request => {
      return client.replaceNetworkingV1NamespacedNetworkPolicy(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_NETWORKING_K8S_IO_V1_NAMESPACES_NAMESPACE_NETWORKPOLICIES_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useDeleteNetworkingV1NamespacedNetworkPolicy() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteNetworkingV1NamespacedNetworkPolicyRequest>({
    mutationFn: async request => {
      return client.deleteNetworkingV1NamespacedNetworkPolicy(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_NETWORKING_K8S_IO_V1_NAMESPACES_NAMESPACE_NETWORKPOLICIES_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function usePatchNetworkingV1NamespacedNetworkPolicy() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<NetworkPolicy, Error, PatchNetworkingV1NamespacedNetworkPolicyRequest>({
    mutationFn: async request => {
      return client.patchNetworkingV1NamespacedNetworkPolicy(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_NETWORKING_K8S_IO_V1_NAMESPACES_NAMESPACE_NETWORKPOLICIES_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useListNetworkingV1NetworkPolicyForAllNamespacesQuery(params: ListNetworkingV1NetworkPolicyForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<NetworkPolicyList, Error>({
    queryKey: [...APIS_NETWORKING_K8S_IO_V1_NETWORKPOLICIES_KEY],
    queryFn: async () => {
      return await client.listNetworkingV1NetworkPolicyForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useWatchNetworkingV1IngressClassListQuery(params: WatchNetworkingV1IngressClassListRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_NETWORKING_K8S_IO_V1_WATCH_INGRESSCLASSES_KEY],
    queryFn: async () => {
      return await client.watchNetworkingV1IngressClassList(params);
    },
    enabled: true
  });
}
export function useWatchNetworkingV1IngressClassQuery(params: WatchNetworkingV1IngressClassRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_NETWORKING_K8S_IO_V1_WATCH_INGRESSCLASSES_NAME_KEY, params.path.name],
    queryFn: async () => {
      return await client.watchNetworkingV1IngressClass(params);
    },
    enabled: params.path.name !== undefined
  });
}
export function useWatchNetworkingV1IngressListForAllNamespacesQuery(params: WatchNetworkingV1IngressListForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_NETWORKING_K8S_IO_V1_WATCH_INGRESSES_KEY],
    queryFn: async () => {
      return await client.watchNetworkingV1IngressListForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useWatchNetworkingV1NamespacedIngressListQuery(params: WatchNetworkingV1NamespacedIngressListRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_NETWORKING_K8S_IO_V1_WATCH_NAMESPACES_NAMESPACE_INGRESSES_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.watchNetworkingV1NamespacedIngressList(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useWatchNetworkingV1NamespacedIngressQuery(params: WatchNetworkingV1NamespacedIngressRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_NETWORKING_K8S_IO_V1_WATCH_NAMESPACES_NAMESPACE_INGRESSES_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.watchNetworkingV1NamespacedIngress(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useWatchNetworkingV1NamespacedNetworkPolicyListQuery(params: WatchNetworkingV1NamespacedNetworkPolicyListRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_NETWORKING_K8S_IO_V1_WATCH_NAMESPACES_NAMESPACE_NETWORKPOLICIES_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.watchNetworkingV1NamespacedNetworkPolicyList(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useWatchNetworkingV1NamespacedNetworkPolicyQuery(params: WatchNetworkingV1NamespacedNetworkPolicyRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_NETWORKING_K8S_IO_V1_WATCH_NAMESPACES_NAMESPACE_NETWORKPOLICIES_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.watchNetworkingV1NamespacedNetworkPolicy(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useWatchNetworkingV1NetworkPolicyListForAllNamespacesQuery(params: WatchNetworkingV1NetworkPolicyListForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_NETWORKING_K8S_IO_V1_WATCH_NETWORKPOLICIES_KEY],
    queryFn: async () => {
      return await client.watchNetworkingV1NetworkPolicyListForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useGetNodeAPIGroupQuery(params: GetNodeAPIGroupRequest) {
  const client = useKubernetes().client;
  return useQuery<APIGroup, Error>({
    queryKey: [...APIS_NODE_K8S_IO_KEY],
    queryFn: async () => {
      return await client.getNodeAPIGroup(params);
    },
    enabled: true
  });
}
export function useGetNodeV1APIResourcesQuery(params: GetNodeV1APIResourcesRequest) {
  const client = useKubernetes().client;
  return useQuery<APIResourceList, Error>({
    queryKey: [...APIS_NODE_K8S_IO_V1_KEY],
    queryFn: async () => {
      return await client.getNodeV1APIResources(params);
    },
    enabled: true
  });
}
export function useListNodeV1RuntimeClassQuery(params: ListNodeV1RuntimeClassRequest) {
  const client = useKubernetes().client;
  return useQuery<RuntimeClassList, Error>({
    queryKey: [...APIS_NODE_K8S_IO_V1_RUNTIMECLASSES_KEY],
    queryFn: async () => {
      return await client.listNodeV1RuntimeClass(params);
    },
    enabled: true
  });
}
export function useCreateNodeV1RuntimeClass() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<RuntimeClass, Error, CreateNodeV1RuntimeClassRequest>({
    mutationFn: async request => {
      return client.createNodeV1RuntimeClass(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_NODE_K8S_IO_V1_RUNTIMECLASSES_KEY]
      });
    }
  });
}
export function useDeleteNodeV1CollectionRuntimeClass() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteNodeV1CollectionRuntimeClassRequest>({
    mutationFn: async request => {
      return client.deleteNodeV1CollectionRuntimeClass(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_NODE_K8S_IO_V1_RUNTIMECLASSES_KEY]
      });
    }
  });
}
export function useReadNodeV1RuntimeClassQuery(params: ReadNodeV1RuntimeClassRequest) {
  const client = useKubernetes().client;
  return useQuery<RuntimeClass, Error>({
    queryKey: [...APIS_NODE_K8S_IO_V1_RUNTIMECLASSES_NAME_KEY, params.path.name],
    queryFn: async () => {
      return await client.readNodeV1RuntimeClass(params);
    },
    enabled: params.path.name !== undefined
  });
}
export function useReplaceNodeV1RuntimeClass() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<RuntimeClass, Error, ReplaceNodeV1RuntimeClassRequest>({
    mutationFn: async request => {
      return client.replaceNodeV1RuntimeClass(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_NODE_K8S_IO_V1_RUNTIMECLASSES_NAME_KEY, response.path.name]
      });
    }
  });
}
export function useDeleteNodeV1RuntimeClass() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteNodeV1RuntimeClassRequest>({
    mutationFn: async request => {
      return client.deleteNodeV1RuntimeClass(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_NODE_K8S_IO_V1_RUNTIMECLASSES_NAME_KEY, response.path.name]
      });
    }
  });
}
export function usePatchNodeV1RuntimeClass() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<RuntimeClass, Error, PatchNodeV1RuntimeClassRequest>({
    mutationFn: async request => {
      return client.patchNodeV1RuntimeClass(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_NODE_K8S_IO_V1_RUNTIMECLASSES_NAME_KEY, response.path.name]
      });
    }
  });
}
export function useWatchNodeV1RuntimeClassListQuery(params: WatchNodeV1RuntimeClassListRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_NODE_K8S_IO_V1_WATCH_RUNTIMECLASSES_KEY],
    queryFn: async () => {
      return await client.watchNodeV1RuntimeClassList(params);
    },
    enabled: true
  });
}
export function useWatchNodeV1RuntimeClassQuery(params: WatchNodeV1RuntimeClassRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_NODE_K8S_IO_V1_WATCH_RUNTIMECLASSES_NAME_KEY, params.path.name],
    queryFn: async () => {
      return await client.watchNodeV1RuntimeClass(params);
    },
    enabled: params.path.name !== undefined
  });
}
export function useGetNodeV1beta1APIResourcesQuery(params: GetNodeV1beta1APIResourcesRequest) {
  const client = useKubernetes().client;
  return useQuery<APIResourceList, Error>({
    queryKey: [...APIS_NODE_K8S_IO_V1BETA1_KEY],
    queryFn: async () => {
      return await client.getNodeV1beta1APIResources(params);
    },
    enabled: true
  });
}
export function useListNodeV1beta1RuntimeClassQuery(params: ListNodeV1beta1RuntimeClassRequest) {
  const client = useKubernetes().client;
  return useQuery<RuntimeClassList, Error>({
    queryKey: [...APIS_NODE_K8S_IO_V1BETA1_RUNTIMECLASSES_KEY],
    queryFn: async () => {
      return await client.listNodeV1beta1RuntimeClass(params);
    },
    enabled: true
  });
}
export function useCreateNodeV1beta1RuntimeClass() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<RuntimeClass, Error, CreateNodeV1beta1RuntimeClassRequest>({
    mutationFn: async request => {
      return client.createNodeV1beta1RuntimeClass(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_NODE_K8S_IO_V1BETA1_RUNTIMECLASSES_KEY]
      });
    }
  });
}
export function useDeleteNodeV1beta1CollectionRuntimeClass() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteNodeV1beta1CollectionRuntimeClassRequest>({
    mutationFn: async request => {
      return client.deleteNodeV1beta1CollectionRuntimeClass(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_NODE_K8S_IO_V1BETA1_RUNTIMECLASSES_KEY]
      });
    }
  });
}
export function useReadNodeV1beta1RuntimeClassQuery(params: ReadNodeV1beta1RuntimeClassRequest) {
  const client = useKubernetes().client;
  return useQuery<RuntimeClass, Error>({
    queryKey: [...APIS_NODE_K8S_IO_V1BETA1_RUNTIMECLASSES_NAME_KEY, params.path.name],
    queryFn: async () => {
      return await client.readNodeV1beta1RuntimeClass(params);
    },
    enabled: params.path.name !== undefined
  });
}
export function useReplaceNodeV1beta1RuntimeClass() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<RuntimeClass, Error, ReplaceNodeV1beta1RuntimeClassRequest>({
    mutationFn: async request => {
      return client.replaceNodeV1beta1RuntimeClass(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_NODE_K8S_IO_V1BETA1_RUNTIMECLASSES_NAME_KEY, response.path.name]
      });
    }
  });
}
export function useDeleteNodeV1beta1RuntimeClass() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteNodeV1beta1RuntimeClassRequest>({
    mutationFn: async request => {
      return client.deleteNodeV1beta1RuntimeClass(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_NODE_K8S_IO_V1BETA1_RUNTIMECLASSES_NAME_KEY, response.path.name]
      });
    }
  });
}
export function usePatchNodeV1beta1RuntimeClass() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<RuntimeClass, Error, PatchNodeV1beta1RuntimeClassRequest>({
    mutationFn: async request => {
      return client.patchNodeV1beta1RuntimeClass(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_NODE_K8S_IO_V1BETA1_RUNTIMECLASSES_NAME_KEY, response.path.name]
      });
    }
  });
}
export function useWatchNodeV1beta1RuntimeClassListQuery(params: WatchNodeV1beta1RuntimeClassListRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_NODE_K8S_IO_V1BETA1_WATCH_RUNTIMECLASSES_KEY],
    queryFn: async () => {
      return await client.watchNodeV1beta1RuntimeClassList(params);
    },
    enabled: true
  });
}
export function useWatchNodeV1beta1RuntimeClassQuery(params: WatchNodeV1beta1RuntimeClassRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_NODE_K8S_IO_V1BETA1_WATCH_RUNTIMECLASSES_NAME_KEY, params.path.name],
    queryFn: async () => {
      return await client.watchNodeV1beta1RuntimeClass(params);
    },
    enabled: params.path.name !== undefined
  });
}
export function useGetPolicyAPIGroupQuery(params: GetPolicyAPIGroupRequest) {
  const client = useKubernetes().client;
  return useQuery<APIGroup, Error>({
    queryKey: [...APIS_POLICY_KEY],
    queryFn: async () => {
      return await client.getPolicyAPIGroup(params);
    },
    enabled: true
  });
}
export function useGetPolicyV1APIResourcesQuery(params: GetPolicyV1APIResourcesRequest) {
  const client = useKubernetes().client;
  return useQuery<APIResourceList, Error>({
    queryKey: [...APIS_POLICY_V1_KEY],
    queryFn: async () => {
      return await client.getPolicyV1APIResources(params);
    },
    enabled: true
  });
}
export function useListPolicyV1NamespacedPodDisruptionBudgetQuery(params: ListPolicyV1NamespacedPodDisruptionBudgetRequest) {
  const client = useKubernetes().client;
  return useQuery<PodDisruptionBudgetList, Error>({
    queryKey: [...APIS_POLICY_V1_NAMESPACES_NAMESPACE_PODDISRUPTIONBUDGETS_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.listPolicyV1NamespacedPodDisruptionBudget(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useCreatePolicyV1NamespacedPodDisruptionBudget() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<PodDisruptionBudget, Error, CreatePolicyV1NamespacedPodDisruptionBudgetRequest>({
    mutationFn: async request => {
      return client.createPolicyV1NamespacedPodDisruptionBudget(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_POLICY_V1_NAMESPACES_NAMESPACE_PODDISRUPTIONBUDGETS_KEY, response.path.namespace]
      });
    }
  });
}
export function useDeletePolicyV1CollectionNamespacedPodDisruptionBudget() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeletePolicyV1CollectionNamespacedPodDisruptionBudgetRequest>({
    mutationFn: async request => {
      return client.deletePolicyV1CollectionNamespacedPodDisruptionBudget(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_POLICY_V1_NAMESPACES_NAMESPACE_PODDISRUPTIONBUDGETS_KEY, response.path.namespace]
      });
    }
  });
}
export function useReadPolicyV1NamespacedPodDisruptionBudgetQuery(params: ReadPolicyV1NamespacedPodDisruptionBudgetRequest) {
  const client = useKubernetes().client;
  return useQuery<PodDisruptionBudget, Error>({
    queryKey: [...APIS_POLICY_V1_NAMESPACES_NAMESPACE_PODDISRUPTIONBUDGETS_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.readPolicyV1NamespacedPodDisruptionBudget(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useReplacePolicyV1NamespacedPodDisruptionBudget() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<PodDisruptionBudget, Error, ReplacePolicyV1NamespacedPodDisruptionBudgetRequest>({
    mutationFn: async request => {
      return client.replacePolicyV1NamespacedPodDisruptionBudget(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_POLICY_V1_NAMESPACES_NAMESPACE_PODDISRUPTIONBUDGETS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useDeletePolicyV1NamespacedPodDisruptionBudget() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeletePolicyV1NamespacedPodDisruptionBudgetRequest>({
    mutationFn: async request => {
      return client.deletePolicyV1NamespacedPodDisruptionBudget(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_POLICY_V1_NAMESPACES_NAMESPACE_PODDISRUPTIONBUDGETS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function usePatchPolicyV1NamespacedPodDisruptionBudget() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<PodDisruptionBudget, Error, PatchPolicyV1NamespacedPodDisruptionBudgetRequest>({
    mutationFn: async request => {
      return client.patchPolicyV1NamespacedPodDisruptionBudget(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_POLICY_V1_NAMESPACES_NAMESPACE_PODDISRUPTIONBUDGETS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useReadPolicyV1NamespacedPodDisruptionBudgetStatusQuery(params: ReadPolicyV1NamespacedPodDisruptionBudgetStatusRequest) {
  const client = useKubernetes().client;
  return useQuery<PodDisruptionBudget, Error>({
    queryKey: [...APIS_POLICY_V1_NAMESPACES_NAMESPACE_PODDISRUPTIONBUDGETS_NAME_STATUS_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.readPolicyV1NamespacedPodDisruptionBudgetStatus(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useReplacePolicyV1NamespacedPodDisruptionBudgetStatus() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<PodDisruptionBudget, Error, ReplacePolicyV1NamespacedPodDisruptionBudgetStatusRequest>({
    mutationFn: async request => {
      return client.replacePolicyV1NamespacedPodDisruptionBudgetStatus(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_POLICY_V1_NAMESPACES_NAMESPACE_PODDISRUPTIONBUDGETS_NAME_STATUS_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function usePatchPolicyV1NamespacedPodDisruptionBudgetStatus() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<PodDisruptionBudget, Error, PatchPolicyV1NamespacedPodDisruptionBudgetStatusRequest>({
    mutationFn: async request => {
      return client.patchPolicyV1NamespacedPodDisruptionBudgetStatus(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_POLICY_V1_NAMESPACES_NAMESPACE_PODDISRUPTIONBUDGETS_NAME_STATUS_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useListPolicyV1PodDisruptionBudgetForAllNamespacesQuery(params: ListPolicyV1PodDisruptionBudgetForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<PodDisruptionBudgetList, Error>({
    queryKey: [...APIS_POLICY_V1_PODDISRUPTIONBUDGETS_KEY],
    queryFn: async () => {
      return await client.listPolicyV1PodDisruptionBudgetForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useWatchPolicyV1NamespacedPodDisruptionBudgetListQuery(params: WatchPolicyV1NamespacedPodDisruptionBudgetListRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_POLICY_V1_WATCH_NAMESPACES_NAMESPACE_PODDISRUPTIONBUDGETS_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.watchPolicyV1NamespacedPodDisruptionBudgetList(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useWatchPolicyV1NamespacedPodDisruptionBudgetQuery(params: WatchPolicyV1NamespacedPodDisruptionBudgetRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_POLICY_V1_WATCH_NAMESPACES_NAMESPACE_PODDISRUPTIONBUDGETS_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.watchPolicyV1NamespacedPodDisruptionBudget(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useWatchPolicyV1PodDisruptionBudgetListForAllNamespacesQuery(params: WatchPolicyV1PodDisruptionBudgetListForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_POLICY_V1_WATCH_PODDISRUPTIONBUDGETS_KEY],
    queryFn: async () => {
      return await client.watchPolicyV1PodDisruptionBudgetListForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useGetPolicyV1beta1APIResourcesQuery(params: GetPolicyV1beta1APIResourcesRequest) {
  const client = useKubernetes().client;
  return useQuery<APIResourceList, Error>({
    queryKey: [...APIS_POLICY_V1BETA1_KEY],
    queryFn: async () => {
      return await client.getPolicyV1beta1APIResources(params);
    },
    enabled: true
  });
}
export function useListPolicyV1beta1NamespacedPodDisruptionBudgetQuery(params: ListPolicyV1beta1NamespacedPodDisruptionBudgetRequest) {
  const client = useKubernetes().client;
  return useQuery<PodDisruptionBudgetList, Error>({
    queryKey: [...APIS_POLICY_V1BETA1_NAMESPACES_NAMESPACE_PODDISRUPTIONBUDGETS_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.listPolicyV1beta1NamespacedPodDisruptionBudget(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useCreatePolicyV1beta1NamespacedPodDisruptionBudget() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<PodDisruptionBudget, Error, CreatePolicyV1beta1NamespacedPodDisruptionBudgetRequest>({
    mutationFn: async request => {
      return client.createPolicyV1beta1NamespacedPodDisruptionBudget(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_POLICY_V1BETA1_NAMESPACES_NAMESPACE_PODDISRUPTIONBUDGETS_KEY, response.path.namespace]
      });
    }
  });
}
export function useDeletePolicyV1beta1CollectionNamespacedPodDisruptionBudget() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeletePolicyV1beta1CollectionNamespacedPodDisruptionBudgetRequest>({
    mutationFn: async request => {
      return client.deletePolicyV1beta1CollectionNamespacedPodDisruptionBudget(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_POLICY_V1BETA1_NAMESPACES_NAMESPACE_PODDISRUPTIONBUDGETS_KEY, response.path.namespace]
      });
    }
  });
}
export function useReadPolicyV1beta1NamespacedPodDisruptionBudgetQuery(params: ReadPolicyV1beta1NamespacedPodDisruptionBudgetRequest) {
  const client = useKubernetes().client;
  return useQuery<PodDisruptionBudget, Error>({
    queryKey: [...APIS_POLICY_V1BETA1_NAMESPACES_NAMESPACE_PODDISRUPTIONBUDGETS_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.readPolicyV1beta1NamespacedPodDisruptionBudget(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useReplacePolicyV1beta1NamespacedPodDisruptionBudget() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<PodDisruptionBudget, Error, ReplacePolicyV1beta1NamespacedPodDisruptionBudgetRequest>({
    mutationFn: async request => {
      return client.replacePolicyV1beta1NamespacedPodDisruptionBudget(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_POLICY_V1BETA1_NAMESPACES_NAMESPACE_PODDISRUPTIONBUDGETS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useDeletePolicyV1beta1NamespacedPodDisruptionBudget() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeletePolicyV1beta1NamespacedPodDisruptionBudgetRequest>({
    mutationFn: async request => {
      return client.deletePolicyV1beta1NamespacedPodDisruptionBudget(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_POLICY_V1BETA1_NAMESPACES_NAMESPACE_PODDISRUPTIONBUDGETS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function usePatchPolicyV1beta1NamespacedPodDisruptionBudget() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<PodDisruptionBudget, Error, PatchPolicyV1beta1NamespacedPodDisruptionBudgetRequest>({
    mutationFn: async request => {
      return client.patchPolicyV1beta1NamespacedPodDisruptionBudget(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_POLICY_V1BETA1_NAMESPACES_NAMESPACE_PODDISRUPTIONBUDGETS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusQuery(params: ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusRequest) {
  const client = useKubernetes().client;
  return useQuery<PodDisruptionBudget, Error>({
    queryKey: [...APIS_POLICY_V1BETA1_NAMESPACES_NAMESPACE_PODDISRUPTIONBUDGETS_NAME_STATUS_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.readPolicyV1beta1NamespacedPodDisruptionBudgetStatus(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useReplacePolicyV1beta1NamespacedPodDisruptionBudgetStatus() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<PodDisruptionBudget, Error, ReplacePolicyV1beta1NamespacedPodDisruptionBudgetStatusRequest>({
    mutationFn: async request => {
      return client.replacePolicyV1beta1NamespacedPodDisruptionBudgetStatus(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_POLICY_V1BETA1_NAMESPACES_NAMESPACE_PODDISRUPTIONBUDGETS_NAME_STATUS_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function usePatchPolicyV1beta1NamespacedPodDisruptionBudgetStatus() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<PodDisruptionBudget, Error, PatchPolicyV1beta1NamespacedPodDisruptionBudgetStatusRequest>({
    mutationFn: async request => {
      return client.patchPolicyV1beta1NamespacedPodDisruptionBudgetStatus(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_POLICY_V1BETA1_NAMESPACES_NAMESPACE_PODDISRUPTIONBUDGETS_NAME_STATUS_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useListPolicyV1beta1PodDisruptionBudgetForAllNamespacesQuery(params: ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<PodDisruptionBudgetList, Error>({
    queryKey: [...APIS_POLICY_V1BETA1_PODDISRUPTIONBUDGETS_KEY],
    queryFn: async () => {
      return await client.listPolicyV1beta1PodDisruptionBudgetForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useListPolicyV1beta1PodSecurityPolicyQuery(params: ListPolicyV1beta1PodSecurityPolicyRequest) {
  const client = useKubernetes().client;
  return useQuery<PodSecurityPolicyList, Error>({
    queryKey: [...APIS_POLICY_V1BETA1_PODSECURITYPOLICIES_KEY],
    queryFn: async () => {
      return await client.listPolicyV1beta1PodSecurityPolicy(params);
    },
    enabled: true
  });
}
export function useCreatePolicyV1beta1PodSecurityPolicy() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<PodSecurityPolicy, Error, CreatePolicyV1beta1PodSecurityPolicyRequest>({
    mutationFn: async request => {
      return client.createPolicyV1beta1PodSecurityPolicy(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_POLICY_V1BETA1_PODSECURITYPOLICIES_KEY]
      });
    }
  });
}
export function useDeletePolicyV1beta1CollectionPodSecurityPolicy() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeletePolicyV1beta1CollectionPodSecurityPolicyRequest>({
    mutationFn: async request => {
      return client.deletePolicyV1beta1CollectionPodSecurityPolicy(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_POLICY_V1BETA1_PODSECURITYPOLICIES_KEY]
      });
    }
  });
}
export function useReadPolicyV1beta1PodSecurityPolicyQuery(params: ReadPolicyV1beta1PodSecurityPolicyRequest) {
  const client = useKubernetes().client;
  return useQuery<PodSecurityPolicy, Error>({
    queryKey: [...APIS_POLICY_V1BETA1_PODSECURITYPOLICIES_NAME_KEY, params.path.name],
    queryFn: async () => {
      return await client.readPolicyV1beta1PodSecurityPolicy(params);
    },
    enabled: params.path.name !== undefined
  });
}
export function useReplacePolicyV1beta1PodSecurityPolicy() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<PodSecurityPolicy, Error, ReplacePolicyV1beta1PodSecurityPolicyRequest>({
    mutationFn: async request => {
      return client.replacePolicyV1beta1PodSecurityPolicy(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_POLICY_V1BETA1_PODSECURITYPOLICIES_NAME_KEY, response.path.name]
      });
    }
  });
}
export function useDeletePolicyV1beta1PodSecurityPolicy() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<PodSecurityPolicy, Error, DeletePolicyV1beta1PodSecurityPolicyRequest>({
    mutationFn: async request => {
      return client.deletePolicyV1beta1PodSecurityPolicy(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_POLICY_V1BETA1_PODSECURITYPOLICIES_NAME_KEY, response.path.name]
      });
    }
  });
}
export function usePatchPolicyV1beta1PodSecurityPolicy() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<PodSecurityPolicy, Error, PatchPolicyV1beta1PodSecurityPolicyRequest>({
    mutationFn: async request => {
      return client.patchPolicyV1beta1PodSecurityPolicy(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_POLICY_V1BETA1_PODSECURITYPOLICIES_NAME_KEY, response.path.name]
      });
    }
  });
}
export function useWatchPolicyV1beta1NamespacedPodDisruptionBudgetListQuery(params: WatchPolicyV1beta1NamespacedPodDisruptionBudgetListRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_POLICY_V1BETA1_WATCH_NAMESPACES_NAMESPACE_PODDISRUPTIONBUDGETS_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.watchPolicyV1beta1NamespacedPodDisruptionBudgetList(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useWatchPolicyV1beta1NamespacedPodDisruptionBudgetQuery(params: WatchPolicyV1beta1NamespacedPodDisruptionBudgetRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_POLICY_V1BETA1_WATCH_NAMESPACES_NAMESPACE_PODDISRUPTIONBUDGETS_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.watchPolicyV1beta1NamespacedPodDisruptionBudget(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useWatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesQuery(params: WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_POLICY_V1BETA1_WATCH_PODDISRUPTIONBUDGETS_KEY],
    queryFn: async () => {
      return await client.watchPolicyV1beta1PodDisruptionBudgetListForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useWatchPolicyV1beta1PodSecurityPolicyListQuery(params: WatchPolicyV1beta1PodSecurityPolicyListRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_POLICY_V1BETA1_WATCH_PODSECURITYPOLICIES_KEY],
    queryFn: async () => {
      return await client.watchPolicyV1beta1PodSecurityPolicyList(params);
    },
    enabled: true
  });
}
export function useWatchPolicyV1beta1PodSecurityPolicyQuery(params: WatchPolicyV1beta1PodSecurityPolicyRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_POLICY_V1BETA1_WATCH_PODSECURITYPOLICIES_NAME_KEY, params.path.name],
    queryFn: async () => {
      return await client.watchPolicyV1beta1PodSecurityPolicy(params);
    },
    enabled: params.path.name !== undefined
  });
}
export function useGetRbacAuthorizationAPIGroupQuery(params: GetRbacAuthorizationAPIGroupRequest) {
  const client = useKubernetes().client;
  return useQuery<APIGroup, Error>({
    queryKey: [...APIS_RBAC_AUTHORIZATION_K8S_IO_KEY],
    queryFn: async () => {
      return await client.getRbacAuthorizationAPIGroup(params);
    },
    enabled: true
  });
}
export function useGetRbacAuthorizationV1APIResourcesQuery(params: GetRbacAuthorizationV1APIResourcesRequest) {
  const client = useKubernetes().client;
  return useQuery<APIResourceList, Error>({
    queryKey: [...APIS_RBAC_AUTHORIZATION_K8S_IO_V1_KEY],
    queryFn: async () => {
      return await client.getRbacAuthorizationV1APIResources(params);
    },
    enabled: true
  });
}
export function useListRbacAuthorizationV1ClusterRoleBindingQuery(params: ListRbacAuthorizationV1ClusterRoleBindingRequest) {
  const client = useKubernetes().client;
  return useQuery<ClusterRoleBindingList, Error>({
    queryKey: [...APIS_RBAC_AUTHORIZATION_K8S_IO_V1_CLUSTERROLEBINDINGS_KEY],
    queryFn: async () => {
      return await client.listRbacAuthorizationV1ClusterRoleBinding(params);
    },
    enabled: true
  });
}
export function useCreateRbacAuthorizationV1ClusterRoleBinding() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<ClusterRoleBinding, Error, CreateRbacAuthorizationV1ClusterRoleBindingRequest>({
    mutationFn: async request => {
      return client.createRbacAuthorizationV1ClusterRoleBinding(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_RBAC_AUTHORIZATION_K8S_IO_V1_CLUSTERROLEBINDINGS_KEY]
      });
    }
  });
}
export function useDeleteRbacAuthorizationV1CollectionClusterRoleBinding() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteRbacAuthorizationV1CollectionClusterRoleBindingRequest>({
    mutationFn: async request => {
      return client.deleteRbacAuthorizationV1CollectionClusterRoleBinding(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_RBAC_AUTHORIZATION_K8S_IO_V1_CLUSTERROLEBINDINGS_KEY]
      });
    }
  });
}
export function useReadRbacAuthorizationV1ClusterRoleBindingQuery(params: ReadRbacAuthorizationV1ClusterRoleBindingRequest) {
  const client = useKubernetes().client;
  return useQuery<ClusterRoleBinding, Error>({
    queryKey: [...APIS_RBAC_AUTHORIZATION_K8S_IO_V1_CLUSTERROLEBINDINGS_NAME_KEY, params.path.name],
    queryFn: async () => {
      return await client.readRbacAuthorizationV1ClusterRoleBinding(params);
    },
    enabled: params.path.name !== undefined
  });
}
export function useReplaceRbacAuthorizationV1ClusterRoleBinding() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<ClusterRoleBinding, Error, ReplaceRbacAuthorizationV1ClusterRoleBindingRequest>({
    mutationFn: async request => {
      return client.replaceRbacAuthorizationV1ClusterRoleBinding(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_RBAC_AUTHORIZATION_K8S_IO_V1_CLUSTERROLEBINDINGS_NAME_KEY, response.path.name]
      });
    }
  });
}
export function useDeleteRbacAuthorizationV1ClusterRoleBinding() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteRbacAuthorizationV1ClusterRoleBindingRequest>({
    mutationFn: async request => {
      return client.deleteRbacAuthorizationV1ClusterRoleBinding(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_RBAC_AUTHORIZATION_K8S_IO_V1_CLUSTERROLEBINDINGS_NAME_KEY, response.path.name]
      });
    }
  });
}
export function usePatchRbacAuthorizationV1ClusterRoleBinding() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<ClusterRoleBinding, Error, PatchRbacAuthorizationV1ClusterRoleBindingRequest>({
    mutationFn: async request => {
      return client.patchRbacAuthorizationV1ClusterRoleBinding(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_RBAC_AUTHORIZATION_K8S_IO_V1_CLUSTERROLEBINDINGS_NAME_KEY, response.path.name]
      });
    }
  });
}
export function useListRbacAuthorizationV1ClusterRoleQuery(params: ListRbacAuthorizationV1ClusterRoleRequest) {
  const client = useKubernetes().client;
  return useQuery<ClusterRoleList, Error>({
    queryKey: [...APIS_RBAC_AUTHORIZATION_K8S_IO_V1_CLUSTERROLES_KEY],
    queryFn: async () => {
      return await client.listRbacAuthorizationV1ClusterRole(params);
    },
    enabled: true
  });
}
export function useCreateRbacAuthorizationV1ClusterRole() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<ClusterRole, Error, CreateRbacAuthorizationV1ClusterRoleRequest>({
    mutationFn: async request => {
      return client.createRbacAuthorizationV1ClusterRole(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_RBAC_AUTHORIZATION_K8S_IO_V1_CLUSTERROLES_KEY]
      });
    }
  });
}
export function useDeleteRbacAuthorizationV1CollectionClusterRole() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteRbacAuthorizationV1CollectionClusterRoleRequest>({
    mutationFn: async request => {
      return client.deleteRbacAuthorizationV1CollectionClusterRole(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_RBAC_AUTHORIZATION_K8S_IO_V1_CLUSTERROLES_KEY]
      });
    }
  });
}
export function useReadRbacAuthorizationV1ClusterRoleQuery(params: ReadRbacAuthorizationV1ClusterRoleRequest) {
  const client = useKubernetes().client;
  return useQuery<ClusterRole, Error>({
    queryKey: [...APIS_RBAC_AUTHORIZATION_K8S_IO_V1_CLUSTERROLES_NAME_KEY, params.path.name],
    queryFn: async () => {
      return await client.readRbacAuthorizationV1ClusterRole(params);
    },
    enabled: params.path.name !== undefined
  });
}
export function useReplaceRbacAuthorizationV1ClusterRole() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<ClusterRole, Error, ReplaceRbacAuthorizationV1ClusterRoleRequest>({
    mutationFn: async request => {
      return client.replaceRbacAuthorizationV1ClusterRole(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_RBAC_AUTHORIZATION_K8S_IO_V1_CLUSTERROLES_NAME_KEY, response.path.name]
      });
    }
  });
}
export function useDeleteRbacAuthorizationV1ClusterRole() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteRbacAuthorizationV1ClusterRoleRequest>({
    mutationFn: async request => {
      return client.deleteRbacAuthorizationV1ClusterRole(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_RBAC_AUTHORIZATION_K8S_IO_V1_CLUSTERROLES_NAME_KEY, response.path.name]
      });
    }
  });
}
export function usePatchRbacAuthorizationV1ClusterRole() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<ClusterRole, Error, PatchRbacAuthorizationV1ClusterRoleRequest>({
    mutationFn: async request => {
      return client.patchRbacAuthorizationV1ClusterRole(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_RBAC_AUTHORIZATION_K8S_IO_V1_CLUSTERROLES_NAME_KEY, response.path.name]
      });
    }
  });
}
export function useListRbacAuthorizationV1NamespacedRoleBindingQuery(params: ListRbacAuthorizationV1NamespacedRoleBindingRequest) {
  const client = useKubernetes().client;
  return useQuery<RoleBindingList, Error>({
    queryKey: [...APIS_RBAC_AUTHORIZATION_K8S_IO_V1_NAMESPACES_NAMESPACE_ROLEBINDINGS_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.listRbacAuthorizationV1NamespacedRoleBinding(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useCreateRbacAuthorizationV1NamespacedRoleBinding() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<RoleBinding, Error, CreateRbacAuthorizationV1NamespacedRoleBindingRequest>({
    mutationFn: async request => {
      return client.createRbacAuthorizationV1NamespacedRoleBinding(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_RBAC_AUTHORIZATION_K8S_IO_V1_NAMESPACES_NAMESPACE_ROLEBINDINGS_KEY, response.path.namespace]
      });
    }
  });
}
export function useDeleteRbacAuthorizationV1CollectionNamespacedRoleBinding() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteRbacAuthorizationV1CollectionNamespacedRoleBindingRequest>({
    mutationFn: async request => {
      return client.deleteRbacAuthorizationV1CollectionNamespacedRoleBinding(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_RBAC_AUTHORIZATION_K8S_IO_V1_NAMESPACES_NAMESPACE_ROLEBINDINGS_KEY, response.path.namespace]
      });
    }
  });
}
export function useReadRbacAuthorizationV1NamespacedRoleBindingQuery(params: ReadRbacAuthorizationV1NamespacedRoleBindingRequest) {
  const client = useKubernetes().client;
  return useQuery<RoleBinding, Error>({
    queryKey: [...APIS_RBAC_AUTHORIZATION_K8S_IO_V1_NAMESPACES_NAMESPACE_ROLEBINDINGS_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.readRbacAuthorizationV1NamespacedRoleBinding(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useReplaceRbacAuthorizationV1NamespacedRoleBinding() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<RoleBinding, Error, ReplaceRbacAuthorizationV1NamespacedRoleBindingRequest>({
    mutationFn: async request => {
      return client.replaceRbacAuthorizationV1NamespacedRoleBinding(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_RBAC_AUTHORIZATION_K8S_IO_V1_NAMESPACES_NAMESPACE_ROLEBINDINGS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useDeleteRbacAuthorizationV1NamespacedRoleBinding() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteRbacAuthorizationV1NamespacedRoleBindingRequest>({
    mutationFn: async request => {
      return client.deleteRbacAuthorizationV1NamespacedRoleBinding(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_RBAC_AUTHORIZATION_K8S_IO_V1_NAMESPACES_NAMESPACE_ROLEBINDINGS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function usePatchRbacAuthorizationV1NamespacedRoleBinding() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<RoleBinding, Error, PatchRbacAuthorizationV1NamespacedRoleBindingRequest>({
    mutationFn: async request => {
      return client.patchRbacAuthorizationV1NamespacedRoleBinding(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_RBAC_AUTHORIZATION_K8S_IO_V1_NAMESPACES_NAMESPACE_ROLEBINDINGS_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useListRbacAuthorizationV1NamespacedRoleQuery(params: ListRbacAuthorizationV1NamespacedRoleRequest) {
  const client = useKubernetes().client;
  return useQuery<RoleList, Error>({
    queryKey: [...APIS_RBAC_AUTHORIZATION_K8S_IO_V1_NAMESPACES_NAMESPACE_ROLES_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.listRbacAuthorizationV1NamespacedRole(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useCreateRbacAuthorizationV1NamespacedRole() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Role, Error, CreateRbacAuthorizationV1NamespacedRoleRequest>({
    mutationFn: async request => {
      return client.createRbacAuthorizationV1NamespacedRole(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_RBAC_AUTHORIZATION_K8S_IO_V1_NAMESPACES_NAMESPACE_ROLES_KEY, response.path.namespace]
      });
    }
  });
}
export function useDeleteRbacAuthorizationV1CollectionNamespacedRole() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteRbacAuthorizationV1CollectionNamespacedRoleRequest>({
    mutationFn: async request => {
      return client.deleteRbacAuthorizationV1CollectionNamespacedRole(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_RBAC_AUTHORIZATION_K8S_IO_V1_NAMESPACES_NAMESPACE_ROLES_KEY, response.path.namespace]
      });
    }
  });
}
export function useReadRbacAuthorizationV1NamespacedRoleQuery(params: ReadRbacAuthorizationV1NamespacedRoleRequest) {
  const client = useKubernetes().client;
  return useQuery<Role, Error>({
    queryKey: [...APIS_RBAC_AUTHORIZATION_K8S_IO_V1_NAMESPACES_NAMESPACE_ROLES_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.readRbacAuthorizationV1NamespacedRole(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useReplaceRbacAuthorizationV1NamespacedRole() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Role, Error, ReplaceRbacAuthorizationV1NamespacedRoleRequest>({
    mutationFn: async request => {
      return client.replaceRbacAuthorizationV1NamespacedRole(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_RBAC_AUTHORIZATION_K8S_IO_V1_NAMESPACES_NAMESPACE_ROLES_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useDeleteRbacAuthorizationV1NamespacedRole() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteRbacAuthorizationV1NamespacedRoleRequest>({
    mutationFn: async request => {
      return client.deleteRbacAuthorizationV1NamespacedRole(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_RBAC_AUTHORIZATION_K8S_IO_V1_NAMESPACES_NAMESPACE_ROLES_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function usePatchRbacAuthorizationV1NamespacedRole() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Role, Error, PatchRbacAuthorizationV1NamespacedRoleRequest>({
    mutationFn: async request => {
      return client.patchRbacAuthorizationV1NamespacedRole(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_RBAC_AUTHORIZATION_K8S_IO_V1_NAMESPACES_NAMESPACE_ROLES_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useListRbacAuthorizationV1RoleBindingForAllNamespacesQuery(params: ListRbacAuthorizationV1RoleBindingForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<RoleBindingList, Error>({
    queryKey: [...APIS_RBAC_AUTHORIZATION_K8S_IO_V1_ROLEBINDINGS_KEY],
    queryFn: async () => {
      return await client.listRbacAuthorizationV1RoleBindingForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useListRbacAuthorizationV1RoleForAllNamespacesQuery(params: ListRbacAuthorizationV1RoleForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<RoleList, Error>({
    queryKey: [...APIS_RBAC_AUTHORIZATION_K8S_IO_V1_ROLES_KEY],
    queryFn: async () => {
      return await client.listRbacAuthorizationV1RoleForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useWatchRbacAuthorizationV1ClusterRoleBindingListQuery(params: WatchRbacAuthorizationV1ClusterRoleBindingListRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_RBAC_AUTHORIZATION_K8S_IO_V1_WATCH_CLUSTERROLEBINDINGS_KEY],
    queryFn: async () => {
      return await client.watchRbacAuthorizationV1ClusterRoleBindingList(params);
    },
    enabled: true
  });
}
export function useWatchRbacAuthorizationV1ClusterRoleBindingQuery(params: WatchRbacAuthorizationV1ClusterRoleBindingRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_RBAC_AUTHORIZATION_K8S_IO_V1_WATCH_CLUSTERROLEBINDINGS_NAME_KEY, params.path.name],
    queryFn: async () => {
      return await client.watchRbacAuthorizationV1ClusterRoleBinding(params);
    },
    enabled: params.path.name !== undefined
  });
}
export function useWatchRbacAuthorizationV1ClusterRoleListQuery(params: WatchRbacAuthorizationV1ClusterRoleListRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_RBAC_AUTHORIZATION_K8S_IO_V1_WATCH_CLUSTERROLES_KEY],
    queryFn: async () => {
      return await client.watchRbacAuthorizationV1ClusterRoleList(params);
    },
    enabled: true
  });
}
export function useWatchRbacAuthorizationV1ClusterRoleQuery(params: WatchRbacAuthorizationV1ClusterRoleRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_RBAC_AUTHORIZATION_K8S_IO_V1_WATCH_CLUSTERROLES_NAME_KEY, params.path.name],
    queryFn: async () => {
      return await client.watchRbacAuthorizationV1ClusterRole(params);
    },
    enabled: params.path.name !== undefined
  });
}
export function useWatchRbacAuthorizationV1NamespacedRoleBindingListQuery(params: WatchRbacAuthorizationV1NamespacedRoleBindingListRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_RBAC_AUTHORIZATION_K8S_IO_V1_WATCH_NAMESPACES_NAMESPACE_ROLEBINDINGS_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.watchRbacAuthorizationV1NamespacedRoleBindingList(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useWatchRbacAuthorizationV1NamespacedRoleBindingQuery(params: WatchRbacAuthorizationV1NamespacedRoleBindingRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_RBAC_AUTHORIZATION_K8S_IO_V1_WATCH_NAMESPACES_NAMESPACE_ROLEBINDINGS_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.watchRbacAuthorizationV1NamespacedRoleBinding(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useWatchRbacAuthorizationV1NamespacedRoleListQuery(params: WatchRbacAuthorizationV1NamespacedRoleListRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_RBAC_AUTHORIZATION_K8S_IO_V1_WATCH_NAMESPACES_NAMESPACE_ROLES_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.watchRbacAuthorizationV1NamespacedRoleList(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useWatchRbacAuthorizationV1NamespacedRoleQuery(params: WatchRbacAuthorizationV1NamespacedRoleRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_RBAC_AUTHORIZATION_K8S_IO_V1_WATCH_NAMESPACES_NAMESPACE_ROLES_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.watchRbacAuthorizationV1NamespacedRole(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useWatchRbacAuthorizationV1RoleBindingListForAllNamespacesQuery(params: WatchRbacAuthorizationV1RoleBindingListForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_RBAC_AUTHORIZATION_K8S_IO_V1_WATCH_ROLEBINDINGS_KEY],
    queryFn: async () => {
      return await client.watchRbacAuthorizationV1RoleBindingListForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useWatchRbacAuthorizationV1RoleListForAllNamespacesQuery(params: WatchRbacAuthorizationV1RoleListForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_RBAC_AUTHORIZATION_K8S_IO_V1_WATCH_ROLES_KEY],
    queryFn: async () => {
      return await client.watchRbacAuthorizationV1RoleListForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useGetSchedulingAPIGroupQuery(params: GetSchedulingAPIGroupRequest) {
  const client = useKubernetes().client;
  return useQuery<APIGroup, Error>({
    queryKey: [...APIS_SCHEDULING_K8S_IO_KEY],
    queryFn: async () => {
      return await client.getSchedulingAPIGroup(params);
    },
    enabled: true
  });
}
export function useGetSchedulingV1APIResourcesQuery(params: GetSchedulingV1APIResourcesRequest) {
  const client = useKubernetes().client;
  return useQuery<APIResourceList, Error>({
    queryKey: [...APIS_SCHEDULING_K8S_IO_V1_KEY],
    queryFn: async () => {
      return await client.getSchedulingV1APIResources(params);
    },
    enabled: true
  });
}
export function useListSchedulingV1PriorityClassQuery(params: ListSchedulingV1PriorityClassRequest) {
  const client = useKubernetes().client;
  return useQuery<PriorityClassList, Error>({
    queryKey: [...APIS_SCHEDULING_K8S_IO_V1_PRIORITYCLASSES_KEY],
    queryFn: async () => {
      return await client.listSchedulingV1PriorityClass(params);
    },
    enabled: true
  });
}
export function useCreateSchedulingV1PriorityClass() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<PriorityClass, Error, CreateSchedulingV1PriorityClassRequest>({
    mutationFn: async request => {
      return client.createSchedulingV1PriorityClass(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_SCHEDULING_K8S_IO_V1_PRIORITYCLASSES_KEY]
      });
    }
  });
}
export function useDeleteSchedulingV1CollectionPriorityClass() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteSchedulingV1CollectionPriorityClassRequest>({
    mutationFn: async request => {
      return client.deleteSchedulingV1CollectionPriorityClass(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_SCHEDULING_K8S_IO_V1_PRIORITYCLASSES_KEY]
      });
    }
  });
}
export function useReadSchedulingV1PriorityClassQuery(params: ReadSchedulingV1PriorityClassRequest) {
  const client = useKubernetes().client;
  return useQuery<PriorityClass, Error>({
    queryKey: [...APIS_SCHEDULING_K8S_IO_V1_PRIORITYCLASSES_NAME_KEY, params.path.name],
    queryFn: async () => {
      return await client.readSchedulingV1PriorityClass(params);
    },
    enabled: params.path.name !== undefined
  });
}
export function useReplaceSchedulingV1PriorityClass() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<PriorityClass, Error, ReplaceSchedulingV1PriorityClassRequest>({
    mutationFn: async request => {
      return client.replaceSchedulingV1PriorityClass(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_SCHEDULING_K8S_IO_V1_PRIORITYCLASSES_NAME_KEY, response.path.name]
      });
    }
  });
}
export function useDeleteSchedulingV1PriorityClass() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteSchedulingV1PriorityClassRequest>({
    mutationFn: async request => {
      return client.deleteSchedulingV1PriorityClass(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_SCHEDULING_K8S_IO_V1_PRIORITYCLASSES_NAME_KEY, response.path.name]
      });
    }
  });
}
export function usePatchSchedulingV1PriorityClass() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<PriorityClass, Error, PatchSchedulingV1PriorityClassRequest>({
    mutationFn: async request => {
      return client.patchSchedulingV1PriorityClass(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_SCHEDULING_K8S_IO_V1_PRIORITYCLASSES_NAME_KEY, response.path.name]
      });
    }
  });
}
export function useWatchSchedulingV1PriorityClassListQuery(params: WatchSchedulingV1PriorityClassListRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_SCHEDULING_K8S_IO_V1_WATCH_PRIORITYCLASSES_KEY],
    queryFn: async () => {
      return await client.watchSchedulingV1PriorityClassList(params);
    },
    enabled: true
  });
}
export function useWatchSchedulingV1PriorityClassQuery(params: WatchSchedulingV1PriorityClassRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_SCHEDULING_K8S_IO_V1_WATCH_PRIORITYCLASSES_NAME_KEY, params.path.name],
    queryFn: async () => {
      return await client.watchSchedulingV1PriorityClass(params);
    },
    enabled: params.path.name !== undefined
  });
}
export function useGetStorageAPIGroupQuery(params: GetStorageAPIGroupRequest) {
  const client = useKubernetes().client;
  return useQuery<APIGroup, Error>({
    queryKey: [...APIS_STORAGE_K8S_IO_KEY],
    queryFn: async () => {
      return await client.getStorageAPIGroup(params);
    },
    enabled: true
  });
}
export function useGetStorageV1APIResourcesQuery(params: GetStorageV1APIResourcesRequest) {
  const client = useKubernetes().client;
  return useQuery<APIResourceList, Error>({
    queryKey: [...APIS_STORAGE_K8S_IO_V1_KEY],
    queryFn: async () => {
      return await client.getStorageV1APIResources(params);
    },
    enabled: true
  });
}
export function useListStorageV1CSIDriverQuery(params: ListStorageV1CSIDriverRequest) {
  const client = useKubernetes().client;
  return useQuery<CSIDriverList, Error>({
    queryKey: [...APIS_STORAGE_K8S_IO_V1_CSIDRIVERS_KEY],
    queryFn: async () => {
      return await client.listStorageV1CSIDriver(params);
    },
    enabled: true
  });
}
export function useCreateStorageV1CSIDriver() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<CSIDriver, Error, CreateStorageV1CSIDriverRequest>({
    mutationFn: async request => {
      return client.createStorageV1CSIDriver(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_STORAGE_K8S_IO_V1_CSIDRIVERS_KEY]
      });
    }
  });
}
export function useDeleteStorageV1CollectionCSIDriver() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteStorageV1CollectionCSIDriverRequest>({
    mutationFn: async request => {
      return client.deleteStorageV1CollectionCSIDriver(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_STORAGE_K8S_IO_V1_CSIDRIVERS_KEY]
      });
    }
  });
}
export function useReadStorageV1CSIDriverQuery(params: ReadStorageV1CSIDriverRequest) {
  const client = useKubernetes().client;
  return useQuery<CSIDriver, Error>({
    queryKey: [...APIS_STORAGE_K8S_IO_V1_CSIDRIVERS_NAME_KEY, params.path.name],
    queryFn: async () => {
      return await client.readStorageV1CSIDriver(params);
    },
    enabled: params.path.name !== undefined
  });
}
export function useReplaceStorageV1CSIDriver() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<CSIDriver, Error, ReplaceStorageV1CSIDriverRequest>({
    mutationFn: async request => {
      return client.replaceStorageV1CSIDriver(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_STORAGE_K8S_IO_V1_CSIDRIVERS_NAME_KEY, response.path.name]
      });
    }
  });
}
export function useDeleteStorageV1CSIDriver() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<CSIDriver, Error, DeleteStorageV1CSIDriverRequest>({
    mutationFn: async request => {
      return client.deleteStorageV1CSIDriver(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_STORAGE_K8S_IO_V1_CSIDRIVERS_NAME_KEY, response.path.name]
      });
    }
  });
}
export function usePatchStorageV1CSIDriver() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<CSIDriver, Error, PatchStorageV1CSIDriverRequest>({
    mutationFn: async request => {
      return client.patchStorageV1CSIDriver(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_STORAGE_K8S_IO_V1_CSIDRIVERS_NAME_KEY, response.path.name]
      });
    }
  });
}
export function useListStorageV1CSINodeQuery(params: ListStorageV1CSINodeRequest) {
  const client = useKubernetes().client;
  return useQuery<CSINodeList, Error>({
    queryKey: [...APIS_STORAGE_K8S_IO_V1_CSINODES_KEY],
    queryFn: async () => {
      return await client.listStorageV1CSINode(params);
    },
    enabled: true
  });
}
export function useCreateStorageV1CSINode() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<CSINode, Error, CreateStorageV1CSINodeRequest>({
    mutationFn: async request => {
      return client.createStorageV1CSINode(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_STORAGE_K8S_IO_V1_CSINODES_KEY]
      });
    }
  });
}
export function useDeleteStorageV1CollectionCSINode() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteStorageV1CollectionCSINodeRequest>({
    mutationFn: async request => {
      return client.deleteStorageV1CollectionCSINode(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_STORAGE_K8S_IO_V1_CSINODES_KEY]
      });
    }
  });
}
export function useReadStorageV1CSINodeQuery(params: ReadStorageV1CSINodeRequest) {
  const client = useKubernetes().client;
  return useQuery<CSINode, Error>({
    queryKey: [...APIS_STORAGE_K8S_IO_V1_CSINODES_NAME_KEY, params.path.name],
    queryFn: async () => {
      return await client.readStorageV1CSINode(params);
    },
    enabled: params.path.name !== undefined
  });
}
export function useReplaceStorageV1CSINode() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<CSINode, Error, ReplaceStorageV1CSINodeRequest>({
    mutationFn: async request => {
      return client.replaceStorageV1CSINode(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_STORAGE_K8S_IO_V1_CSINODES_NAME_KEY, response.path.name]
      });
    }
  });
}
export function useDeleteStorageV1CSINode() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<CSINode, Error, DeleteStorageV1CSINodeRequest>({
    mutationFn: async request => {
      return client.deleteStorageV1CSINode(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_STORAGE_K8S_IO_V1_CSINODES_NAME_KEY, response.path.name]
      });
    }
  });
}
export function usePatchStorageV1CSINode() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<CSINode, Error, PatchStorageV1CSINodeRequest>({
    mutationFn: async request => {
      return client.patchStorageV1CSINode(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_STORAGE_K8S_IO_V1_CSINODES_NAME_KEY, response.path.name]
      });
    }
  });
}
export function useListStorageV1StorageClassQuery(params: ListStorageV1StorageClassRequest) {
  const client = useKubernetes().client;
  return useQuery<StorageClassList, Error>({
    queryKey: [...APIS_STORAGE_K8S_IO_V1_STORAGECLASSES_KEY],
    queryFn: async () => {
      return await client.listStorageV1StorageClass(params);
    },
    enabled: true
  });
}
export function useCreateStorageV1StorageClass() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<StorageClass, Error, CreateStorageV1StorageClassRequest>({
    mutationFn: async request => {
      return client.createStorageV1StorageClass(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_STORAGE_K8S_IO_V1_STORAGECLASSES_KEY]
      });
    }
  });
}
export function useDeleteStorageV1CollectionStorageClass() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteStorageV1CollectionStorageClassRequest>({
    mutationFn: async request => {
      return client.deleteStorageV1CollectionStorageClass(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_STORAGE_K8S_IO_V1_STORAGECLASSES_KEY]
      });
    }
  });
}
export function useReadStorageV1StorageClassQuery(params: ReadStorageV1StorageClassRequest) {
  const client = useKubernetes().client;
  return useQuery<StorageClass, Error>({
    queryKey: [...APIS_STORAGE_K8S_IO_V1_STORAGECLASSES_NAME_KEY, params.path.name],
    queryFn: async () => {
      return await client.readStorageV1StorageClass(params);
    },
    enabled: params.path.name !== undefined
  });
}
export function useReplaceStorageV1StorageClass() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<StorageClass, Error, ReplaceStorageV1StorageClassRequest>({
    mutationFn: async request => {
      return client.replaceStorageV1StorageClass(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_STORAGE_K8S_IO_V1_STORAGECLASSES_NAME_KEY, response.path.name]
      });
    }
  });
}
export function useDeleteStorageV1StorageClass() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<StorageClass, Error, DeleteStorageV1StorageClassRequest>({
    mutationFn: async request => {
      return client.deleteStorageV1StorageClass(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_STORAGE_K8S_IO_V1_STORAGECLASSES_NAME_KEY, response.path.name]
      });
    }
  });
}
export function usePatchStorageV1StorageClass() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<StorageClass, Error, PatchStorageV1StorageClassRequest>({
    mutationFn: async request => {
      return client.patchStorageV1StorageClass(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_STORAGE_K8S_IO_V1_STORAGECLASSES_NAME_KEY, response.path.name]
      });
    }
  });
}
export function useListStorageV1VolumeAttachmentQuery(params: ListStorageV1VolumeAttachmentRequest) {
  const client = useKubernetes().client;
  return useQuery<VolumeAttachmentList, Error>({
    queryKey: [...APIS_STORAGE_K8S_IO_V1_VOLUMEATTACHMENTS_KEY],
    queryFn: async () => {
      return await client.listStorageV1VolumeAttachment(params);
    },
    enabled: true
  });
}
export function useCreateStorageV1VolumeAttachment() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<VolumeAttachment, Error, CreateStorageV1VolumeAttachmentRequest>({
    mutationFn: async request => {
      return client.createStorageV1VolumeAttachment(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_STORAGE_K8S_IO_V1_VOLUMEATTACHMENTS_KEY]
      });
    }
  });
}
export function useDeleteStorageV1CollectionVolumeAttachment() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteStorageV1CollectionVolumeAttachmentRequest>({
    mutationFn: async request => {
      return client.deleteStorageV1CollectionVolumeAttachment(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_STORAGE_K8S_IO_V1_VOLUMEATTACHMENTS_KEY]
      });
    }
  });
}
export function useReadStorageV1VolumeAttachmentQuery(params: ReadStorageV1VolumeAttachmentRequest) {
  const client = useKubernetes().client;
  return useQuery<VolumeAttachment, Error>({
    queryKey: [...APIS_STORAGE_K8S_IO_V1_VOLUMEATTACHMENTS_NAME_KEY, params.path.name],
    queryFn: async () => {
      return await client.readStorageV1VolumeAttachment(params);
    },
    enabled: params.path.name !== undefined
  });
}
export function useReplaceStorageV1VolumeAttachment() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<VolumeAttachment, Error, ReplaceStorageV1VolumeAttachmentRequest>({
    mutationFn: async request => {
      return client.replaceStorageV1VolumeAttachment(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_STORAGE_K8S_IO_V1_VOLUMEATTACHMENTS_NAME_KEY, response.path.name]
      });
    }
  });
}
export function useDeleteStorageV1VolumeAttachment() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<VolumeAttachment, Error, DeleteStorageV1VolumeAttachmentRequest>({
    mutationFn: async request => {
      return client.deleteStorageV1VolumeAttachment(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_STORAGE_K8S_IO_V1_VOLUMEATTACHMENTS_NAME_KEY, response.path.name]
      });
    }
  });
}
export function usePatchStorageV1VolumeAttachment() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<VolumeAttachment, Error, PatchStorageV1VolumeAttachmentRequest>({
    mutationFn: async request => {
      return client.patchStorageV1VolumeAttachment(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_STORAGE_K8S_IO_V1_VOLUMEATTACHMENTS_NAME_KEY, response.path.name]
      });
    }
  });
}
export function useReadStorageV1VolumeAttachmentStatusQuery(params: ReadStorageV1VolumeAttachmentStatusRequest) {
  const client = useKubernetes().client;
  return useQuery<VolumeAttachment, Error>({
    queryKey: [...APIS_STORAGE_K8S_IO_V1_VOLUMEATTACHMENTS_NAME_STATUS_KEY, params.path.name],
    queryFn: async () => {
      return await client.readStorageV1VolumeAttachmentStatus(params);
    },
    enabled: params.path.name !== undefined
  });
}
export function useReplaceStorageV1VolumeAttachmentStatus() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<VolumeAttachment, Error, ReplaceStorageV1VolumeAttachmentStatusRequest>({
    mutationFn: async request => {
      return client.replaceStorageV1VolumeAttachmentStatus(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_STORAGE_K8S_IO_V1_VOLUMEATTACHMENTS_NAME_STATUS_KEY, response.path.name]
      });
    }
  });
}
export function usePatchStorageV1VolumeAttachmentStatus() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<VolumeAttachment, Error, PatchStorageV1VolumeAttachmentStatusRequest>({
    mutationFn: async request => {
      return client.patchStorageV1VolumeAttachmentStatus(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_STORAGE_K8S_IO_V1_VOLUMEATTACHMENTS_NAME_STATUS_KEY, response.path.name]
      });
    }
  });
}
export function useWatchStorageV1CSIDriverListQuery(params: WatchStorageV1CSIDriverListRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_STORAGE_K8S_IO_V1_WATCH_CSIDRIVERS_KEY],
    queryFn: async () => {
      return await client.watchStorageV1CSIDriverList(params);
    },
    enabled: true
  });
}
export function useWatchStorageV1CSIDriverQuery(params: WatchStorageV1CSIDriverRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_STORAGE_K8S_IO_V1_WATCH_CSIDRIVERS_NAME_KEY, params.path.name],
    queryFn: async () => {
      return await client.watchStorageV1CSIDriver(params);
    },
    enabled: params.path.name !== undefined
  });
}
export function useWatchStorageV1CSINodeListQuery(params: WatchStorageV1CSINodeListRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_STORAGE_K8S_IO_V1_WATCH_CSINODES_KEY],
    queryFn: async () => {
      return await client.watchStorageV1CSINodeList(params);
    },
    enabled: true
  });
}
export function useWatchStorageV1CSINodeQuery(params: WatchStorageV1CSINodeRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_STORAGE_K8S_IO_V1_WATCH_CSINODES_NAME_KEY, params.path.name],
    queryFn: async () => {
      return await client.watchStorageV1CSINode(params);
    },
    enabled: params.path.name !== undefined
  });
}
export function useWatchStorageV1StorageClassListQuery(params: WatchStorageV1StorageClassListRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_STORAGE_K8S_IO_V1_WATCH_STORAGECLASSES_KEY],
    queryFn: async () => {
      return await client.watchStorageV1StorageClassList(params);
    },
    enabled: true
  });
}
export function useWatchStorageV1StorageClassQuery(params: WatchStorageV1StorageClassRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_STORAGE_K8S_IO_V1_WATCH_STORAGECLASSES_NAME_KEY, params.path.name],
    queryFn: async () => {
      return await client.watchStorageV1StorageClass(params);
    },
    enabled: params.path.name !== undefined
  });
}
export function useWatchStorageV1VolumeAttachmentListQuery(params: WatchStorageV1VolumeAttachmentListRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_STORAGE_K8S_IO_V1_WATCH_VOLUMEATTACHMENTS_KEY],
    queryFn: async () => {
      return await client.watchStorageV1VolumeAttachmentList(params);
    },
    enabled: true
  });
}
export function useWatchStorageV1VolumeAttachmentQuery(params: WatchStorageV1VolumeAttachmentRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_STORAGE_K8S_IO_V1_WATCH_VOLUMEATTACHMENTS_NAME_KEY, params.path.name],
    queryFn: async () => {
      return await client.watchStorageV1VolumeAttachment(params);
    },
    enabled: params.path.name !== undefined
  });
}
export function useGetStorageV1beta1APIResourcesQuery(params: GetStorageV1beta1APIResourcesRequest) {
  const client = useKubernetes().client;
  return useQuery<APIResourceList, Error>({
    queryKey: [...APIS_STORAGE_K8S_IO_V1BETA1_KEY],
    queryFn: async () => {
      return await client.getStorageV1beta1APIResources(params);
    },
    enabled: true
  });
}
export function useListStorageV1beta1CSIStorageCapacityForAllNamespacesQuery(params: ListStorageV1beta1CSIStorageCapacityForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<CSIStorageCapacityList, Error>({
    queryKey: [...APIS_STORAGE_K8S_IO_V1BETA1_CSISTORAGECAPACITIES_KEY],
    queryFn: async () => {
      return await client.listStorageV1beta1CSIStorageCapacityForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useListStorageV1beta1NamespacedCSIStorageCapacityQuery(params: ListStorageV1beta1NamespacedCSIStorageCapacityRequest) {
  const client = useKubernetes().client;
  return useQuery<CSIStorageCapacityList, Error>({
    queryKey: [...APIS_STORAGE_K8S_IO_V1BETA1_NAMESPACES_NAMESPACE_CSISTORAGECAPACITIES_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.listStorageV1beta1NamespacedCSIStorageCapacity(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useCreateStorageV1beta1NamespacedCSIStorageCapacity() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<CSIStorageCapacity, Error, CreateStorageV1beta1NamespacedCSIStorageCapacityRequest>({
    mutationFn: async request => {
      return client.createStorageV1beta1NamespacedCSIStorageCapacity(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_STORAGE_K8S_IO_V1BETA1_NAMESPACES_NAMESPACE_CSISTORAGECAPACITIES_KEY, response.path.namespace]
      });
    }
  });
}
export function useDeleteStorageV1beta1CollectionNamespacedCSIStorageCapacity() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteStorageV1beta1CollectionNamespacedCSIStorageCapacityRequest>({
    mutationFn: async request => {
      return client.deleteStorageV1beta1CollectionNamespacedCSIStorageCapacity(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_STORAGE_K8S_IO_V1BETA1_NAMESPACES_NAMESPACE_CSISTORAGECAPACITIES_KEY, response.path.namespace]
      });
    }
  });
}
export function useReadStorageV1beta1NamespacedCSIStorageCapacityQuery(params: ReadStorageV1beta1NamespacedCSIStorageCapacityRequest) {
  const client = useKubernetes().client;
  return useQuery<CSIStorageCapacity, Error>({
    queryKey: [...APIS_STORAGE_K8S_IO_V1BETA1_NAMESPACES_NAMESPACE_CSISTORAGECAPACITIES_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.readStorageV1beta1NamespacedCSIStorageCapacity(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useReplaceStorageV1beta1NamespacedCSIStorageCapacity() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<CSIStorageCapacity, Error, ReplaceStorageV1beta1NamespacedCSIStorageCapacityRequest>({
    mutationFn: async request => {
      return client.replaceStorageV1beta1NamespacedCSIStorageCapacity(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_STORAGE_K8S_IO_V1BETA1_NAMESPACES_NAMESPACE_CSISTORAGECAPACITIES_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useDeleteStorageV1beta1NamespacedCSIStorageCapacity() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<Status, Error, DeleteStorageV1beta1NamespacedCSIStorageCapacityRequest>({
    mutationFn: async request => {
      return client.deleteStorageV1beta1NamespacedCSIStorageCapacity(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_STORAGE_K8S_IO_V1BETA1_NAMESPACES_NAMESPACE_CSISTORAGECAPACITIES_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function usePatchStorageV1beta1NamespacedCSIStorageCapacity() {
  const client = useKubernetes().client;
  const queryClient = useQueryClient();
  return useMutation<CSIStorageCapacity, Error, PatchStorageV1beta1NamespacedCSIStorageCapacityRequest>({
    mutationFn: async request => {
      return client.patchStorageV1beta1NamespacedCSIStorageCapacity(request);
    },
    onSuccess: (_, response) => {
      queryClient.invalidateQueries({
        queryKey: [...APIS_STORAGE_K8S_IO_V1BETA1_NAMESPACES_NAMESPACE_CSISTORAGECAPACITIES_NAME_KEY, response.path.name, response.path.namespace]
      });
    }
  });
}
export function useWatchStorageV1beta1CSIStorageCapacityListForAllNamespacesQuery(params: WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_STORAGE_K8S_IO_V1BETA1_WATCH_CSISTORAGECAPACITIES_KEY],
    queryFn: async () => {
      return await client.watchStorageV1beta1CSIStorageCapacityListForAllNamespaces(params);
    },
    enabled: true
  });
}
export function useWatchStorageV1beta1NamespacedCSIStorageCapacityListQuery(params: WatchStorageV1beta1NamespacedCSIStorageCapacityListRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_STORAGE_K8S_IO_V1BETA1_WATCH_NAMESPACES_NAMESPACE_CSISTORAGECAPACITIES_KEY, params.path.namespace],
    queryFn: async () => {
      return await client.watchStorageV1beta1NamespacedCSIStorageCapacityList(params);
    },
    enabled: params.path.namespace !== undefined
  });
}
export function useWatchStorageV1beta1NamespacedCSIStorageCapacityQuery(params: WatchStorageV1beta1NamespacedCSIStorageCapacityRequest) {
  const client = useKubernetes().client;
  return useQuery<WatchEvent, Error>({
    queryKey: [...APIS_STORAGE_K8S_IO_V1BETA1_WATCH_NAMESPACES_NAMESPACE_CSISTORAGECAPACITIES_NAME_KEY, params.path.name, params.path.namespace],
    queryFn: async () => {
      return await client.watchStorageV1beta1NamespacedCSIStorageCapacity(params);
    },
    enabled: params.path.name !== undefined && params.path.namespace !== undefined
  });
}
export function useLogFileListHandlerQuery(params: LogFileListHandlerRequest) {
  const client = useKubernetes().client;
  return useQuery<any, Error>({
    queryKey: [...LOGS_KEY],
    queryFn: async () => {
      return await client.logFileListHandler(params);
    },
    enabled: true
  });
}
export function useLogFileHandlerQuery(params: LogFileHandlerRequest) {
  const client = useKubernetes().client;
  return useQuery<any, Error>({
    queryKey: [...LOGS_LOGPATH_KEY, params.path.logpath],
    queryFn: async () => {
      return await client.logFileHandler(params);
    },
    enabled: params.path.logpath !== undefined
  });
}
export function useGetServiceAccountIssuerOpenIDKeysetQuery(params: GetServiceAccountIssuerOpenIDKeysetRequest) {
  const client = useKubernetes().client;
  return useQuery<string, Error>({
    queryKey: [...OPENID_V1_JWKS_KEY],
    queryFn: async () => {
      return await client.getServiceAccountIssuerOpenIDKeyset(params);
    },
    enabled: true
  });
}
export function useGetCodeVersionQuery(params: GetCodeVersionRequest) {
  const client = useKubernetes().client;
  return useQuery<Info, Error>({
    queryKey: [...VERSION_KEY],
    queryFn: async () => {
      return await client.getCodeVersion(params);
    },
    enabled: true
  });
}